YouTube 노트 앱 주요 파일 위치
=====================================

1. 메인 페이지 및 레이아웃
   - client/src/pages/HomePage.tsx: 메인 페이지 (전체 레이아웃과 상태 관리)

2. 핵심 컴포넌트
   - client/src/components/NoteArea.tsx: 노트 영역 및 재생 컨트롤 (타임스탬프 자동 실행 로직 포함)
   - client/src/components/YouTubePlayer.tsx: YouTube 플레이어 컴포넌트
   - client/src/components/VideoLoader.tsx: 영상 검색 및 로딩

3. UI 컴포넌트
   - client/src/components/SettingsPanel.tsx: 우측 설정 패널 (톱니바퀴 버튼)
   - client/src/components/TextOverlay.tsx: 화면 위 텍스트 오버레이
   - client/src/components/OverlayInput.tsx: 오버레이 입력 패널
   - client/src/components/ChapterBar.tsx: YouTube 챕터 바 (페이지네이션)
   - client/src/components/TimeSkipControls.tsx: 영상 건너뛰기 컨트롤
   - client/src/components/FavoriteManager.tsx: 즐겨찾기 관리
   - client/src/components/ScreenLock.tsx: 화면 잠금 기능

4. 모달 및 입력 컴포넌트  
   - client/src/components/TimestampEditModal.tsx: 타임스탬프 편집 모달
   - client/src/components/FolderSelector.tsx: 폴더 선택기
   - client/src/components/CoordinateInput.tsx: 좌표 입력 컴포넌트
   - client/src/components/PositionGrid.tsx: 위치 그리드

5. 녹화 기능
   - client/src/components/RecordingMode.tsx: 녹화 모드
   - client/src/components/RecordingSessionList.tsx: 녹화 세션 목록
   - client/src/components/RecordingSessionCard.tsx: 녹화 세션 카드

6. 유틸리티 및 참고용
   - client/src/components/SimpleNoteArea.tsx: 타임스탬프 기본 로직 참고용 컴포넌트
   - client/src/components/ErrorBoundary.tsx: 에러 경계 컴포넌트
   - client/src/components/Notification.tsx: 알림 컴포넌트

7. 유틸리티 파일
   - client/src/lib/youtubeUtils.ts: YouTube 관련 유틸리티 (formatTime 등)
   - client/src/utils/chapterParser.ts: 챕터 파싱 유틸리티

8. 서버 파일
   - server/index.ts: Express 서버 메인 파일
   - server/routes.ts: API 라우트 정의

9. 설정 파일
   - CLAUDE.md: Claude Code 작업 지침
   - package.json: 패키지 의존성 및 스크립트
   - vite.config.ts: Vite 설정

주요 기능별 파일 매핑:
- 타임스탬프 자동 실행: NoteArea.tsx
- 영상 검색: VideoLoader.tsx  
- 재생 컨트롤: NoteArea.tsx
- 화면 오버레이: TextOverlay.tsx, OverlayInput.tsx
- 설정 관리: SettingsPanel.tsx
- 즐겨찾기: FavoriteManager.tsx
- 챕터 기능: ChapterBar.tsx
- 영상 건너뛰기: TimeSkipControls.tsx
- 커스텀 진행바: YouTubePlayer.tsx (타임스탬프 하이라이트 표시)

커스텀 진행바 시스템 (2025-09-11 완전 복원):
- NoteArea.tsx: 타임스탬프 파싱 및 데이터 변환
  * parseTimestamps() 함수가 노트 텍스트에서 타임스탬프 추출
  * 노트 텍스트 변경 시 useEffect에서 파싱된 데이터를 YouTubePlayer 형식으로 변환
  * setTimestamps로 변환된 데이터 전달: {timeInSeconds, duration, volume, playbackRate, timeFormatted}
- YouTubePlayer.tsx: 커스텀 진행바 렌더링 
  * timestamps prop으로 데이터 수신하여 하이라이트 표시
  * 바설정.커스텀바 토글로 표시/숨김 제어
  * 타임스탬프별로 색상 구분 (볼륨: 초록, 속도: 주황, 둘 다: 보라)
  * 범례 표시로 사용자 가이드 제공
- HomePage.tsx: 상태 관리
  * timestamps 상태를 NoteArea와 YouTubePlayer 간 공유

타임스탬프 자동 실행 및 복원 시스템:
- NoteArea.tsx: 타임스탬프 자동 감지 및 설정 적용/복원
  * useEffect로 재생 중 타임스탬프 구간 감지 (0.5초마다 체크)
  * 타임스탬프 진입 시: 현재 볼륨/속도를 타임스탬프 설정으로 변경
  * 타임스탬프 종료 시: 사용자 설정값으로 복원 (2024-12-11 변경)
  * 타이머 기반 복원: 정확한 지속 시간 후 자동 복원 (재생속도 고려)
  * 자동점프 타이밍: (duration / speed) * 1000 으로 정확한 계산
  * 수동 시간 이동 감지: 1초 이상 점프 시 활성 타임스탬프 상태 초기화
- SettingsPanel.tsx: 재생 기본값 설정
  * UISettings.재생기본값.defaultVolume: 기본 볼륨 (기본값: 100)
  * UISettings.재생기본값.defaultPlaybackRate: 기본 속도 (기본값: 1.0)
- HomePage.tsx: 기본값 초기화 및 전달
  * uiSettings에서 재생기본값 설정을 NoteArea로 전달

볼륨/속도 설정 관리 시스템 (2025-09-11 완전 구현):
- NoteArea.tsx: 3단계 볼륨/속도 관리
  * userSettings: 사용자가 직접 설정한 값 (타임스탬프 복원 대상)
  * 재생기본값: 새 영상 로드 시 자동 적용 (우측 패널 설정값)
  * 타임스탬프 설정: 타임스탬프 구간에서만 임시 적용
- 영상 변경 시 기본값 적용 useEffect:
  * currentVideoId, player, isPlayerReady 변경 감지
  * uiSettings.재생기본값에서 defaultVolume, defaultPlaybackRate 추출
  * YouTube Player API 및 모든 상태 변수 동기화
- 복원 우선순위:
  1. 타임스탬프 종료 → userSettings로 복원
  2. 새 영상 로드 → 재생기본값 자동 적용 후 userSettings 초기화
  3. 사용자 수동 변경 → userSettings 업데이트

타임스탬프 생성 시스템:
- NoteArea.tsx: addTimestamp() 함수 (도장 버튼)
  * 현재 플레이어의 실제 볼륨/속도를 읽어서 타임스탬프 생성
  * 하드코딩된 100%, 1.00x 대신 실시간 설정값 사용
  * 5초 구간 기본 설정, 이전 타임스탬프와 연결되면 자동점프(→) 추가
  * formatTimeWithoutMilliseconds() 사용으로 소수점 없는 정수 시간 (HH:MM:SS)
- TimestampEditModal: addTimestampFromModal() 함수 (편집 버튼)
  * formatTime() 사용으로 소수점 3자리까지 정밀한 시간 (HH:MM:SS.sss)

타임스탬프 우선순위 및 자동점프 시스템:
- 타임스탬프 정렬 순서: 노트 작성 순서 (위→아래, 왼쪽→오른쪽)
  * parseTimestamps()에서 index 기준 정렬 (a.index - b.index)
  * 시간순 정렬이 아닌 노트 순서 유지가 우선
- 자동점프 로직: 노트 순서상 다음 타임스탬프로 이동
  * timestamps[currentIndex + 1] 방식으로 순차 이동
  * 시간 기준이 아닌 노트 순서 기준으로 점프
- 수동 시간 이동 시 처리:
  * 1초 이상 점프 감지 시 activeTimestamp 상태 초기화
  * 현재 위치에서 가장 가까운 이후 타임스탬프 찾기
  * 노트 순서 정보를 콘솔에 출력하여 디버깅 지원

YouTube API 주의사항:
- player.seekTo(seconds, allowSeekAhead)
  * allowSeekAhead=true: 모든 seekTo에서 사용 (간단한 접근법 채택)
  * 복잡한 조건부 로직 제거하고 일관성 있는 동작 보장
- 시청횟수 증가는 loadVideoById 호출 시에만 발생
  * seekTo 자체로는 시청횟수 증가하지 않음
  * 타임스탬프 이동으로 인한 시청횟수 문제 해결됨

=====================================
🎯 타임스탬프 시스템 완전 가이드
=====================================

📋 시스템 개요
-------------
타임스탬프 자동 실행 시스템은 6단계로 작동:
파싱 → 감지 → 진입 → 이탈 → 자동점프 → 사용자설정관리

🔴 절대 건드리면 안 되는 핵심 로직 (Core Logic) - 2025-09-11 재구현 완료
=======================================================================

1. 핵심 상태 변수들 (NoteArea.tsx) - 모든 기능 완전 복원:
   - activeTimestamp: 현재 활성 타임스탬프 (null = 일반재생)
   - originalSettings: 진입 전 설정 백업
   - userSettings: 사용자 수동 설정 (복원 대상)
   - originalUserSettingsRef: 자동점프 contamination 방지 백업
   - processingEntryRef/processingExitRef: 중복 실행 방지 플래그
   - autoJumpTimeoutRef: 자동점프 타이머 관리
   - lastTimeRef: 수동 이동 감지를 위한 이전 시간 추적

2. 타임스탬프 정규식 (절대 변경 금지):
   /\[(\d{1,2}):(\d{2}):(\d{1,2}(?:\.\d{1,3})?)-(\d{1,2}):(\d{2}):(\d{1,2}(?:\.\d{1,3})?),\s*(\d+)%,\s*([\d.]+)x(?:,\s*(->|\|\d+))?\]/g

3. 메인 타임스탬프 감지 루프 (0.5초마다 실행):
   - player.getCurrentTime() → 시간 확인
   - parseTimestamps() → 타임스탬프 목록 생성
   - 진입/이탈/전환 감지 로직

4. 중복 실행 방지 시스템:
   - isDifferentTimestamp 조건 (모든 속성 비교)
   - processingEntry/Exit 플래그 관리
   - autoJumpTimeoutRef 타이머 관리

🟡 조심해서 수정해야 하는 부분 (Caution Zone)
============================================

1. 상태 업데이트 순서:
   - userSettings는 타임스탬프 구간이 아닐 때만 업데이트
   - activeTimestamp 설정 → originalSettings 백업 → 플레이어 설정 적용

2. 타이머 관리:
   - autoJumpTimeoutRef 취소/설정
   - 수동 이동 감지 시 모든 타이머 클리어
   - 지속시간 계산: (duration / speed) * 1000

3. 복원 로직 우선순위:
   ① originalSettings (진입 시 백업)
   ② originalUserSettingsRef (더블클릭 contamination 방지)
   ③ userSettings (최종 fallback)

🟢 자유롭게 수정 가능한 부분 (Safe Zone)
=====================================

1. 디버그 로그 메시지
2. 알림 텍스트 (showNotification)
3. UI 레이아웃 및 스타일
4. 타임스탬프 생성 기본값 (5초 구간, 100% 볼륨 등)
5. 감지 주기 (현재 0.5초)
6. 허용 오차 (현재 ± 0.01초)

⚡ 6단계 작동 순서 (변경 시 전체 검토 필요)
========================================

1️⃣ 파싱 단계:
   parseTimestamps() → 노트 텍스트에서 타임스탬프 추출
   → index 기준 정렬 (노트 순서 유지)

2️⃣ 감지 단계:
   0.5초마다 player.getCurrentTime() 체크
   → 수동 이동 감지 (2초 이상 점프)
   → 타임스탬프 구간 진입/이탈 판별

3️⃣ 진입 단계:
   currentStamp && !activeTimestamp 조건
   → originalSettings 백업
   → 타임스탬프 설정 적용
   → 액션 처리 (일반/정지/자동점프)

4️⃣ 이탈 단계:
   !currentStamp && activeTimestamp 조건
   → originalSettings로 복원
   → activeTimestamp 초기화

5️⃣ 자동점프 단계:
   타이머 종료 시 → 다음 타임스탬프 찾기
   → 거리별 seekTo 설정 → 이동 실행

6️⃣ 사용자설정관리:
   타임스탬프 구간 외에서만 userSettings 업데이트
   → 동기화 로직으로 일관성 유지

🚨 금기사항 (절대 하면 안 되는 것들)
===============================

❌ activeTimestamp를 직접 null로 설정 (이탈 로직 우회)
❌ userSettings를 타임스탬프 구간에서 업데이트
❌ processingEntry/Exit 플래그 무시하고 강제 실행
❌ 타임스탬프 정규식 변경 (전체 시스템 파괴)
❌ originalSettings 백업 없이 설정 변경
❌ autoJumpTimeoutRef 클리어 없이 새 타이머 설정

✅ 안전한 수정 가이드
===================

1. 새로운 액션 추가 시:
   - 진입 로직에 액션 처리 코드 추가
   - parseTimestamps에서 새 패턴 인식 추가
   - 정규식은 기존 그룹 유지하며 확장

2. 감지 주기 변경 시:
   - setInterval 시간만 변경 (500ms → 다른 값)
   - 로직 자체는 건드리지 않기

3. UI 개선 시:
   - 상태 변수는 읽기만 하고 직접 수정 금지
   - 핸들러 함수 통해서만 상태 변경

4. 디버깅 시:
   - console.log 추가는 자유
   - 핵심 로직 수정은 백업 후 진행

📊 의존성 매트릭스
================

activeTimestamp 변경 시 영향받는 것들:
→ 진입/이탈 로직, 설정 복원, userSettings 업데이트 조건

userSettings 변경 시 영향받는 것들:
→ 복원 대상 값, 동기화 로직, 새 영상 로드 시 초기화

originalSettings 변경 시 영향받는 것들:
→ 복원 로직, 진입 시 백업 로직

🔧 트러블슈팅 체크포인트
=====================

문제: 타임스탬프가 반복 실행됨
→ processingEntry/Exit 플래그 확인
→ isDifferentTimestamp 조건 확인

문제: 설정이 복원 안 됨
→ originalSettings 백업 여부 확인
→ userSettings 오염 여부 확인

문제: 자동점프가 안 됨
→ autoJumpTimeoutRef 타이머 상태 확인
→ 다음 타임스탬프 존재 여부 확인

문제: 수동 이동 시 이상 동작
→ 2초 이상 점프 감지 로직 확인
→ 모든 상태 초기화 여부 확인

🛡️ 중복 코드 예방 시스템
=====================

⚠️ 중복 발생 위험 지역 (Duplication Risk Zones)
===========================================

1. 타임스탬프 처리 로직:
   ❌ 위험: 여러 useEffect에서 동일한 타임스탬프 감지 로직
   ✅ 해결: 단일 useEffect에서만 처리, 역할별 분리
   📍 위치: NoteArea.tsx의 타임스탬프 자동 실행 useEffect

2. 플레이어 설정 변경:
   ❌ 위험: setVolume/setPlaybackRate 호출이 여러 곳에 분산
   ✅ 해결: 전용 핸들러 함수 사용 (handleVolumeChange, handleSpeedChange)
   📍 위치: NoteArea.tsx의 사용자 설정 핸들러들

3. 상태 동기화:
   ❌ 위험: currentVolume/currentPlaybackRate 업데이트가 중복
   ✅ 해결: 단일 동기화 useEffect에서만 처리
   📍 위치: NoteArea.tsx의 플레이어 상태 동기화 useEffect

4. 타임스탬프 파싱:
   ❌ 위험: parseTimestamps 로직이 여러 곳에 복사
   ✅ 해결: 단일 함수로 중앙화, 정규식 상수 분리
   📍 위치: NoteArea.tsx의 TIMESTAMP_REGEX 상수

📋 중복 방지 체크리스트
===================

새 기능 추가 전 필수 확인사항:

□ 기존에 비슷한 로직이 있는지 검색
□ 공통 유틸리티로 분리 가능한지 확인
□ 상태 업데이트 로직이 기존과 충돌하지 않는지 확인
□ useEffect 의존성 배열이 다른 것과 겹치지 않는지 확인

🔍 중복 코드 탐지 패턴
===================

이런 패턴을 발견하면 즉시 리팩토링:

❌ player.setVolume() 호출이 3곳 이상
❌ getCurrentTime() 체크가 여러 useEffect에
❌ activeTimestamp 상태 변경이 여러 곳에
❌ 같은 정규식이 2곳 이상에서 사용
❌ 타임스탬프 파싱 로직이 복사됨

🎯 단일 책임 원칙 (Single Responsibility)
====================================

각 useEffect의 명확한 역할:

1. 수동 이동 감지 useEffect:
   - 오직 2초 이상 점프 감지만
   - 모든 플레이어 상태에서 작동
   - activeTimestamp 초기화만 담당

2. 타임스탬프 자동 실행 useEffect:
   - 오직 재생 중에만 작동
   - 진입/이탈/전환 감지만
   - 설정 적용/복원 담당

3. 플레이어 동기화 useEffect:
   - UI와 플레이어 상태 일치만
   - userSettings 업데이트 담당
   - 타임스탬프 구간에서는 비활성

🚧 리팩토링 금지 구역
==================

다음 부분들은 안정화되어 있으므로 건드리지 말 것:

🔒 parseTimestamps() 함수 내부 로직
🔒 TIMESTAMP_REGEX 정규식
🔒 activeTimestamp 상태 관리 로직
🔒 processingEntry/Exit 플래그 시스템
🔒 originalSettings 백업/복원 체계

📐 코드 품질 가이드라인
====================

1. 함수 길이 제한:
   - useEffect 내부: 50줄 이하
   - 일반 함수: 30줄 이하
   - 초과 시 하위 함수로 분리

2. 상태 변수 제한:
   - 컴포넌트당 useState 20개 이하
   - 관련 상태는 객체로 그룹화

3. useEffect 제한:
   - 컴포넌트당 10개 이하
   - 역할별로 명확히 분리
   - 의존성 배열 중복 금지

⚡ 핫스팟 모니터링
===============

정기적으로 점검해야 할 복잡도 높은 구역:

🔥 NoteArea.tsx 타임스탬프 감지 로직 (300-500줄)
🔥 handleTimestampClick 더블클릭 처리 (640-760줄)
🔥 플레이어 상태 동기화 useEffect (1000-1040줄)

이 구역들에서 코드 추가 시 특히 주의!

속도값 0.05 단위 반올림 시스템:
- YouTube Player API는 내부적으로 getPlaybackRate() 결과를 0.05 단위로 반올림
- 일관성을 위해 모든 속도 관련 로직에서 roundToNearestStep() 함수 사용
- 적용 위치: 사용자 변경, 동기화, userSettings 업데이트
- 반올림 공식: Math.round(value / 0.05) * 0.05
- 예시: 1.23x → 1.25x, 0.87x → 0.85x, 1.47x → 1.45x

모바일 디버그 로그 패널:
- 컴포넌트: DebugLogPanel.tsx
- 위치: HomePage.tsx에 통합
- 기능: console 오버라이드, 카테고리별 필터, 시간스탬프, 로그 복사/삭제
- 활성화: 우측 하단 필터 아이콘 버튼 클릭
- 카테고리: timestamp, userSettings, sync, manual, error, warn
- 자동 스크롤 및 최대 1000개 로그 제한

타임스탬프 자동 실행 시스템 재구현 완료 (2025-09-11):
- NoteArea.tsx에서 완전 재구현된 타임스탬프 자동 실행 시스템
- 중복 실행 방지: processingEntryRef, processingExitRef (useRef 기반)
- 자동점프 타이머: autoJumpTimeoutRef로 정확한 타이밍 제어
- 사용자 설정 백업: originalUserSettingsRef로 contamination 방지
- 수동 이동 감지: 2초 이상 점프 시 모든 상태 초기화
- 단일 책임 useEffect: 수동 이동 감지 vs 타임스탬프 처리 분리
- 컴파일 오류 해결: 중복 변수명 충돌 수정 (jumpCurrentTime)
- 커스텀바 데이터 변환: 노트 텍스트 변경 시 YouTubePlayer 형식으로 변환
- 영상 로드 기본값 적용: currentVideoId 변경 시 우측 패널 설정 자동 반영
- 시스템 상태: 완전 작동 가능, 모든 기능 통합 테스트 완료

자동점프 및 설정 복원 개선 (2025-09-11 수정):
- 원래 사용자 설정 보존: originalUserSettingsRef로 자동점프 시작 시점 설정 저장
- 2단계 useEffect 분리:
  * 첫 번째: 모든 상태에서 수동 이동 감지 (일시정지 포함)
  * 두 번째: 재생 중에만 타임스탬프 자동 실행
- 설정 복원 로직 개선:
  * 자동점프 후 100ms 후 원래 설정 복원 (새 타임스탬프 진입 전에)
  * userSettings 오염 방지: 원래 설정으로 완전 복원
  * 복원 완료 후 originalUserSettingsRef 초기화
- 수동 이동 감지 임계값: 1초 → 2초 (false positive 방지)
- useEffect 의존성 배열 최적화: 불필요한 cleanup 방지

중요 주의사항 (2025-09-11 재구현 완료 반영):
- 타임스탬프 자동 실행 시스템: 완전 재구현되어 모든 기능 정상 작동
- 컴파일 오류: 모두 해결됨 (변수명 충돌 수정: jumpCurrentTime)
- 커스텀바 타임스탬프 하이라이트: 재구현 완료, 정상 표시됨
- 영상 로드 시 재생 기본값 적용: 완전 해결, 우측 패널 설정 자동 반영
- 타임스탬프 파싱 로직이 변경되면 NoteArea.tsx의 데이터 변환 부분도 함께 업데이트 필요
- YouTubePlayer가 기대하는 데이터 형식: {timeInSeconds, duration, volume, playbackRate, timeFormatted}
- NoteArea 파싱 결과 형식: {startTime, endTime, volume, speed, action, raw, index}
- 기본값 변경 시: HomePage.tsx의 초기값과 SettingsPanel.tsx의 UI가 함께 업데이트 필요
- 타임스탬프 정규식: 밀리초 선택적 지원 (\d{1,2}(?:\.\d{1,3})?) - 소수점 있어도/없어도 파싱 가능
- formatTime 함수: 밀리초 3자리 표시 지원 (편집 버튼용)
- formatTimeWithoutMilliseconds 함수: 정수 시간만 표시 (도장 버튼용)
- userSettings는 타임스탬프 구간이 아닐 때만 업데이트되어야 함 (중요!)
- 모든 속도값은 0.05 단위로 반올림되어야 함 (YouTube API 호환성)
- 중복 실행 방지: processingEntryRef, processingExitRef, autoJumpTimeoutRef 상태 무결성 유지 필수
- 타임스탬프 감지 로직 수정 시 isDifferentTimestamp 조건도 함께 검토하여 무한 루프 방지
- 개발 서버: http://localhost:5173/ 정상 실행 중, 모든 타임스탬프 기능 테스트 가능

최근 버그 수정 (2025-09-11):
- ChapterBar.tsx: 페이지네이션 입력 필드 개선
  * 숫자 입력 시 빈 값 허용 (임시 상태 inputValue 추가)
  * onBlur에서 검증 및 적용 (빈 값은 1로 기본 처리)
  * Enter 키 시 자동 blur 처리로 즉시 적용
- VideoLoader.tsx: 영상 검색 목록 초기화 문제 해결
  * 새로운 검색 시 setFilteredResults([]) 추가로 이전 결과 완전 제거
  * 검색 시작 시점에 검색 결과와 필터링 결과 모두 초기화
- YouTubePlayer.tsx & VideoLoader.tsx: 시청 기록 업데이트 문제 해결
  * VideoLoader에서 중복 loadVideoById 제거, 영상 선택은 setCurrentVideoId만 호출
  * YouTubePlayer useEffect에서 currentVideoId 변경 감지하여 loadVideoById 및 playVideo 자동 호출
  * onPlayerStateChange에서 재생 시작(state=1) 시 시청 기록 자동 저장
  * window.YT.PlayerState 참조 오류 수정 (숫자 값 1로 직접 비교)
  * 시청 횟수 정확히 카운트: 새 영상 1회, 재시청 시 증가

업데이트 지침:
새로운 컴포넌트나 기능이 추가되면 이 파일을 업데이트하여 위치를 명확히 기록해주세요.