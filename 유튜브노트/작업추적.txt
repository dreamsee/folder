유튜브노트 프로젝트 작업 추적 파일
==========================================

프로젝트 위치: /data/data/com.termux/files/home/folder/유튜브노트
깃허브 저장소: https://github.com/dreamsee/folder (유튜브노트 폴더)

GitHub에서 파일 찾는 요령 및 방법
================================

1. 주요 파일 위치 파악하기
   - client/src/pages/HomePage.tsx: 메인 페이지 (전체 레이아웃과 상태 관리)
   - client/src/components/NoteArea.tsx: 노트 영역 및 재생 컨트롤
   - client/src/components/YouTubePlayer.tsx: 유튜브 플레이어 및 진행바
   - client/src/components/SettingsPanel.tsx: 우측 설정 패널 (톱니바퀴 버튼)
   - client/src/components/TextOverlay.tsx: 화면 위 텍스트 오버레이
   - client/src/components/OverlayInput.tsx: 오버레이 입력 패널

2. 파일에서 특정 기능 찾는 방법
   GitHub에서 파일 열고 Ctrl+F로 다음 키워드 검색:
   - 설정 관련: "uiSettings", "화면텍스트", "빠른설정"
   - 버튼 관련: "Button", "onClick", "좌상단", "상", "우상"
   - 토글 관련: "Switch", "checked", "onCheckedChange"
   - UI 표시/숨김: "!== false", "표시", "패널표시"

3. 설정 구조 이해하기
   SettingsPanel.tsx에서 UISettings 인터페이스 확인:
   ```
   화면텍스트: {
     패널표시: boolean;
     좌표설정: boolean;
     스타일설정: boolean;
     빠른설정: boolean;
     빠른설정위치: string;
   };
   ```

4. 컴포넌트 간 연결 파악하기
   HomePage.tsx에서 컴포넌트들이 어떻게 연결되는지 확인:
   - settings 상태가 각 컴포넌트에 uiSettings prop으로 전달
   - onSettingsChange 함수로 설정 변경사항 동기화

현재 진행 상황
===============

완료된 작업:
- 타임스탬프 일시정지 기능 정상화 (|숫자 형식)
- 재생 컨트롤 UI 완전 복구 (드래그 컨트롤, 슬라이더, 버튼들)
- 설정 패널에서 재생 컨트롤 개별 토글 기능 (볼륨, 속도, 녹화, 도장, 편집)
- 노트 영역 표시/숨김 토글 기능
- 무한 로딩 문제 해결 (ErrorBoundary)
- 테스트용 Simple 컴포넌트들 참고용 보관
- 화면 텍스트 빠른 설정 9칸 버튼 문제 해결 ★★★ 완료
- 화면 텍스트 토글 기능 작동 문제 해결 ★★ 완료

다음 해결해야 할 문제들
======================

1. 화면 텍스트 빠른 설정 버튼 사라짐 문제 ★★★ 긴급
   
   문제 상황:
   - 설정 > 화면 텍스트 > 빠른 설정을 켜도 9칸의 위치 버튼이 나타나지 않음
   - 원래 있어야 할 버튼들: 좌상단, 상, 우상단, 좌, 중앙, 우, 좌하단, 하, 우하단
   
   조사해야 할 파일:
   a) OverlayInput.tsx 또는 TextOverlay.tsx
      - 빠른 설정 버튼들이 실제로 렌더링되는 곳
      - uiSettings.화면텍스트.빠른설정 조건 확인
      - 버튼 배열 및 레이아웃 코드 찾기
   
   b) SettingsPanel.tsx
      - 화면텍스트 설정 섹션 확인
      - 빠른설정 토글이 제대로 작동하는지 확인
      - 빠른설정위치 설정이 올바르게 저장/불러오기 되는지 확인
   
   찾아야 할 코드 패턴:
   - "빠른설정" 또는 "quickSettings"
   - "좌상단" 또는 grid 배열 패턴
   - 9개 버튼을 그리는 반복문이나 배열
   - position 또는 location 관련 코드

2. 화면 텍스트 토글 기능 작동 안됨 ★★
   
   문제 상황:
   - 설정에서 화면텍스트 관련 토글들이 실제 화면에 반영되지 않음
   - 좌표설정, 스타일설정, 빠른설정 토글이 작동하지 않음
   
   조사해야 할 부분:
   a) 설정값 전달 경로 추적
      HomePage.tsx → OverlayInput.tsx 또는 TextOverlay.tsx
      uiSettings prop이 올바르게 전달되는지 확인
   
   b) 조건부 렌더링 코드 확인
      각 설정에 따라 UI 요소들이 조건부로 표시되는 코드 찾기
      예: {uiSettings.화면텍스트.좌표설정 !== false && (<좌표설정UI>)}
   
   c) 설정 저장/불러오기 확인
      localStorage 저장이 제대로 되는지
      페이지 새로고침 후에도 설정이 유지되는지

3. 코드 구조 파악 가이드 (새로운 클로드를 위한 안내)

   A. 첫 번째로 확인해야 할 파일들:
      1) CLAUDE.md: 프로젝트 작업 규칙과 가이드라인
      2) 작업추적.txt: 현재 상황과 해결해야 할 문제들 (이 파일)
      3) 작업내역 폴더: 이전 작업들의 상세 기록

   B. 화면 텍스트 기능 관련 파일 우선 순위:
      1) OverlayInput.tsx: 오버레이 입력 및 설정 패널 (가장 중요)
      2) TextOverlay.tsx: 실제 화면에 표시되는 텍스트 오버레이
      3) SettingsPanel.tsx: 설정 토글 및 저장 로직
      4) HomePage.tsx: 전체적인 상태 관리 및 props 전달

   C. 디버깅 접근 방법:
      1) 설정값이 올바르게 저장되는가? (SettingsPanel.tsx)
      2) 설정값이 올바르게 전달되는가? (HomePage.tsx → 각 컴포넌트)
      3) 설정값에 따라 UI가 올바르게 조건부 렌더링되는가? (각 컴포넌트)
      4) 실제 기능이 올바르게 작동하는가? (사용자 인터랙션)

   D. 예상되는 문제점들:
      - uiSettings prop이 undefined이거나 잘못된 구조
      - 조건부 렌더링 로직 오류 (!== false 조건 등)
      - 이벤트 핸들러 누락
      - CSS 클래스나 스타일링 문제로 인한 버튼 숨김

   E. 해결 후 테스트 체크리스트:
      - 설정에서 각 토글을 끄고 켰을 때 해당 UI가 사라지고 나타나는가?
      - 9칸 빠른 설정 버튼들이 모두 표시되는가?
      - 각 위치 버튼을 클릭했을 때 텍스트가 해당 위치로 이동하는가?
      - 설정이 localStorage에 저장되고 새로고침 후에도 유지되는가?

   F. 작업 완료 후 해야 할 일:
      1) 변경사항을 깃허브에 커밋 및 푸시
      2) 작업내역 파일 작성 (CLAUDE.md 형식 준수)
      3) 작업추적.txt 파일 업데이트 (완료 항목 체크)

코드 분석 팁
============

1. React 컴포넌트에서 조건부 렌더링 찾기:
   {조건 && (<JSX>)}
   {조건 !== false && (<JSX>)}
   조건 ? <JSX1> : <JSX2>

2. 설정값 사용 패턴:
   uiSettings?.카테고리?.항목
   settings.카테고리.항목

3. 이벤트 핸들러 패턴:
   onClick={함수명}
   onCheckedChange={(값) => 함수(값)}

4. 상태 관리 패턴:
   const [상태명, set상태명] = useState(초기값);
   
5. useEffect로 설정 변경 감지:
   useEffect(() => {}, [의존성배열]);

긴급도 및 우선순위
==================

★★★ 높음: 빠른 설정 9칸 버튼 사라짐 (기능 완전 마비)
★★ 중간: 화면 텍스트 토글 기능 (부분적 기능 장애)
★ 낮음: UI 개선 및 최적화

작업 시 주의사항
===============

1. 기존 작동하는 기능을 건드리지 말 것
2. SimpleNoteArea.tsx 같은 테스트 파일 참고 활용
3. 변경 전후 반드시 테스트
4. CLAUDE.md의 작업 규칙 준수
5. 작업내역 상세 기록 필수