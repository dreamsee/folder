유튜브노트 타임스탬프 시스템 작동로직
==========================================

목차:
1. 시스템 개요 및 6단계 파이프라인
2. 타임스탬프 형식 및 정규식
3. 우선순위 시스템 및 순차 실행
4. 더블클릭 작동 방식 (시작/종료시간 구분)
5. 타임스탬프 액션 (일반/정지/자동점프)
6. 편집 모드 vs 도장버튼 차이점
7. 자동 파싱 및 실시간 업데이트
8. 커스텀바 하이라이트 및 챕터바
9. 설정값 적용 및 복원 시스템
10. 디버깅 및 로그 시스템

==========================================

1. 시스템 개요 및 6단계 파이프라인
==========================================

타임스탬프 자동 실행 시스템은 다음 6단계로 작동합니다:

[단계 1: 파싱 (Parsing)]
- noteText 변경 감지시 parseTimestamps() 함수 실행
- 정규식으로 타임스탬프 패턴 추출
- 시작/종료시간, 볼륨, 속도, 액션 정보 파싱
- 노트 순서(index) 기준으로 정렬 (시간순 아님)

[단계 2: 감지 (Detection)]
- 0.5초마다 현재 재생 시간 체크 (player.getCurrentTime())
- 타임스탬프 구간 내 위치 확인 (± 0.001초 허용 오차)
- 우선순위 기반 타임스탬프 검색 (lastActiveIndex + 1 이후만)
- 수동 이동 감지 (2초 이상 점프시 상태 초기화)

[단계 3: 진입 (Entry)]
- 조건: currentStamp && !activeTimestamp
- originalSettings 백업 (현재 볼륨/속도 저장)
- 타임스탬프 설정 적용 (볼륨/속도 변경)
- 액션 실행 (일반재생/정지/자동점프)
- processingEntryRef로 중복 실행 방지

[단계 4: 이탈 (Exit)]
- 조건: !currentStamp && activeTimestamp
- originalSettings로 복원 또는 재생 기본값 적용
- activeTimestamp 초기화
- processingExitRef로 중복 실행 방지

[단계 5: 자동점프 (Auto Jump)]
- -> 액션이 있는 타임스탬프에서 구간 종료시 실행
- 다음 타임스탬프 검색 (노트 순서 기준)
- autoJumpTimeoutRef로 타이밍 관리
- originalUserSettingsRef 백업으로 contamination 방지

[단계 6: 사용자설정관리 (User Settings Management)]
- 타임스탬프 구간 외에서만 userSettings 업데이트
- 동기화 로직으로 UI와 플레이어 상태 일치
- 0.05 단위 속도 반올림 적용

==========================================

2. 타임스탬프 형식 및 정규식
==========================================

[기본 형식]
[시작시간-종료시간, 볼륨%, 속도x, 액션]

[예시]
[00:01:23.450-00:01:28.450, 80%, 1.25x] - 일반 재생
[00:02:10.330-00:02:15.633, 65%, 1.00x, |3] - 3초 정지
[00:03:00.000-00:03:05.000, 100%, 1.50x, ->] - 자동점프

[시간 형식]
- 도장버튼: HH:MM:SS (정수 초, formatTimeWithoutMilliseconds 사용)
- 편집모드: HH:MM:SS.sss (소수점 3자리, formatTime 사용)
- 파싱: 둘 다 지원 (\d{1,2}(?:\.\d{1,3})? 패턴)

[정규식 패턴]
/\[(\d{1,2}):(\d{2}):(\d{1,2}(?:\.\d{1,3})?)-(\d{1,2}):(\d{2}):(\d{1,2}(?:\.\d{1,3})?),\s*(\d+)%,\s*([\d.]+)x(?:,\s*(->|\|\d+))?\]/g

[그룹 분석]
- 그룹 1-3: 시작시간 (시, 분, 초.밀리초)
- 그룹 4-6: 종료시간 (시, 분, 초.밀리초)
- 그룹 7: 볼륨 (0-100)
- 그룹 8: 속도 (0.25-2.0, 소수점 가능)
- 그룹 9: 액션 (선택적, -> 또는 |숫자)

==========================================

3. 우선순위 시스템 및 순차 실행
==========================================

[우선순위 원칙]
- 노트 작성 순서 우선 (시간 순서가 아님)
- 위에서 아래, 왼쪽에서 오른쪽 순서
- parseTimestamps()에서 index 기준 정렬 (a.index - b.index)

[lastActiveIndex 시스템]
- 마지막 활성화된 타임스탬프 인덱스 추적
- 해당 인덱스 + 1 이후의 타임스탬프만 활성화 가능
- 이전 순서 타임스탬프는 자동으로 건너뜀

[수동 이동시 우선순위 재설정]
1. 가장 가까운 타임스탬프 찾기 (시작시간 기준 거리 계산)
2. 해당 타임스탬프의 이전 인덱스로 lastActiveIndex 설정
3. 가장 가까운 타임스탬프부터 순차 활성화 가능

[예시]
텍스트 순서:
[00:02:29.401-00:02:34.401, 100%, 1.10x] (인덱스 0)
[00:02:10.330-00:02:15.633, 65%, 1.00x, |3] (인덱스 1)

2:07초 수동이동 → 가장 가까운: 인덱스 1(2:10) → lastActiveIndex = 0
2:10초 도달 → 인덱스 1 활성화 → lastActiveIndex = 1
2:29초 도달 → 인덱스 0은 이전 순서이므로 무시됨

==========================================

4. 더블클릭 작동 방식 (시작/종료시간 구분)
==========================================

[클릭 위치 감지]
- handleTimestampClick 함수에서 더블클릭(e.detail === 2) 감지
- textarea.selectionStart로 클릭 위치 파악
- 타임스탬프 텍스트 내에서 대시(-) 위치 기준으로 시작/종료시간 구분

[시작시간 클릭]
- activeTimestamp 설정 (중복 실행 방지용)
- 시작시간으로 이동
- 타임스탬프 설정 즉시 적용 (볼륨/속도 변경)
- 정지 액션(|숫자)이 있으면 즉시 실행 (딜레이 없이)
- 그 외 액션은 필요에 따라 실행
- 자동 감지 시스템과 중복 방지

[종료시간 클릭]
- activeTimestamp 설정하지 않음 (자동 이탈 로직 작동 위해)
- 종료시간으로 이동
- 타임스탬프 구간 밖이므로 자동으로 이탈 로직 실행
- 재생 기본값으로 복원되어 영상 계속 재생

[중복 실행 방지]
- 더블클릭으로 activeTimestamp 설정시 자동 감지에서 중복 진입 차단
- isDifferentTimestamp 조건으로 동일 타임스탬프 재실행 방지
- speed 값 정확히 일치시켜 인식 오류 방지

==========================================

5. 타임스탬프 액션 (일반/정지/자동점프)
==========================================

[일반 타임스탬프]
- 형식: [시작-종료, 볼륨%, 속도x]
- 동작: 해당 시간으로 이동 후 계속 재생
- 구간 종료시: 자동 이탈하여 설정 복원

[정지 타임스탬프 |숫자]
- 형식: [시작-종료, 볼륨%, 속도x, |3]
- 진입시: 즉시 정지 (player.pauseVideo())
- 타이머: setTimeout으로 지정 시간 후 재생 (pauseSeconds * 1000)
- 알림: "N초간 정지 - 이후 자동 재생" → "N초 정지 후 재생 재개"

[자동점프 타임스탬프 ->]
- 형식: [시작-종료, 볼륨%, 속도x, ->]
- 구간 종료시: 다음 타임스탬프로 자동 이동
- 타이밍: (duration / speed) * 1000으로 정확한 계산
- 연쇄 점프: 다음 타임스탬프도 -> 액션이면 재귀 실행
- 다음 없으면: 정지 및 "다음 타임스탬프가 없어 정지" 알림

[액션 우선순위]
1. 더블클릭 액션: 즉시 실행 (200ms 딜레이)
2. 자동 감지 액션: activeTimestamp 없을 때만 실행
3. 중복 방지: processingEntry/Exit 플래그로 제어

==========================================

6. 편집 모드 vs 도장버튼 차이점
==========================================

[도장버튼 (addTimestamp)]
- 정밀도: 정수 초 (HH:MM:SS)
- 포맷: formatTimeWithoutMilliseconds() 사용
- 동작: 영상 일시정지 → 타임스탬프 생성
- 현재값: 플레이어의 실제 볼륨/속도 읽어서 적용
- 기본구간: 5초 (현재시간 ~ 현재시간+5초)
- 자동연결: 이전 타임스탬프와 연결되면 -> 액션 자동 추가

[편집모드 (TimestampEditModal)]
- 정밀도: 소수점 3자리 (HH:MM:SS.sss)
- 포맷: formatTime() 사용
- 동작: 모달에서 세밀한 시간 입력 가능
- 설정값: 수동으로 볼륨/속도/액션 조정 가능
- 구간설정: 시작/종료시간 직접 입력
- 삽입위치: 현재 커서 위치 또는 선택 영역에 삽입

[타임스탬프 추가/삽입 규칙]
1. 새 타임스탬프 시작시간이 이전 타임스탬프 종료시간보다 이전이면:
   - 자동으로 이전 타임스탬프에 -> 액션 추가
   - 연속 재생 구간 형성
2. 편집시 누르면 이전 타임스탬프에 -> 추가:
   - 현재 위치의 이전 타임스탬프 찾기
   - 해당 타임스탬프에 -> 액션 자동 추가
3. 삽입 위치: 노트 텍스트에서 커서 위치에 삽입

==========================================

7. 자동 파싱 및 실시간 업데이트
==========================================

[자동 파싱 시스템]
- noteText 변경 감지: useEffect([noteText], ...)
- parseTimestamps() 함수 실행
- 파싱된 데이터를 YouTubePlayer 형식으로 변환
- setTimestamps()로 커스텀바 업데이트

[파싱 과정]
1. TIMESTAMP_REGEX로 모든 타임스탬프 매칭
2. 시간을 초 단위로 변환 (시*3600 + 분*60 + 초)
3. 볼륨/속도 숫자로 변환
4. 액션 파싱 (-> 또는 |숫자)
5. index 기준 정렬로 노트 순서 유지

[데이터 변환]
NoteArea 파싱 결과:
{startTime, endTime, volume, speed, action, raw, index}

YouTubePlayer 형식으로 변환:
{timeInSeconds, duration, volume, playbackRate, timeFormatted}

[실시간 감지]
- setInterval(500ms)로 주기적 체크
- 재생 중(playerState === 1)일 때만 감지 활성
- 수동 이동시 즉시 상태 업데이트

==========================================

8. 커스텀바 하이라이트 및 챕터바
==========================================

[커스텀 진행바 시스템]
- NoteArea.tsx: 타임스탬프 파싱 및 데이터 변환
- YouTubePlayer.tsx: 하이라이트 렌더링
- 바설정.커스텀바 토글로 표시/숨김 제어

[하이라이트 색상 구분]
- 볼륨만 변경: 초록색
- 속도만 변경: 주황색
- 볼륨+속도 모두: 보라색
- 기본값(100%, 1.0x): 기본 진행바 색상

[범례 시스템]
- 화면 하단에 색상별 설명 표시
- 사용자 가이드 제공
- 타임스탬프별 설정값 시각화

[챕터바 형식]
- YouTube 기본 챕터 정보 활용
- 페이지네이션으로 챕터 이동
- ChapterBar.tsx에서 구현
- 타임스탬프와 독립적으로 작동

==========================================

9. 설정값 적용 및 복원 시스템
==========================================

[3단계 설정 관리]
1. userSettings: 사용자 직접 설정 (복원 대상)
2. 재생기본값: 새 영상 로드시 자동 적용 (우측 패널 설정)
3. 타임스탬프 설정: 구간에서만 임시 적용

[복원 우선순위]
1. 타임스탬프 종료 → 재생 기본값으로 복원 (변경된 부분)
2. 새 영상 로드 → 재생기본값 자동 적용 후 userSettings 초기화
3. 사용자 수동 변경 → userSettings 업데이트

[설정 백업/복원 체계]
- originalSettings: 타임스탬프 진입시 현재 설정 백업
- originalUserSettingsRef: 자동점프 contamination 방지 백업
- 복원시 항상 재생 기본값 사용 (최신 변경사항 반영)

[0.05 단위 반올림]
- 모든 속도값은 roundToNearestStep() 함수로 0.05 단위 반올림
- YouTube API 호환성 보장
- UI 일관성 유지

==========================================

10. 디버깅 및 로그 시스템
==========================================

[로그 카테고리]
- timestamp: 타임스탬프 진입/이탈/전환
- userSettings: 사용자 설정 변경
- sync: UI와 플레이어 동기화
- manual: 수동 조작 감지
- error: 오류 상황
- warn: 경고 사항

[디버그 정보]
- 현재 영상 시간 정보
- activeTimestamp 상태
- lastActiveIndex 값
- 설정 백업/복원 상태
- 타이머 동작 상태

[모바일 디버그 패널]
- DebugLogPanel.tsx로 구현
- 카테고리별 필터링
- 시간스탬프 포함
- 로그 복사/삭제 기능
- 자동 스크롤 및 1000개 제한

[상태 모니터링]
- processingEntry/Exit 플래그 상태
- autoJumpTimeoutRef 타이머 ID
- 현재 감지된 타임스탬프 정보
- 우선순위 시스템 동작 상태

==========================================

핵심 주의사항:
==========================================

[절대 변경 금지]
- TIMESTAMP_REGEX 정규식
- activeTimestamp 상태 관리 로직
- processingEntry/Exit 플래그 시스템
- parseTimestamps() 내부 로직

[수정시 주의사항]
- 상태 업데이트 순서 준수
- 타이머 관리 (클리어 후 설정)
- 중복 실행 방지 시스템
- 우선순위 로직 무결성 유지

[디버깅 체크포인트]
- 반복 실행: processingEntry/Exit 플래그 확인
- 설정 미복원: originalSettings 백업 확인
- 자동점프 미작동: 타이머 상태 및 다음 타임스탬프 존재 확인
- 수동 이동 오작동: 2초 점프 감지 로직 및 상태 초기화 확인

이 문서는 타임스탬프 시스템의 완전한 작동 원리를 담고 있으며,
새로운 기능 추가나 버그 수정시 필수 참고 자료입니다.