// 7차원 노트 시스템 유틸리티 함수
// Phase 1: 데이터 처리 및 검증 유틸리티

import {
  우선순위차원타입,
  감정차원타입,
  맥락차원타입,
  칠차원데이터타입,
  우선순위레벨타입,
  기본감정타입,
  우선순위기본값,
  감정기본값,
  맥락기본값,
  칠차원분석결과타입,
  기분상태타입,
  텍스트톤타입,
  상황유형타입,
  작성목적타입,
  감정강도타입
} from '../타입/7차원타입';

// ===== 데이터 유효성 검사 =====

export const 칠차원유효성검사 = {
  // 우선순위 차원 검증
  우선순위검증: (데이터: 우선순위차원타입): boolean => {
    if (!데이터) return false;
    
    // 우선순위 레벨 검증 (1-5)
    if (데이터.우선순위레벨 < 1 || 데이터.우선순위레벨 > 5) return false;
    
    // 긴급도 검증
    const 유효한긴급도 = ['즉시', '당일', '이번주', '이번달', '언젠가'];
    if (!유효한긴급도.includes(데이터.긴급도)) return false;
    
    // 중요도 매트릭스 검증 (최소 하나는 true여야 함)
    const 매트릭스 = 데이터.중요도매트릭스;
    const 선택된사분면 = Object.values(매트릭스).filter(v => v === true).length;
    if (선택된사분면 !== 1) return false;
    
    return true;
  },

  // 감정 차원 검증
  감정검증: (데이터: 감정차원타입): boolean => {
    if (!데이터) return false;
    
    // 기본 감정 검증
    const 유효한감정: 기본감정타입[] = ['기쁨', '슬픔', '분노', '두려움', '놀람', '혐오', '중립'];
    if (!유효한감정.includes(데이터.기분상태.주감정)) return false;
    
    // 감정 강도 검증 (1-10)
    const 강도 = 데이터.기분상태.전체강도;
    if (강도 < 1 || 강도 > 10) return false;
    
    // 에너지 레벨 검증 (1-5)
    const 에너지 = 데이터.기분상태.에너지레벨;
    if (에너지 < 1 || 에너지 > 5) return false;
    
    return true;
  },

  // 맥락 차원 검증
  맥락검증: (데이터: 맥락차원타입): boolean => {
    if (!데이터) return false;
    
    // 필수 필드 검증
    if (!데이터.상황유형 || !데이터.작성목적) return false;
    
    // 집중도 검증 (선택적, 있을 경우 1-5)
    if (데이터.환경정보.집중도) {
      const 집중도 = 데이터.환경정보.집중도;
      if (집중도 < 1 || 집중도 > 5) return false;
    }
    
    return true;
  },

  // 전체 7차원 데이터 검증
  전체검증: (데이터: 칠차원데이터타입): boolean => {
    let 유효함 = true;
    
    if (데이터.우선순위차원) {
      유효함 = 유효함 && 칠차원유효성검사.우선순위검증(데이터.우선순위차원);
    }
    
    if (데이터.감정차원) {
      유효함 = 유효함 && 칠차원유효성검사.감정검증(데이터.감정차원);
    }
    
    if (데이터.맥락차원) {
      유효함 = 유효함 && 칠차원유효성검사.맥락검증(데이터.맥락차원);
    }
    
    return 유효함;
  }
};

// ===== 기본값 생성 함수 =====

export const 칠차원기본값생성 = {
  // 전체 7차원 기본값
  전체기본값: (): 칠차원데이터타입 => ({
    우선순위차원: { ...우선순위기본값 },
    감정차원: { ...감정기본값 },
    맥락차원: { ...맥락기본값 }
  }),

  // 우선순위 기본값 (상황별)
  우선순위기본값: (긴급도?: '즉시' | '당일' | '이번주'): 우선순위차원타입 => {
    const 기본값 = { ...우선순위기본값 };
    
    if (긴급도) {
      기본값.긴급도 = 긴급도;
      if (긴급도 === '즉시' || 긴급도 === '당일') {
        기본값.우선순위레벨 = 4;
        기본값.중요도매트릭스 = {
          긴급하고중요함: true,
          중요하지만긴급하지않음: false,
          긴급하지만중요하지않음: false,
          긴급하지도중요하지도않음: false
        };
      }
    }
    
    return 기본값;
  },

  // 감정 기본값 (텍스트 분석 기반)
  감정기본값: (텍스트?: string): 감정차원타입 => {
    const 기본값 = { ...감정기본값 };
    
    if (텍스트) {
      // 간단한 감정 분석 (실제로는 더 정교한 분석 필요)
      const 긍정키워드 = ['좋아', '기뻐', '행복', '감사', '훌륭'];
      const 부정키워드 = ['싫어', '화나', '슬퍼', '힘들', '어려'];
      
      const 긍정점수 = 긍정키워드.filter(키워드 => 텍스트.includes(키워드)).length;
      const 부정점수 = 부정키워드.filter(키워드 => 텍스트.includes(키워드)).length;
      
      if (긍정점수 > 부정점수) {
        기본값.기분상태.주감정 = '기쁨';
        기본값.텍스트톤 = '긍정적';
      } else if (부정점수 > 긍정점수) {
        기본값.기분상태.주감정 = '슬픔';
        기본값.텍스트톤 = '부정적';
      }
    }
    
    return 기본값;
  },

  // 맥락 기본값 (시간대 기반)
  맥락기본값: (현재시간?: Date): 맥락차원타입 => {
    const 기본값 = { ...맥락기본값 };
    const 시간 = 현재시간 || new Date();
    const 시 = 시간.getHours();
    
    // 시간대별 기본 상황 추론
    if (시 >= 9 && 시 < 18) {
      기본값.상황유형 = '업무';
      기본값.환경정보.집중도 = 4;
    } else if (시 >= 18 && 시 < 22) {
      기본값.상황유형 = '개인';
      기본값.환경정보.집중도 = 3;
    } else {
      기본값.상황유형 = '개인';
      기본값.환경정보.집중도 = 2;
    }
    
    return 기본값;
  }
};

// ===== 데이터 변환 함수 =====

export const 칠차원데이터변환 = {
  // 우선순위 레벨을 텍스트로
  우선순위레벨텍스트: (레벨: 우선순위레벨타입): string => {
    const 레벨맵 = {
      1: '매우 낮음',
      2: '낮음',
      3: '보통',
      4: '높음',
      5: '매우 높음'
    };
    return 레벨맵[레벨];
  },

  // 감정을 이모지로
  감정이모지변환: (감정: 기본감정타입): string => {
    const 이모지맵 = {
      '기쁨': '😊',
      '슬픔': '😢',
      '분노': '😠',
      '두려움': '😨',
      '놀람': '😮',
      '혐오': '🤢',
      '중립': '😐'
    };
    return 이모지맵[감정] || '😐';
  },

  // 중요도 매트릭스를 사분면 번호로
  중요도사분면번호: (매트릭스: 우선순위차원타입['중요도매트릭스']): 1 | 2 | 3 | 4 => {
    if (매트릭스.긴급하고중요함) return 1;
    if (매트릭스.중요하지만긴급하지않음) return 2;
    if (매트릭스.긴급하지만중요하지않음) return 3;
    return 4;
  },

  // 텍스트 톤을 색상으로
  톤색상변환: (톤: 텍스트톤타입): string => {
    const 색상맵: Record<텍스트톤타입, string> = {
      '공식적': '#2C3E50',
      '비공식적': '#3498DB',
      '친근한': '#E74C3C',
      '차가운': '#95A5A6',
      '긍정적': '#27AE60',
      '부정적': '#C0392B',
      '중립적': '#7F8C8D',
      '유머러스': '#F39C12',
      '진지한': '#34495E',
      '캐주얼한': '#16A085',
      '비판적': '#8E44AD',
      '칭찬하는': '#F1C40F'
    };
    return 색상맵[톤] || '#7F8C8D';
  }
};

// ===== 7차원 분석 함수 =====

export const 칠차원분석 = {
  // 차원별 점수 계산
  차원점수계산: (데이터: 칠차원데이터타입): 칠차원분석결과타입['차원별점수'] => {
    const 점수 = {
      시간활용도: 100, // 기본 구현됨
      공간조직도: 100, // 기본 구현됨
      분류체계성: 100, // 기본 구현됨
      관계연결성: 50,  // 부분 구현
      우선순위명확성: 0,
      감정인식도: 0,
      맥락완성도: 0
    };

    // 우선순위 점수
    if (데이터.우선순위차원) {
      점수.우선순위명확성 = 100;
      if (!데이터.우선순위차원.마감일) 점수.우선순위명확성 -= 20;
      if (!데이터.우선순위차원.예상소요시간) 점수.우선순위명확성 -= 20;
    }

    // 감정 점수
    if (데이터.감정차원) {
      점수.감정인식도 = 100;
      if (!데이터.감정차원.감정노트) 점수.감정인식도 -= 20;
      if (!데이터.감정차원.감정변화추적) 점수.감정인식도 -= 10;
    }

    // 맥락 점수
    if (데이터.맥락차원) {
      점수.맥락완성도 = 100;
      if (!데이터.맥락차원.위치정보) 점수.맥락완성도 -= 15;
      if (!데이터.맥락차원.참여자) 점수.맥락완성도 -= 15;
      if (!데이터.맥락차원.관련프로젝트) 점수.맥락완성도 -= 10;
    }

    return 점수;
  },

  // 종합 분석 결과
  종합분석: (데이터: 칠차원데이터타입): 칠차원분석결과타입 => {
    const 차원별점수 = 칠차원분석.차원점수계산(데이터);
    const 점수들 = Object.values(차원별점수);
    const 종합점수 = Math.round(점수들.reduce((a, b) => a + b, 0) / 점수들.length);

    const 개선제안: string[] = [];

    // 개선 제안 생성
    if (차원별점수.우선순위명확성 < 50) {
      개선제안.push('우선순위와 마감일을 설정하면 더 효과적으로 관리할 수 있습니다.');
    }
    if (차원별점수.감정인식도 < 50) {
      개선제안.push('감정 상태를 기록하면 패턴을 파악하는데 도움이 됩니다.');
    }
    if (차원별점수.맥락완성도 < 50) {
      개선제안.push('상황과 맥락을 추가하면 나중에 더 잘 이해할 수 있습니다.');
    }
    if (차원별점수.관계연결성 < 70) {
      개선제안.push('관련된 노트나 메시지를 연결하면 정보를 체계적으로 관리할 수 있습니다.');
    }

    return {
      차원별점수,
      종합점수,
      개선제안
    };
  }
};

// ===== 감정 분석 헬퍼 =====

export const 감정분석헬퍼 = {
  // 텍스트에서 감정 추론
  텍스트감정분석: (텍스트: string): 기분상태타입 => {
    // 감정 키워드 맵
    const 감정키워드맵: Record<기본감정타입, string[]> = {
      '기쁨': ['기쁘', '행복', '좋', '즐겁', '신나', '감사', '만족'],
      '슬픔': ['슬프', '우울', '힘들', '아프', '그리워', '외로', '쓸쓸'],
      '분노': ['화나', '짜증', '답답', '억울', '분하', '열받'],
      '두려움': ['무서', '걱정', '불안', '떨리', '긴장', '두려'],
      '놀람': ['놀라', '깜짝', '대박', '헐', '와우', '신기'],
      '혐오': ['싫', '역겹', '더러', '짜증', '불쾌'],
      '중립': []
    };

    let 주감정: 기본감정타입 = '중립';
    let 최고점수 = 0;
    let 전체강도: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 = 5;

    // 각 감정별 점수 계산
    for (const [감정, 키워드들] of Object.entries(감정키워드맵) as [기본감정타입, string[]][]) {
      const 점수 = 키워드들.filter(키워드 => 텍스트.includes(키워드)).length;
      if (점수 > 최고점수) {
        최고점수 = 점수;
        주감정 = 감정;
      }
    }

    // 감정 강도 계산 (키워드 개수 기반)
    if (최고점수 > 0) {
      전체강도 = Math.min(10, 5 + 최고점수 * 2) as 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
    }

    // 에너지 레벨 추론
    const 고에너지감정 = ['기쁨', '분노', '놀람'];
    const 저에너지감정 = ['슬픔', '두려움'];
    
    let 에너지레벨: 1 | 2 | 3 | 4 | 5 = 3;
    if (고에너지감정.includes(주감정)) {
      에너지레벨 = 4;
    } else if (저에너지감정.includes(주감정)) {
      에너지레벨 = 2;
    }

    return {
      주감정,
      전체강도,
      에너지레벨
    };
  },

  // 감정 변화 추적
  감정변화계산: (이전감정: 기분상태타입, 현재감정: 기분상태타입): string => {
    if (이전감정.주감정 === 현재감정.주감정) {
      if (이전감정.전체강도 < 현재감정.전체강도) {
        return `${이전감정.주감정} 감정이 더 강해졌습니다.`;
      } else if (이전감정.전체강도 > 현재감정.전체강도) {
        return `${이전감정.주감정} 감정이 약해졌습니다.`;
      }
      return '감정 상태가 유지되고 있습니다.';
    }
    
    return `${이전감정.주감정}에서 ${현재감정.주감정}으로 변화했습니다.`;
  }
};

// ===== 맥락 추론 헬퍼 =====

export const 맥락추론헬퍼 = {
  // 시간대별 상황 추론
  시간대상황추론: (시간: Date): 상황유형타입 => {
    const 시 = 시간.getHours();
    const 요일 = 시간.getDay(); // 0: 일요일, 6: 토요일
    
    // 주말
    if (요일 === 0 || 요일 === 6) {
      return '개인';
    }
    
    // 평일
    if (시 >= 9 && 시 < 18) return '업무';
    if (시 >= 18 && 시 < 21) return '개인';
    if (시 >= 21 || 시 < 6) return '개인';
    
    return '개인';
  },

  // 텍스트에서 목적 추론
  작성목적추론: (텍스트: string): 작성목적타입 => {
    const 목적키워드맵: Record<작성목적타입, string[]> = {
      '기록': ['기록', '메모', '적어', '남겨'],
      '정리': ['정리', '요약', '정돈', '분류'],
      '계획': ['계획', '예정', '일정', '목표', '할일'],
      '아이디어': ['아이디어', '생각', '발상', '떠올'],
      '문제해결': ['문제', '해결', '어떻게', '왜', '원인'],
      '학습': ['공부', '학습', '배우', '익히', '연습'],
      '공유': ['공유', '전달', '알려', '설명'],
      '보고': ['보고', '결과', '진행', '완료'],
      '검토': ['검토', '확인', '체크', '점검'],
      '임시메모': ['임시', '잠시', '나중에']
    };

    for (const [목적, 키워드들] of Object.entries(목적키워드맵) as [작성목적타입, string[]][]) {
      if (키워드들.some(키워드 => 텍스트.includes(키워드))) {
        return 목적;
      }
    }

    return '기록'; // 기본값
  }
};