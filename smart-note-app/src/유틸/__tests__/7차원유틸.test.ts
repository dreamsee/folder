// 7차원 노트 시스템 유틸리티 함수 테스트
// Jest 단위 테스트

import {
  칠차원유효성검사,
  칠차원기본값생성,
  칠차원데이터변환,
  칠차원분석,
  감정분석헬퍼,
  맥락추론헬퍼
} from '../7차원데이터유틸';

import {
  우선순위차원타입,
  감정차원타입,
  맥락차원타입,
  기본감정타입
} from '../../타입/7차원타입';

describe('7차원 유효성 검사', () => {
  describe('우선순위 검증', () => {
    test('유효한 우선순위 데이터를 검증한다', () => {
      const 유효한데이터: 우선순위차원타입 = {
        우선순위레벨: 3,
        긴급도: '당일',
        중요도매트릭스: {
          긴급하고중요함: true,
          중요하지만긴급하지않음: false,
          긴급하지만중요하지않음: false,
          긴급하지도중요하지도않음: false
        }
      };

      expect(칠차원유효성검사.우선순위검증(유효한데이터)).toBe(true);
    });

    test('잘못된 우선순위 레벨을 거부한다', () => {
      const 잘못된데이터: 우선순위차원타입 = {
        우선순위레벨: 6 as any, // 1-5 범위 밖
        긴급도: '당일',
        중요도매트릭스: {
          긴급하고중요함: true,
          중요하지만긴급하지않음: false,
          긴급하지만중요하지않음: false,
          긴급하지도중요하지도않음: false
        }
      };

      expect(칠차원유효성검사.우선순위검증(잘못된데이터)).toBe(false);
    });

    test('중요도 매트릭스에서 하나만 선택되어야 한다', () => {
      const 여러개선택데이터: 우선순위차원타입 = {
        우선순위레벨: 3,
        긴급도: '당일',
        중요도매트릭스: {
          긴급하고중요함: true,
          중요하지만긴급하지않음: true, // 동시 선택 불가
          긴급하지만중요하지않음: false,
          긴급하지도중요하지도않음: false
        }
      };

      expect(칠차원유효성검사.우선순위검증(여러개선택데이터)).toBe(false);
    });
  });

  describe('감정 검증', () => {
    test('유효한 감정 데이터를 검증한다', () => {
      const 유효한데이터: 감정차원타입 = {
        기분상태: {
          주감정: '기쁨',
          전체강도: 7,
          에너지레벨: 4
        },
        텍스트톤: '긍정적'
      };

      expect(칠차원유효성검사.감정검증(유효한데이터)).toBe(true);
    });

    test('잘못된 감정 강도를 거부한다', () => {
      const 잘못된데이터: 감정차원타입 = {
        기분상태: {
          주감정: '기쁨',
          전체강도: 11 as any, // 1-10 범위 밖
          에너지레벨: 4
        },
        텍스트톤: '긍정적'
      };

      expect(칠차원유효성검사.감정검증(잘못된데이터)).toBe(false);
    });
  });

  describe('맥락 검증', () => {
    test('유효한 맥락 데이터를 검증한다', () => {
      const 유효한데이터: 맥락차원타입 = {
        상황유형: '업무',
        환경정보: {
          집중도: 4
        },
        작성목적: '계획'
      };

      expect(칠차원유효성검사.맥락검증(유효한데이터)).toBe(true);
    });

    test('필수 필드가 없으면 거부한다', () => {
      const 불완전한데이터 = {
        환경정보: {
          집중도: 4
        }
        // 상황유형, 작성목적 누락
      } as 맥락차원타입;

      expect(칠차원유효성검사.맥락검증(불완전한데이터)).toBe(false);
    });
  });
});

describe('7차원 기본값 생성', () => {
  test('전체 기본값을 생성한다', () => {
    const 기본값 = 칠차원기본값생성.전체기본값();

    expect(기본값.우선순위차원).toBeDefined();
    expect(기본값.감정차원).toBeDefined();
    expect(기본값.맥락차원).toBeDefined();

    // 유효성 검사 통과
    expect(칠차원유효성검사.우선순위검증(기본값.우선순위차원!)).toBe(true);
    expect(칠차원유효성검사.감정검증(기본값.감정차원!)).toBe(true);
    expect(칠차원유효성검사.맥락검증(기본값.맥락차원!)).toBe(true);
  });

  test('긴급도에 따른 우선순위 기본값을 생성한다', () => {
    const 즉시기본값 = 칠차원기본값생성.우선순위기본값('즉시');

    expect(즉시기본값.긴급도).toBe('즉시');
    expect(즉시기본값.우선순위레벨).toBe(4);
    expect(즉시기본값.중요도매트릭스.긴급하고중요함).toBe(true);
  });

  test('텍스트 기반 감정 기본값을 생성한다', () => {
    const 긍정텍스트 = '오늘 정말 좋은 하루였어요. 행복합니다!';
    const 감정기본값 = 칠차원기본값생성.감정기본값(긍정텍스트);

    expect(감정기본값.기분상태.주감정).toBe('기쁨');
    expect(감정기본값.텍스트톤).toBe('긍정적');
  });

  test('시간대 기반 맥락 기본값을 생성한다', () => {
    // 오후 2시 (업무시간)
    const 업무시간 = new Date('2025-01-31T14:00:00');
    const 맥락기본값 = 칠차원기본값생성.맥락기본값(업무시간);

    expect(맥락기본값.상황유형).toBe('업무');
    expect(맥락기본값.환경정보.집중도).toBe(4);
  });
});

describe('7차원 데이터 변환', () => {
  test('우선순위 레벨을 텍스트로 변환한다', () => {
    expect(칠차원데이터변환.우선순위레벨텍스트(1)).toBe('매우 낮음');
    expect(칠차원데이터변환.우선순위레벨텍스트(3)).toBe('보통');
    expect(칠차원데이터변환.우선순위레벨텍스트(5)).toBe('매우 높음');
  });

  test('감정을 이모지로 변환한다', () => {
    expect(칠차원데이터변환.감정이모지변환('기쁨')).toBe('😊');
    expect(칠차원데이터변환.감정이모지변환('슬픔')).toBe('😢');
    expect(칠차원데이터변환.감정이모지변환('분노')).toBe('😠');
  });

  test('중요도 매트릭스를 사분면 번호로 변환한다', () => {
    const 매트릭스1 = {
      긴급하고중요함: true,
      중요하지만긴급하지않음: false,
      긴급하지만중요하지않음: false,
      긴급하지도중요하지도않음: false
    };

    expect(칠차원데이터변환.중요도사분면번호(매트릭스1)).toBe(1);

    const 매트릭스4 = {
      긴급하고중요함: false,
      중요하지만긴급하지않음: false,
      긴급하지만중요하지않음: false,
      긴급하지도중요하지도않음: true
    };

    expect(칠차원데이터변환.중요도사분면번호(매트릭스4)).toBe(4);
  });

  test('텍스트 톤을 색상으로 변환한다', () => {
    expect(칠차원데이터변환.톤색상변환('긍정적')).toBe('#27AE60');
    expect(칠차원데이터변환.톤색상변환('부정적')).toBe('#C0392B');
    expect(칠차원데이터변환.톤색상변환('중립적')).toBe('#7F8C8D');
  });
});

describe('감정 분석 헬퍼', () => {
  test('긍정적인 텍스트의 감정을 분석한다', () => {
    const 긍정텍스트 = '오늘 정말 좋은 날이에요! 행복하고 기쁩니다.';
    const 분석결과 = 감정분석헬퍼.텍스트감정분석(긍정텍스트);

    expect(분석결과.주감정).toBe('기쁨');
    expect(분석결과.전체강도).toBeGreaterThan(5);
    expect(분석결과.에너지레벨).toBeGreaterThan(3);
  });

  test('부정적인 텍스트의 감정을 분석한다', () => {
    const 부정텍스트 = '오늘 정말 힘들고 슬픈 하루였어요.';
    const 분석결과 = 감정분석헬퍼.텍스트감정분석(부정텍스트);

    expect(분석결과.주감정).toBe('슬픔');
    expect(분석결과.에너지레벨).toBeLessThan(3);
  });

  test('중립적인 텍스트는 중립 감정으로 분석한다', () => {
    const 중립텍스트 = '오늘 회의가 있었습니다.';
    const 분석결과 = 감정분석헬퍼.텍스트감정분석(중립텍스트);

    expect(분석결과.주감정).toBe('중립');
    expect(분석결과.전체강도).toBe(5);
    expect(분석결과.에너지레벨).toBe(3);
  });

  test('감정 변화를 계산한다', () => {
    const 이전감정 = {
      주감정: '슬픔' as 기본감정타입,
      전체강도: 6 as any,
      에너지레벨: 2 as any
    };

    const 현재감정 = {
      주감정: '기쁨' as 기본감정타입,
      전체강도: 8 as any,
      에너지레벨: 4 as any
    };

    const 변화설명 = 감정분석헬퍼.감정변화계산(이전감정, 현재감정);
    expect(변화설명).toContain('슬픔에서 기쁨으로 변화');
  });
});

describe('맥락 추론 헬퍼', () => {
  test('시간대별 상황을 추론한다', () => {
    // 오전 10시 (평일 업무시간)
    const 업무시간 = new Date('2025-01-31T10:00:00'); // 금요일
    const 상황 = 맥락추론헬퍼.시간대상황추론(업무시간);
    expect(상황).toBe('업무');

    // 일요일 오후 2시
    const 주말시간 = new Date('2025-02-02T14:00:00'); // 일요일
    const 주말상황 = 맥락추론헬퍼.시간대상황추론(주말시간);
    expect(주말상황).toBe('개인');
  });

  test('텍스트에서 작성 목적을 추론한다', () => {
    expect(맥락추론헬퍼.작성목적추론('오늘 회의 내용을 정리해보자')).toBe('정리');
    expect(맥락추론헬퍼.작성목적추론('내일 할 일 계획을 세워야 한다')).toBe('계획');
    expect(맥락추론헬퍼.작성목적추론('새로운 아이디어가 떠올랐다')).toBe('아이디어');
    expect(맥락추론헬퍼.작성목적추론('이 문제를 어떻게 해결할까?')).toBe('문제해결');
    expect(맥락추론헬퍼.작성목적추론('그냥 메모해둔다')).toBe('기록');
  });
});

describe('7차원 분석', () => {
  test('차원별 점수를 계산한다', () => {
    const 테스트데이터 = {
      우선순위차원: {
        우선순위레벨: 4 as any,
        긴급도: '당일' as any,
        중요도매트릭스: {
          긴급하고중요함: true,
          중요하지만긴급하지않음: false,
          긴급하지만중요하지않음: false,
          긴급하지도중요하지도않음: false
        },
        마감일: new Date(),
        예상소요시간: 120
      },
      감정차원: {
        기분상태: {
          주감정: '기쁨' as 기본감정타입,
          전체강도: 8 as any,
          에너지레벨: 4 as any
        },
        텍스트톤: '긍정적' as any
      },
      맥락차원: {
        상황유형: '업무' as any,
        환경정보: {
          집중도: 4 as 1 | 2 | 3 | 4 | 5
        },
        작성목적: '계획' as any,
        위치정보: {
          장소명: '사무실'
        }
      }
    };

    const 점수 = 칠차원분석.차원점수계산(테스트데이터);

    expect(점수.우선순위명확성).toBe(100); // 완전한 우선순위 데이터
    expect(점수.감정인식도).toBe(100); // 완전한 감정 데이터
    expect(점수.맥락완성도).toBe(85); // 위치정보 있어서 추가점수
  });

  test('종합 분석을 수행한다', () => {
    const 테스트데이터 = {
      우선순위차원: {
        우선순위레벨: 3 as any,
        긴급도: '이번주' as any,
        중요도매트릭스: {
          긴급하고중요함: false,
          중요하지만긴급하지않음: true,
          긴급하지만중요하지않음: false,
          긴급하지도중요하지도않음: false
        }
      }
      // 감정차원, 맥락차원 없음
    };

    const 분석결과 = 칠차원분석.종합분석(테스트데이터);

    expect(분석결과.차원별점수.우선순위명확성).toBe(60); // 마감일, 소요시간 없어서 감점
    expect(분석결과.차원별점수.감정인식도).toBe(0); // 감정 데이터 없음
    expect(분석결과.차원별점수.맥락완성도).toBe(0); // 맥락 데이터 없음
    
    expect(분석결과.개선제안).toContain('감정 상태를 기록하면');
    expect(분석결과.개선제안).toContain('상황과 맥락을 추가하면');
  });
});

describe('통합 테스트', () => {
  test('전체 7차원 데이터 처리 플로우가 작동한다', () => {
    // 1. 기본값 생성
    const 기본데이터 = 칠차원기본값생성.전체기본값();

    // 2. 유효성 검사
    expect(칠차원유효성검사.전체검증(기본데이터)).toBe(true);

    // 3. 데이터 변환
    const 우선순위텍스트 = 칠차원데이터변환.우선순위레벨텍스트(
      기본데이터.우선순위차원!.우선순위레벨
    );
    expect(우선순위텍스트).toBeDefined();

    // 4. 감정 분석
    const 테스트텍스트 = '오늘 정말 좋은 아이디어가 떠올랐어요!';
    const 감정분석 = 감정분석헬퍼.텍스트감정분석(테스트텍스트);
    expect(감정분석.주감정).toBe('기쁨');

    // 5. 맥락 추론
    const 작성목적 = 맥락추론헬퍼.작성목적추론(테스트텍스트);
    expect(작성목적).toBe('아이디어');

    // 6. 종합 분석
    const 종합분석 = 칠차원분석.종합분석(기본데이터);
    expect(종합분석.종합점수).toBeGreaterThan(0);
  });
});