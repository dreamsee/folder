import random
import time
import json
import os
import math
from datetime import datetime

try:
    import numpy as np
    NUMPY_AVAILABLE = True
except ImportError:
    NUMPY_AVAILABLE = False
    print("⚠️ numpy가 설치되지 않았습니다. 일부 통계 기능이 제한될 수 있습니다.")
    print("   설치 방법: pip install numpy")

class 최적화투자분석:
    def __init__(self, 데이터_파일='stock_data.json', 시뮬기간=120):
        """
        최적화된 투자 분석 시스템 초기화
        - 데이터_파일: 주식 데이터 파일 경로
        - 시뮬기간: 시뮬레이션 기간 (일)
        """
        self.데이터_파일 = 데이터_파일
        self.시뮬기간 = 시뮬기간
        self.주식데이터 = None
        self.과거데이터 = []  # 120일 이동평균 계산용
        self.사이클수 = 5  # 기본 5사이클
        
        # 데이터 파일 경로 설정
        self.기본경로 = os.path.dirname(os.path.abspath(__file__))
        self.탈락전략_파일 = os.path.join(self.기본경로, '탈락전략.json')
        self.영구제외_파일 = os.path.join(self.기본경로, '영구제외_전략_히스토리.json')
        self.최고전략_파일 = os.path.join(self.기본경로, '최고전략_히스토리.json')
        
        # 시장 상황별 데이터 (임시 - 실제로는 외부에서 받아와야 함)
        self.시장상황 = '횡보장'  # 기본값: 횡보장
        self.기준일 = 20250125  # 기준일 (시장 상황 판단 기준)
        
        print("🚀 최적화 투자 분석 시스템이 초기화되었습니다.")
        print(f"   📊 시뮬레이션 기간: {시뮬기간}일")
        print(f"   📈 현재 시장 상황: {self.시장상황}")
        
        # 데이터 로드
        self._주식데이터_로드()
    
    def _주식데이터_로드(self):
        """주식 데이터를 로드하고 과거 120일 데이터 초기화"""
        try:
            if os.path.exists(self.데이터_파일):
                with open(self.데이터_파일, 'r', encoding='utf-8') as f:
                    self.주식데이터 = json.load(f)
                print(f"   📁 주식 데이터 로드 완료: {len(self.주식데이터)}일치 데이터")
            else:
                print(f"   ⚠️ 주식 데이터 파일을 찾을 수 없습니다: {self.데이터_파일}")
                self.주식데이터 = self._더미_데이터_생성()
        except Exception as e:
            print(f"   ❌ 주식 데이터 로드 실패: {e}")
            self.주식데이터 = self._더미_데이터_생성()
        
        # 과거 120일 데이터 초기화 (이동평균 계산용)
        if self.주식데이터 and len(self.주식데이터) > 120:
            # 최근 120일의 종가 데이터로 초기화
            최근데이터 = list(self.주식데이터.values())[-120:]
            self.과거데이터 = [float(data.get('close', 100)) for data in 최근데이터]
        else:
            # 데이터가 부족하면 더미 데이터로 초기화
            self.과거데이터 = [100.0 + random.uniform(-5, 5) for _ in range(120)]
        
        print(f"   📊 과거 120일 데이터 초기화 완료: 평균 {sum(self.과거데이터)/len(self.과거데이터):.2f}원")
    
    def _더미_데이터_생성(self):
        """실제 데이터가 없을 때 시뮬레이션용 더미 데이터 생성"""
        print("   🎲 시뮬레이션용 더미 데이터 생성 중...")
        더미데이터 = {}
        기준가격 = 100.0
        
        for i in range(self.시뮬기간 * 2):  # 충분한 데이터 생성
            날짜 = f"2024{1+i//30:02d}{1+i%30:02d}"
            
            # 랜덤워크 방식으로 가격 변동 생성
            변동률 = random.normalvariate(0, 0.02)  # 평균0%, 표준편차2%
            기준가격 *= (1 + 변동률)
            기준가격 = max(기준가격, 50)  # 최소 50원
            
            더미데이터[날짜] = {
                'open': round(기준가격 * random.uniform(0.98, 1.02), 2),
                'high': round(기준가격 * random.uniform(1.00, 1.05), 2),
                'low': round(기준가격 * random.uniform(0.95, 1.00), 2),
                'close': round(기준가격, 2),
                'volume': random.randint(1000000, 10000000)
            }
        
        print(f"   ✅ {len(더미데이터)}일간의 더미 데이터 생성 완료")
        return 더미데이터

    def _현재_시장상황_판단(self):
        """
        현재 시장 상황을 분석하여 상승장/하락장/횡보장 구분
        실제로는 외부 API나 복잡한 지표 분석이 필요하지만 
        시뮬레이션에서는 간단한 로직 사용
        """
        if not self.주식데이터:
            return '횡보장'
        
        # 최근 20일 평균가격과 60일 평균가격 비교
        최근데이터 = list(self.주식데이터.values())[-60:]
        if len(최근데이터) < 60:
            return '횡보장'
        
        최근20일평균 = sum(float(d.get('close', 100)) for d in 최근데이터[-20:]) / 20
        최근60일평균 = sum(float(d.get('close', 100)) for d in 최근데이터) / 60
        
        차이율 = (최근20일평균 - 최근60일평균) / 최근60일평균 * 100
        
        if 차이율 > 3:
            return '상승장'
        elif 차이율 < -3:
            return '하락장'
        else:
            return '횡보장'
    
    def _탈락전략_로드(self):
        """탈락한 전략들의 기록을 로드 (옐로우카드, 탈락횟수 포함)"""
        # 압축된 탈락전략 파일 우선 확인
        압축탈락파일 = self.탈락전략_파일.replace('.json', '_압축.json')
        
        if os.path.exists(압축탈락파일):
            try:
                with open(압축탈락파일, 'r', encoding='utf-8') as f:
                    압축데이터 = json.load(f)
                
                # 압축된 데이터를 원래 형태로 변환
                탈락전략목록 = {'영구제외': [], '임시기록': {}}
                
                매도타입맵 = 압축데이터.get('매도타입_맵', {})
                매도타입맵_역방향 = {v: k for k, v in 매도타입맵.items()}
                
                전략들 = 압축데이터.get('strategies', [])
                
                for 전략배열 in 전략들:
                    if len(전략배열) < 6:
                        continue
                    
                    # 전략배열: [구매방식, 매수수량, 손절라인, 매도타입, 매도파라미터, 탈락횟수]
                    구매방식, 매수수량, 손절라인, 매도타입, 매도파라미터, 탈락횟수 = 전략배열
                    
                    # 속성 기반 키 생성
                    전략키 = f"{구매방식}_{매수수량}_{손절라인}_{매도타입}_{매도파라미터}"
                    
                    # 임시기록에 추가
                    탈락전략목록['임시기록'][전략키] = {
                        '탈락횟수': 탈락횟수,
                        '옐로우카드': 0  # 기본값
                    }
                
                return 탈락전략목록
                
            except Exception as e:
                print(f"압축 탈락전략 파일 로드 실패: {e}")
        
        # 기존 파일 로드 (호환성)
        탈락전략목록 = {'영구제외': [], '임시기록': {}}
        
        if os.path.exists(self.탈락전략_파일):
            try:
                with open(self.탈락전략_파일, 'r', encoding='utf-8') as f:
                    기존데이터 = json.load(f)
                
                if isinstance(기존데이터, list):
                    # 기존 방식: 리스트 형태
                    탈락전략목록['영구제외'] = 기존데이터
                elif isinstance(기존데이터, dict):
                    # 새 방식: 딕셔너리 형태 (영구제외/임시기록 분리)
                    탈락전략목록 = 기존데이터
                
                # 임시기록이 없으면 초기화
                if '임시기록' not in 탈락전략목록:
                    탈락전략목록['임시기록'] = {}
                
                return 탈락전략목록
                
            except Exception as e:
                print(f"탈락전략 파일 로드 실패: {e}")
        
        return 탈락전략목록
    
    def _탈락전략_저장(self, 전체탈락기록):
        """탈락한 전략들을 파일에 저장 (최신 구조 유지)"""
        try:
            # 간소화된 데이터로 변환 후 저장
            간소화데이터 = []
            
            for 전략 in 전체탈락기록:
                간소화데이터.append({
                    'strategy_key': self._전략설명_생성(전략),
                    '탈락횟수': 전략.get('탈락횟수', 1)
                })
                
            # 압축 파일이 있으면 별도 저장 생략 (중복 방지)
            압축탈락파일 = self.탈락전략_파일.replace('.json', '_압축.json')
            if os.path.exists(압축탈락파일):
                # 압축 파일을 사용 중이므로 기존 JSON 저장은 생략
                # self._안전한_json_저장(self.탈락전략_파일, 간소화데이터)
                print("   탈락전략 압축파일 사용 중 - 별도 저장 생략")
                
                print(f"   📄 탈락 기록 저장 완료: {len(간소화데이터)}개")
                return
                
            with open(self.탈락전략_파일, 'w', encoding='utf-8') as f:
                # 저장할 데이터를 간소화
                간소화데이터 = []
                for 전략 in 전체탈락기록:
                    간소화데이터.append({
                        '매수기준': 전략.get('매수기준', 'Unknown'),
                        '매수하락률': 전략.get('매수하락률', 0),
                        '구매방식': 전략.get('구매방식', 'Unknown'),
                        '매수수량': 전략['매수수량'],
                        '손절라인': 전략['손절라인'],
                        '매도전략': 전략['매도전략'],
                        '수익라인': 전략['수익라인']
                    })
                json.dump(간소화데이터, f, ensure_ascii=False, indent=2)
            print(f"탈락 전략 {len(전체탈락기록)}개 저장 완료 (신규: {len(새로운탈락)}개)")
        except Exception as e:
            print(f"탈락 전략 저장 실패: {e}")
    
    def _전략을_키로_변환(self, 전략):
        """전략을 고유 키로 변환 (임시탈락기록과 호환되는 속성 기반 키 생성)"""
        # 최적화된 구조: strategy_key 직접 사용
        if 'strategy_key' in 전략:
            return 전략['strategy_key']
        
        # 속성 기반 키 생성 (임시탈락기록 형식과 일치: "구매방식_매수수량_손절라인_매도타입_매도파라미터")
        try:
            # 전략 속성 추출
            전략속성 = self._전략을_속성으로_변환(전략)
            if not 전략속성:
                return f"UNKNOWN_{id(전략)}"
            
            구매방식 = 전략속성.get('구매방식', 1)
            매수수량 = 전략속성.get('매수수량', 0)
            손절라인 = 전략속성.get('손절라인', 0)
            수익라인 = 전략속성.get('수익라인', 0)
            
            # 매도전략 타입 결정
            매도전략 = 전략.get('매도전략', '2')
            if isinstance(매도전략, dict):
                매도타입 = 매도전략.get('전략', '2')
            else:
                매도타입 = str(매도전략)
            
            # 매도 파라미터 결정
            if 매도타입 == '2':  # 일괄매도
                매도파라미터 = str(수익라인)
            elif 매도타입 == '4':  # 고무줄매도
                매도파라미터 = f"{수익라인},2.0"  # 기본 단계 2.0
            else:
                매도파라미터 = str(수익라인)
            
            # 속성 기반 키 생성: "구매방식_매수수량_손절라인_매도타입_매도파라미터"
            키 = f"{구매방식}_{매수수량}_{손절라인}_{매도타입}_{매도파라미터}"
            return 키
            
        except Exception as e:
            # 오류 발생시 기본 키 반환
            return f"UNKNOWN_{id(전략)}"
    
    def _전략을_속성으로_변환(self, 전략):
        """전략을 속성 기반 검색을 위한 속성 딕셔너리로 변환"""
        try:
            # 구매방식 변환 - 다양한 구조 지원
            if '매수수량' in 전략 and isinstance(전략['매수수량'], dict):
                # 딕셔너리 형태: {'방식': '1', '수량': 0.5} (이미 소수점 형태)
                if 전략['매수수량']['방식'] == '1':
                    구매방식 = 1  # 퍼센트 방식
                    매수수량 = 전략['매수수량']['수량']  # 이미 소수점 형태이므로 그대로 사용
                else:
                    구매방식 = 2  # 고정주식수 방식
                    매수수량 = 전략['매수수량']['수량']
            elif '구매방식' in 전략 and '매수수량' in 전략:
                # 분리된 형태: '구매방식': '1', '매수수량': 50 (정수 퍼센트) 또는 0.5 (소수점 형태)
                구매방식 = int(전략['구매방식'])
                if 구매방식 == 1:
                    # 값이 1보다 크면 정수 퍼센트 (50 → 0.5), 작으면 이미 소수점 (0.5 → 0.5)
                    if 전략['매수수량'] > 1:
                        매수수량 = 전략['매수수량'] / 100  # 정수 퍼센트를 소수로
                    else:
                        매수수량 = 전략['매수수량']  # 이미 소수점 형태
                else:
                    매수수량 = 전략['매수수량']
            else:
                return None
            
            # 손절라인
            손절라인 = 전략['손절라인']
            
            # 수익라인 (매도전략에 따라)
            수익라인 = 전략.get('수익라인', 0)  # 직접 수익라인 사용
            
            # 수익라인이 없으면 매도전략에서 추출 시도
            if 수익라인 == 0:
                매도전략 = 전략.get('매도전략', '')
                if isinstance(매도전략, str):
                    if '일괄' in 매도전략:
                        # "일괄4.5%" 형태에서 숫자 추출
                        import re
                        수익률매치 = re.search(r'일괄(\d+\.?\d*)%', 매도전략)
                        if 수익률매치:
                            수익라인 = float(수익률매치.group(1))
                    elif '고무줄' in 매도전략:
                        # 고무줄 전략의 시작 수익률 추출 시도
                        import re
                        수익률매치 = re.search(r'(\d+\.?\d*)%부터', 매도전략)
                        if 수익률매치:
                            수익라인 = float(수익률매치.group(1))
            
            return {
                '구매방식': 구매방식,
                '매수수량': 매수수량,
                '손절라인': 손절라인,
                '수익라인': 수익라인
            }
            
        except Exception as e:
            return None
    
    def _전략속성_일치확인(self, 전략속성1, 전략속성2, 허용오차=0.01):
        """두 전략의 속성이 일치하는지 확인 (부동소수점 오차 허용)"""
        if not 전략속성1 or not 전략속성2:
            return False
            
        # 구매방식은 정확히 일치해야 함
        if 전략속성1.get('구매방식') != 전략속성2.get('구매방식'):
            return False
        
        # 매수수량 비교 (부동소수점 오차 허용)
        if abs(전략속성1.get('매수수량', 0) - 전략속성2.get('매수수량', 0)) > 허용오차:
            return False
        
        # 손절라인 비교 (부동소수점 오차 허용)
        if abs(전략속성1.get('손절라인', 0) - 전략속성2.get('손절라인', 0)) > 허용오차:
            return False
        
        # 수익라인 비교 (부동소수점 오차 허용)
        if abs(전략속성1.get('수익라인', 0) - 전략속성2.get('수익라인', 0)) > 허용오차:
            return False
            
        return True
    
    def _전략조합_생성(self, 탈락전략목록=None):
        """다양한 전략 조합 자동 생성"""
        전략조합 = []
        
        # 탈락 기록 로드 (탈락 횟수 복원용)
        탈락기록 = self._탈락전략_로드()
        임시탈락기록 = 탈락기록['임시기록']
        print(f"  → 임시탈락기록 로드: {len(임시탈락기록)}개")
        
        # 탈락횟수별 통계
        탈락횟수별통계 = {}
        for 기록 in 임시탈락기록.values():
            횟수 = 기록.get('탈락횟수', 0)
            탈락횟수별통계[횟수] = 탈락횟수별통계.get(횟수, 0) + 1
        print(f"  → 탈락횟수별 분포: {dict(sorted(탈락횟수별통계.items()))}")
        
        
        # 매수 전략 옵션 (0.5% 단위 세밀 조정)
        매수전략들 = [
            {'기준': '1', '이름': '시가하락', 
             '하락률': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 18, 20, 25, 30]},
            {'기준': '2', '이름': '전일하락',
             '하락률': [0.5, 0.8, 1.2, 1.5, 2.3, 3.5, 4.2, 5.8, 6.5, 7.3, 8.7, 9.2, 10.5, 12.3, 15.7, 18.5]},
            {'기준': '3', '이름': '20일선하락',
             '하락률': [0.5, 0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0, 22.0]},
            {'기준': '4', '이름': '60일선하락',
             '하락률': [0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0, 22.0, 25.0]},
            {'기준': '5', '이름': '120일선하락',
             '하락률': [1.0, 1.2, 1.8, 2.2, 2.8, 3.2, 3.8, 4.2, 4.8, 5.2, 6.5, 7.5, 8.5, 9.5, 10.5, 12.5, 15.5, 18.5, 20.5, 22.5, 25.5, 28.0]},
            
            # 신규 모멘텀 전략들 (변동성 돌파)
            {'기준': '10', '이름': '모멘텀매수',
             '모멘텀기준': [
                 {'타입': '상승돌파', '기준': 1.5, '확인': 2},  # 1.5% 상승 후 2% 추가 상승시 매수
                 {'타입': '거래량돌파', '배수': 3.0, '가격상승': 1.0},  # 평균 거래량 3배 + 1% 상승
                 {'타입': '변동성확장', '범위': 0.8, '돌파': 1.2},  # 0.8% 범위에서 1.2% 돌파
                 {'타입': '연속상승', '일수': 3, '최소상승': 0.3},  # 3일 연속 0.3% 이상 상승
                 {'타입': '단기급등', '시간': 30, '상승률': 2.0},  # 30분 내 2% 급등
                 {'타입': '지지선돌파', '터치': 3, '돌파': 1.0},  # 지지선 3번 터치 후 1% 돌파
                 '증가율': [10, 15, 20]
             }}
            
            # 신규 상승매수 전략들 (상승장 대응)
            {'기준': '6', '이름': '시가상승', 
             '상승률': [0.1, 0.2, 0.3, 0.5, 0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0]},
            {'기준': '7', '이름': '20일선상승',
             '상승률': [0.2, 0.5, 0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0]},
            {'기준': '8', '이름': '연속상승',
             '연속횟수': [2, 3, 4, 5, 6]},  # N시간 연속 상승
            {'기준': '9', '이름': '모멘텀매수',
             '모멘텀기준': [1.5, 2.0, 2.5, 3.0, 4.0, 5.0]},  # 큰 상승 움직임 추종
        ]
        
        # 매수 수량 옵션
        매수수량들 = [
            {'방식': '1', '이름': '10%', '수량': 0.1},
            {'방식': '1', '이름': '30%', '수량': 0.3},
            {'방식': '1', '이름': '50%', '수량': 0.5},
            {'방식': '2', '이름': '5주', '수량': 5},
            {'방식': '2', '이름': '10주', '수량': 10}
        ]
        
        # 손절 옵션 (0.5% 단위 세밀 조정)
        손절라인들 = [-0.5, -1.0, -1.5, -2.0, -2.5, -3.0, -3.5, -4.0, -4.5, -5.0, -6.0, -7.0, -8.0, -9.0, -10.0, -12.0, -15.0]
        
        # 고무줄 매도 전략 옵션
        매도전략들 = []
        
        # 1. 기본 일괄 매도 전략들
        일괄수익라인들 = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0]
        for 수익라인 in 일괄수익라인들:
            매도전략들.append({'전략': '2', '이름': f'일괄{수익라인}%', '수익라인': 수익라인})
        
        # 2. 고무줄 분할 매도 전략들 (수익률에 따른 차등 매도)
        고무줄전략들 = [
            # 보수적 고무줄 (적게 팔기)
            {'시작': 2.0, '단계': 1.0, '초기비율': 10, '증가율': 5, '이름': '보수고무줄'},  # 2%에서 10%, 3%에서 15%, 4%에서 20%...
            {'시작': 2.5, '단계': 1.5, '초기비율': 15, '증가율': 10, '이름': '중간고무줄'}, # 2.5%에서 15%, 4%에서 25%, 5.5%에서 35%...
            {'시작': 3.0, '단계': 2.0, '초기비율': 20, '증가율': 15, '이름': '적극고무줄'}, # 3%에서 20%, 5%에서 35%, 7%에서 50%...
            
            # 공격적 고무줄 (많이 팔기)
            {'시작': 1.5, '단계': 0.5, '초기비율': 25, '증가율': 15, '이름': '급진고무줄'}, # 1.5%에서 25%, 2%에서 40%, 2.5%에서 55%...
            {'시작': 4.0, '단계': 3.0, '초기비율': 30, '증가율': 20, '이름': '대기고무줄'}, # 4%에서 30%, 7%에서 50%, 10%에서 70%...
        ]
        
        for 전략 in 고무줄전략들:
            매도전략들.append({
                '전략': '4', # 새로운 고무줄 전략 타입
                '이름': 전략['이름'],
                '수익라인': 전략['시작'],  # 시작 수익률
                '고무줄설정': {
                    '시작수익률': 전략['시작'],
                    '단계': 전략['단계'],
                    '초기매도비율': 전략['초기비율'],
                    '비율증가': 전략['증가율']
                }
            })
        
        # 3. 일존버 전략들 (일정 기간 보유 후 매도)
        일존버전략들 = [7, 10, 15, 20, 30, 45, 60]  # 보유 일수
        for 일수 in 일존버전략들:
            매도전략들.append({
                '전략': '5',  # 일존버 전략
                '이름': f'{일수}일존버',
                '수익라인': 0,  # 수익률 제한 없음
                '보유일수': 일수
            })
        
        
        # 시장별 제외 전략 및 완전제외 전략 로드
        현재시장상황 = self.시장상황
        
        # 영구제외 전략들 로드 (기존 방식)
        영구제외키들 = set()
        if 탈락전략목록:
            영구제외전략들 = 탈락전략목록.get('영구제외', [])
            if isinstance(영구제외전략들, dict):
                # 새 구조: 딕셔너리 (키별 관리)
                영구제외전략들 = 탈락전략목록
            elif isinstance(영구제외전략들, list):
                # 기존 구조: 리스트
                영구제외전략들 = 탈락전략목록
            
            for 탈락전략 in 영구제외전략들:
                키 = self._전략을_키로_변환(탈락전략)
                영구제외키들.add(키)
        
        # 1. 5회+ 탈락 전략들을 영구제외_전략_히스토리.json에 추가 (재시장분별을 위해)
        완전제외키들 = set()  # 3시장 모두 탈락한 전략들만
        
        # 2. 시장별 제외 전략 로딩 (압축된 영구제외 파일)
        시장별제외키들 = {}  # 기존 키 기반 시장별 제외
        시장별제외전략들 = {}  # 압축된 속성 기반 시장별 제외: {'상승장': [], '하락장': [], '횡보장': []}
        완전제외전략들 = []  # 속성 기반 완전제외 전략 목록
        완전제외_중복확인 = set()  # 중복 제거용
        
        try:
            압축영구제외파일 = self.영구제외_파일.replace('.json', '_압축.json')
            if os.path.exists(압축영구제외파일):
                # 압축된 파일 로드
                with open(압축영구제외파일, 'r', encoding='utf-8') as f:
                    압축데이터 = json.load(f)
                    
                시장매핑 = {1: '상승장', 2: '하락장', 3: '횡보장'}
                전략들 = 압축데이터.get('strategies', [])
                영구제외_중복제거수 = 0
                
                for 전략배열 in 전략들:
                    if len(전략배열) < 6:
                        continue
                    
                    # 전략배열: [구매방식, 매수수량, 손절라인, 수익라인, 시장배열, 완전제외]
                    전략속성 = {
                        '구매방식': 전략배열[0],
                        '매수수량': 전략배열[1],
                        '손절라인': 전략배열[2],
                        '수익라인': 전략배열[3],
                        '탈락시장들': [시장매핑[시장번호] for 시장번호 in 전략배열[4] if 시장번호 in 시장매핑],
                        '완전제외': 전략배열[5]
                    }
                    
                    if 전략속성['완전제외']:
                        # 중복 확인용 키 생성 (완전제외 전략)
                        전략키 = (전략배열[0], 전략배열[1], 전략배열[2], 전략배열[3])
                        
                        if 전략키 in 완전제외_중복확인:
                            영구제외_중복제거수 += 1
                            continue  # 중복이므로 건너뛰기
                        
                        # 중복이 아니면 추가
                        완전제외_중복확인.add(전략키)
                        완전제외전략들.append(전략속성)
                    else:
                        # 시장별 제외 전략
                        for 시장 in 전략속성['탈락시장들']:
                            if 시장 not in 시장별제외전략들:
                                시장별제외전략들[시장] = []
                            시장별제외전략들[시장].append(전략속성)
                
                # 통계 출력 (필요시만)
                if len(전략들) > 0:
                    pass  # 불필요한 로드 출력 제거
                
            elif os.path.exists(self.영구제외_파일):
                # 기존 파일 로드 (호환성)
                with open(self.영구제외_파일, 'r', encoding='utf-8') as f:
                    영구제외기록들 = json.load(f)
                    
                if isinstance(영구제외기록들, dict):
                    for 전략키, 정보 in 영구제외기록들.items():
                        탈락시장들 = 정보.get('탈락시장', [])
                        완전제외 = 정보.get('완전제외', False)
                        
                        if 완전제외:
                            완전제외키들.add(전략키)
                        else:
                            for 시장 in 탈락시장들:
                                if 시장 not in 시장별제외키들:
                                    시장별제외키들[시장] = set()
                                시장별제외키들[시장].add(전략키)
                        
        except Exception as e:
            print(f"시장별 제외 전략 로드 실패: {e}")
        
        # 현재 시장 상황에 따른 제외 전략 출력
        print(f"제외 전략 현황: ({현재시장상황} 표시)")
        print(f"  - 완전제외: {len(완전제외키들)} (5회+ 탈락 + 3시장 모두탈락) + {len(완전제외전략들)} (압축)")
        if 현재시장상황 in 시장별제외키들:
            print(f"  - {현재시장상황} 제외: {len(시장별제외키들[현재시장상황])} (키)")
        if 현재시장상황 in 시장별제외전략들:
            print(f"  - {현재시장상황} 제외: {len(시장별제외전략들[현재시장상황])} (압축)")
        
        # 모든 조합 생성 (탈락 전략 제외)
        생성수 = 0
        제외수 = 0
        완전제외카운트 = 0
        시장별제외카운트 = 0
        
        for 매수전략 in 매수전략들:
            # 전략 타입에 따라 다른 매개변수 처리
            if '하락률' in 매수전략:  # 하락매수 전략들 (기존)
                매개변수들 = 매수전략['하락률']
                매개변수명 = '매수하락률'
            elif '상승률' in 매수전략:  # 상승매수 전략들 (신규)
                매개변수들 = 매수전략['상승률']
                매개변수명 = '매수상승률'
            elif '연속횟수' in 매수전략:  # 연속상승 전략 (신규)
                매개변수들 = 매수전략['연속횟수']
                매개변수명 = '연속횟수'
            elif '모멘텀기준' in 매수전략:  # 모멘텀 전략 (신규)
                매개변수들 = 매수전략['모멘텀기준']
                매개변수명 = '모멘텀기준'
            else:
                continue  # 알 수 없는 전략 타입은 건너뛰기
                
            for 매개변수값 in 매개변수들:
                for 매수수량 in 매수수량들:
                    for 손절 in 손절라인들:
                        for 매도전략 in 매도전략들:
                            # 임시 전략 객체 생성 (동적 매개변수명 사용)
                            임시전략 = {
                                '매수기준': 매수전략['기준'],
                                매개변수명: 매개변수값,  # 동적으로 설정
                                '구매방식': 매수수량['방식'],
                                '매수수량': 매수수량['수량'],
                                '손절라인': 손절,
                                '매도전략': 매도전략['전략'],
                                '수익라인': 매도전략['수익라인']
                            }
                            
                            # 하락률은 하위 호환성을 위해 유지
                            if 매개변수명 == '매수하락률':
                                임시전략['매수하락률'] = 매개변수값
                            else:
                                # 매수하락률이 없는 경우 전략에 맞는 기본값 설정
                                if '매수하락률' not in 임시전략:
                                    # 상승매수 전략의 경우 적절한 기본값 설정
                                    if 매수전략['기준'] in ['6', '7']:  # 시가상승, 20일선상승
                                        임시전략['매수하락률'] = -매개변수값  # 상승률을 음수 하락률로 변환
                                    else:
                                        임시전략['매수하락률'] = 1.0  # 기타 전략 기본값
                            
                            # 제외 전략 확인 (우선순위: 완전제외 > 현재시장제외)
                            키 = self._전략을_키로_변환(임시전략)
                            
                            # 1. 완전제외 확인 (속성 기반 매칭)
                            전략속성 = self._전략을_속성으로_변환(임시전략)
                            완전제외여부 = False
                            
                            # 기존 키 기반 완전제외 확인 (5회+탈락 + 3시장모두탈락)
                            if 키 in 완전제외키들:
                                완전제외여부 = True
                            
                            # 압축된 완전제외 전략과 속성 매칭
                            if not 완전제외여부 and 전략속성:
                                for 완전제외전략속성 in 완전제외전략들:
                                    if self._전략속성_일치확인(전략속성, 완전제외전략속성):
                                        완전제외여부 = True
                                        break
                            
                            if 완전제외여부:
                                제외수 += 1
                                완전제외카운트 += 1
                                continue
                            
                            # 2. 현재 시장별 제외 확인
                            # - 상승장 제외 → 하락장, 횡보장에서만 투입
                            # - 하락장 제외 → 상승장, 횡보장에서만 투입
                            # - 횡보장 제외 → 상승장, 하락장에서만 투입
                            시장별제외여부 = False
                            
                            # 기존 키 기반 시장별 제외 확인
                            if 현재시장상황 in 시장별제외키들 and 키 in 시장별제외키들[현재시장상황]:
                                시장별제외여부 = True
                            
                            # 압축된 시장별 제외 전략과 속성 매칭
                            if not 시장별제외여부 and 전략속성 and 현재시장상황 in 시장별제외전략들:
                                for 시장별제외전략속성 in 시장별제외전략들[현재시장상황]:
                                    if self._전략속성_일치확인(전략속성, 시장별제외전략속성):
                                        시장별제외여부 = True
                                        break
                            
                            if 시장별제외여부:
                                제외수 += 1
                                시장별제외카운트 += 1
                                continue
                            
                            # 정상 전략 추가
                            # 동적 매개변수 추가
                            if 매개변수명 != '매수하락률':
                                # 하위 호환성 매개변수 추가
                                임시전략[매개변수명] = 매개변수값
                            
                            # 방식2(고정주식수)인 경우 현재 주가에 맞춰 수량 조정
                            실제매수수량 = 매수수량['수량']
                            if 매수수량['방식'] == '2':  # 고정 주식수
                                # 현재 주가 기준으로 매수수량 조정 (예: 현재 주가가 1000원이면 10주 = 10,000원치)
                                if hasattr(self, '현재주가') and self.현재주가 > 0:
                                    실제매수수량 = 매수수량['수량']
                                else:
                                    실제매수수량 = 매수수량['수량']
                            
                            전략데이터 = {
                                '매수기준': 매수전략['기준'],
                                '매수기준명': 매수전략['이름'],
                                매개변수명: 매개변수값,  # 동적으로 매개변수 추가
                                '구매방식': 매수수량['방식'],
                                '구매방식명': 매수수량['이름'],
                                '매수수량': 실제매수수량,  # 방식2인 경우 조정된 값 사용
                                '손절라인': 손절,
                                '매도전략': 매도전략['전략'],
                                '매도전략명': 매도전략['이름'],
                                '수익라인': 매도전략['수익라인'],
                                '자본': 100000,
                                '주식수': 0,
                                '매수가격': 0,
                                '최고가격': 0,
                                '절반매도완료': False,
                                '이동평균': self.과거데이터.copy(),  # 과거 120일 데이터로 초기화
                                '거래내역': [],
                            }
                            
                            # 고무줄 매도 전략인 경우 설정 추가
                            if '고무줄설정' in 매도전략:
                                전략데이터['고무줄설정'] = 매도전략['고무줄설정']
                                
                            # 하위 호환성을 위해 매수하락률도 추가 (기존 코드 동작 보장)
                            if '매수하락률' not in 전략데이터:
                                전략데이터['매수하락률'] = 0  # 기본값
                            
                            # 탈락 횟수 복원 (기존 탈락 기록에서)
                            전략키 = self._전략을_키로_변환(전략데이터)
                            
                            
                            if 전략키 in 임시탈락기록:
                                탈락횟수 = 임시탈락기록[전략키]['탈락횟수']
                                전략데이터['탈락횟수'] = 탈락횟수
                                
                                # 탈락횟수 × 2만큼 옐로우카드 부여 (패널티 적용)
                                기본옐로우카드 = 탈락횟수 * 2
                                
                                기존옐로우 = 임시탈락기록[전략키].get('옐로우카드', 0)
                                if isinstance(기존옐로우, dict):
                                    추가옐로우 = 기존옐로우.get('개수', 0)
                                else:
                                    추가옐로우 = 기존옐로우
                                
                                # 총 옐로우카드 = 기본(탈락×2) + 추가 옐로우카드
                                총옐로우카드 = 기본옐로우카드 + 추가옐로우
                                전략데이터['옐로우카드'] = {'개수': 총옐로우카드, '마지막카드주차': 0}
                                
                            else:
                                전략데이터['탈락횟수'] = 0
                                전략데이터['옐로우카드'] = {'개수': 0, '마지막카드주차': 0}
                                
                            전략조합.append(전략데이터)
                            생성수 += 1
                            
        print(f"제외된 전략: {제외수}개 (완전제외:{완전제외카운트}개, 시장별제외:{시장별제외카운트}개), 실제 투입: {생성수}개")
        return 전략조합

    def _전략설명_생성(self, 전략):
        """전략을 사람이 읽기 쉬운 설명으로 변환"""
        try:
            # 매수 전략 설명
            매수기준 = 전략.get('매수기준', 'Unknown')
            매수기준명 = 전략.get('매수기준명', '')
            
            # 동적 매개변수 처리
            매수조건 = ''
            if '매수하락률' in 전략 and 전략['매수하락률'] != 0:
                매수조건 = f"{전략['매수하락률']}%"
            elif '매수상승률' in 전략:
                매수조건 = f"{전략['매수상승률']}%"
            elif '연속횟수' in 전략:
                매수조건 = f"{전략['연속횟수']}회"
            elif '모멘텀기준' in 전략:
                if isinstance(전략['모멘텀기준'], dict):
                    매수조건 = f"{전략['모멘텀기준']['타입']}"
                else:
                    매수조건 = f"{전략['모멘텀기준']}"
            
            if not 매수기준명:
                매수기준명 = {
                    '1': '시가하락', '2': '전일하락', '3': '20일선하락',
                    '4': '60일선하락', '5': '120일선하락', '6': '시가상승',
                    '7': '20일선상승', '8': '연속상승', '9': '모멘텀매수', '10': '모멘텀매수'
                }.get(매수기준, '기타매수')
            
            매수부분 = f"{매수기준명}"
            if 매수조건:
                매수부분 += f" {매수조건}"
            
            # 매수 수량 설명
            구매방식 = 전략.get('구매방식', '1')
            매수수량 = 전략.get('매수수량', 0)
            
            if isinstance(매수수량, dict):
                실제수량 = 매수수량.get('수량', 0)
                if 매수수량.get('방식') == '1':
                    수량부분 = f"{int(실제수량 * 100)}%"
                else:
                    수량부분 = f"{실제수량}주"
            else:
                if 구매방식 == '1':
                    if 매수수량 < 1:  # 소수점 형태 (0.5 = 50%)
                        수량부분 = f"{int(매수수량 * 100)}%"
                    else:  # 정수 형태 (50 = 50%)
                        수량부분 = f"{int(매수수량)}%"
                else:
                    수량부분 = f"{int(매수수량)}주"
            
            # 손절 설명
            손절라인 = 전략.get('손절라인', 0)
            손절부분 = f"손절{손절라인}%"
            
            # 매도 전략 설명
            매도전략 = 전략.get('매도전략', '1')
            수익라인 = 전략.get('수익라인', 0)
            매도전략명 = 전략.get('매도전략명', '')
            
            if not 매도전략명:
                if 매도전략 == '1':
                    매도부분 = f"기본매도{수익라인}%"
                elif 매도전략 == '2':
                    매도부분 = f"일괄{수익라인}%"
                elif 매도전략 == '4':
                    # 고무줄 전략의 경우
                    if '고무줄설정' in 전략:
                        설정 = 전략['고무줄설정']
                        단계 = 설정.get('단계', 1.0)
                        매도부분 = f"고무줄({수익라인}%부터 {단계}%씩)"
                    else:
                        매도부분 = f"고무줄{수익라인}%"
                elif 매도전략 == '5':
                    보유일수 = 전략.get('보유일수', 15)
                    매도부분 = f"{보유일수}일존버"
                else:
                    매도부분 = f"기타매도{수익라인}%"
            else:
                매도부분 = 매도전략명
            
            return f"{매수부분} + {수량부분} + {손절부분} + {매도부분}"
        
        except Exception as e:
            return f"전략설명오류: {e}"
    
    def _최고전략_로드(self):
        """이전 최고 전략들을 로드"""
        try:
            if os.path.exists(self.최고전략_파일):
                with open(self.최고전략_파일, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except Exception as e:
            print(f"최고전략 로드 실패: {e}")
            return []
    
    def _최고전략_저장(self, 최고전략들):
        """최고 전략들을 파일에 저장"""
        try:
            # 상위 100개만 저장 (파일 크기 관리)
            저장할전략들 = 최고전략들[:100]
            
            # 간소화된 데이터로 변환
            간소화데이터 = []
            for 전략 in 저장할전략들:
                간소화전략 = {
                    '전략설명': self._전략설명_생성(전략),
                    '최종수익률': 전략.get('최종수익률', 0),
                    '총거래횟수': 전략.get('총거래횟수', 0),
                    '승률': 전략.get('승률', 0),
                    '평균수익률': 전략.get('평균수익률', 0),
                    '최대손실률': 전략.get('최대손실률', 0),
                    '샤프비율': 전략.get('샤프비율', 0),
                    '기록일시': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                간소화데이터.append(간소화전략)
            
            with open(self.최고전략_파일, 'w', encoding='utf-8') as f:
                json.dump(간소화데이터, f, ensure_ascii=False, indent=2)
            print(f"최고 전략 {len(간소화데이터)}개 저장 완료")
        except Exception as e:
            print(f"최고전략 저장 실패: {e}")
    
    def _안전한_json_저장(self, 파일경로, 데이터):
        """JSON 파일을 안전하게 저장 (백업 + 원자적 쓰기)"""
        try:
            # 1. 기존 파일이 있으면 백업 생성
            if os.path.exists(파일경로):
                백업경로 = f"{파일경로}.backup"
                import shutil
                shutil.copy2(파일경로, 백업경로)
            
            # 2. 임시 파일에 먼저 쓰기
            임시경로 = f"{파일경로}.tmp"
            with open(임시경로, 'w', encoding='utf-8') as f:
                json.dump(데이터, f, ensure_ascii=False, indent=2)
            
            # 3. 임시 파일을 실제 파일로 이동 (원자적 작업)
            import shutil
            shutil.move(임시경로, 파일경로)
            
            return True
        except Exception as e:
            print(f"JSON 저장 실패: {e}")
            return False
    
    def _성과지표_계산(self, 전략):
        """전략의 성과 지표들을 계산"""
        거래내역 = 전략.get('거래내역', [])
        if not 거래내역:
            return {
                '최종수익률': 0,
                '총거래횟수': 0,
                '승률': 0,
                '평균수익률': 0,
                '최대손실률': 0,
                '샤프비율': 0,
                '최대연속손실': 0,
                '수익거래평균': 0,
                '손실거래평균': 0
            }
        
        # 기본 통계
        총거래횟수 = len(거래내역)
        수익거래수 = sum(1 for 거래 in 거래내역 if 거래.get('수익률', 0) > 0)
        승률 = (수익거래수 / 총거래횟수 * 100) if 총거래횟수 > 0 else 0
        
        수익률들 = [거래.get('수익률', 0) for 거래 in 거래내역]
        평균수익률 = sum(수익률들) / len(수익률들) if 수익률들 else 0
        최대손실률 = min(수익률들) if 수익률들 else 0
        최종수익률 = 전략.get('최종수익률', 0)
        
        # 샤프 비율 계산 (위험조정 수익률)
        if len(수익률들) > 1:
            수익률분산 = sum((x - 평균수익률) ** 2 for x in 수익률들) / (len(수익률들) - 1)
            수익률표준편차 = math.sqrt(수익률분산) if 수익률분산 > 0 else 0.001
            샤프비율 = 평균수익률 / 수익률표준편차 if 수익률표준편차 > 0 else 0
        else:
            샤프비율 = 0
        
        # 연속 손실 계산
        최대연속손실 = 0
        현재연속손실 = 0
        for 거래 in 거래내역:
            if 거래.get('수익률', 0) < 0:
                현재연속손실 += 1
                최대연속손실 = max(최대연속손실, 현재연속손실)
            else:
                현재연속손실 = 0
        
        # 수익/손실 거래별 평균
        수익거래들 = [거래.get('수익률', 0) for 거래 in 거래내역 if 거래.get('수익률', 0) > 0]
        손실거래들 = [거래.get('수익률', 0) for 거래 in 거래내역 if 거래.get('수익률', 0) < 0]
        
        수익거래평균 = sum(수익거래들) / len(수익거래들) if 수익거래들 else 0
        손실거래평균 = sum(손실거래들) / len(손실거래들) if 손실거래들 else 0
        
        return {
            '최종수익률': 최종수익률,
            '총거래횟수': 총거래횟수,
            '승률': 승률,
            '평균수익률': 평균수익률,
            '최대손실률': 최대손실률,
            '샤프비율': 샤프비율,
            '최대연속손실': 최대연속손실,
            '수익거래평균': 수익거래평균,
            '손실거래평균': 손실거래평균
        }

    def _영구제외_확인(self, 전략, 탈락횟수, 옐로우카드수, 현재시장상황):
        """전략의 영구 제외 여부를 확인하고 처리"""
        try:
            # 영구 제외 조건:
            # 1. 탈락 횟수 5회 이상
            # 2. 탈락횟수 + 옐로우카드수 >= 12점 (가중 점수)
            # 3. 연속 3개 시장에서 모두 탈락
            
            총점수 = 탈락횟수 + (옐로우카드수 * 0.5)  # 옐로우카드는 0.5점으로 계산
            전략키 = self._전략을_키로_변환(전략)
            
            # 영구제외 히스토리 로드
            영구제외히스토리 = {}
            if os.path.exists(self.영구제외_파일):
                with open(self.영구제외_파일, 'r', encoding='utf-8') as f:
                    영구제외히스토리 = json.load(f)
            
            # 현재 전략의 영구제외 기록 확인
            if 전략키 in 영구제외히스토리:
                기존기록 = 영구제외히스토리[전략키]
                탈락시장들 = 기존기록.get('탈락시장', [])
                
                # 현재 시장이 이미 기록되어 있지 않으면 추가
                if 현재시장상황 not in 탈락시장들:
                    탈락시장들.append(현재시장상황)
                
                # 업데이트된 정보
                영구제외히스토리[전략키] = {
                    '전략설명': self._전략설명_생성(전략),
                    '탈락횟수': 탈락횟수,
                    '옐로우카드수': 옐로우카드수,
                    '총점수': 총점수,
                    '탈락시장': 탈락시장들,
                    '마지막탈락일': datetime.now().strftime('%Y-%m-%d'),
                    '완전제외': len(탈락시장들) >= 3 or 탈락횟수 >= 5 or 총점수 >= 12
                }
                
                탈락시장수 = len(탈락시장들)
                
                if 영구제외히스토리[전략키]['완전제외']:
                    print(f"   🚫 완전제외: {전략['매수기준명']}-{전략['매수하락률']}% (모든 시장에서 탈락)")
                else:
                    print(f"   ⚠️ 영구제외 누적: {전략['매수기준명']}-{전략['매수하락률']}% ({탈락시장수}/3 시장)")
                    
            else:
                # 새로운 영구제외 후보 등록
                영구제외히스토리[전략키] = {
                    '전략설명': self._전략설명_생성(전략),
                    '탈락횟수': 탈락횟수,
                    '옐로우카드수': 옐로우카드수,
                    '총점수': 총점수,
                    '탈락시장': [현재시장상황],
                    '첫탈락일': datetime.now().strftime('%Y-%m-%d'),
                    '마지막탈락일': datetime.now().strftime('%Y-%m-%d'),
                    '완전제외': 탈락횟수 >= 5 or 총점수 >= 12
                }
                
                if 영구제외히스토리[전략키]['완전제외']:
                    print(f"   영구제외 첫 등록: {전략['매수기준명']}-{전략['매수하락률']}% ({현재시장상황}에서)")
            
            # 영구제외 히스토리 저장
            if 영구제외히스토리:
                self._안전한_json_저장(self.영구제외_파일, 영구제외히스토리)
                print(f"   영구제외 저장: {전략['매수기준명']}-{전략['매수하락률']}% (탈락{탈락횟수}회+옐로우{옐로우카드수}개={총점수}점)")
                
        except Exception as e:
            print(f"   영구제외 확인 실패: {e}")
    
    def _극심손실_영구제외(self, 전략, 손실률):
        """극심한 손실(예: -30% 이하)을 기록한 전략을 즉시 영구 제외"""
        try:
            if 손실률 <= -30.0:  # -30% 이하 극심 손실
                전략키 = self._전략을_키로_변환(전략)
                
                # 영구제외 히스토리 로드
                영구제외히스토리 = {}
                if os.path.exists(self.영구제외_파일):
                    with open(self.영구제외_파일, 'r', encoding='utf-8') as f:
                        영구제외히스토리 = json.load(f)
                
                # 극심손실로 즉시 완전제외 처리
                영구제외히스토리[전략키] = {
                    '전략설명': self._전략설명_생성(전략),
                    '극심손실률': 손실률,
                    '극심손실일': datetime.now().strftime('%Y-%m-%d'),
                    '탈락시장': ['상승장', '하락장', '횡보장'],  # 모든 시장에서 제외
                    '완전제외': True,
                    '제외사유': f'극심손실 {손실률}%'
                }
                
                # 저장
                self._안전한_json_저장(self.영구제외_파일, 영구제외히스토리)
                    print(f"   🚫 극심손실 완전제외: {전략['매수기준명']}-{전략.get('매수하락률', 0)}% (모든 시장에서 탈락)")
                
                return True  # 영구제외 처리됨
                
        except Exception as e:
            print(f"   극심손실 영구제외 처리 실패: {e}")
        
        return False  # 영구제외 처리 안됨
    
    def 시뮬레이션_실행(self, 최대전략수=50, 표시상위=10):
        """
        최적화된 시뮬레이션 실행 및 결과 분석
        - 최대전략수: 테스트할 최대 전략 개수 (성능 최적화용)
        - 표시상위: 결과에 표시할 상위 전략 개수
        """
        print("=" * 60)
        print("🎯 최적화 투자 전략 시뮬레이션 시작")
        print("=" * 60)
        
        시작시간 = time.time()
        
        # 현재 시장 상황 판단
        self.시장상황 = self._현재_시장상황_판단()
        print(f"📊 현재 시장 상황: {self.시장상황}")
        
        # 탈락 전략 로드
        탈락전략목록 = self._탈락전략_로드()
        영구제외수 = len(탈락전략목록.get('영구제외', []))
        임시탈락수 = len(탈락전략목록.get('임시기록', {}))
        
        if 영구제외수 > 0:
            print(f"  5회+ 탈락: {영구제외수}개")
        if 임시탈락수 > 0:
            print(f"  임시 탈락: {임시탈락수}개 (옐로우카드 적용)")
        
        # 전략 조합 생성
        print("\n🔄 전략 조합 생성 중...")
        전략조합 = self._전략조합_생성(탈락전략목록)
        
        if not 전략조합:
            print("❌ 생성된 전략이 없습니다.")
            return None
        
        print(f"✅ 총 {len(전략조합):,}개 전략 생성 완료")
        
        # 전략 수 제한 (성능 최적화)
        if len(전략조합) > 최대전략수:
            # 탈락횟수가 적은 전략들 우선 선택 (더 유망한 전략)
            전략조합.sort(key=lambda x: (x.get('탈락횟수', 0), x.get('옐로우카드', {}).get('개수', 0)))
            전략조합 = 전략조합[:최대전략수]
            print(f"⚡ 성능 최적화를 위해 상위 {최대전략수:,}개 전략 선별")
        
        # 시뮬레이션 실행
        print(f"\n🚀 {len(전략조합):,}개 전략 시뮬레이션 실행 중...")
        전략별결과 = []
        실행된수 = 0
        
        for i, 전략 in enumerate(전략조합):
            if i % 100 == 0:
                진행률 = (i / len(전략조합)) * 100
                print(f"   진행률: {진행률:.1f}% ({i:,}/{len(전략조합):,})")
            
            try:
                # 동적 매개변수 처리
                매수기준 = 전략['매수기준']
                구매방식 = 전략['구매방식']
                매수수량 = 전략['매수수량']
                손절라인 = 전략['손절라인']
                매도전략타입 = 전략['매도전략']
                수익라인 = 전략['수익라인']
                
                # 매수하락률 처리 (하위 호환성)
                매수하락률 = 전략.get('매수하락률', 0)
                
                # 다른 매수 조건들도 처리
                if '매수상승률' in 전략:
                    매수하락률 = -전략['매수상승률']  # 상승률을 음수 하락률로 변환
                elif '연속횟수' in 전략:
                    매수하락률 = 전략['연속횟수']  # 연속횟수를 하락률 위치에 사용
                elif '모멘텀기준' in 전략:
                    if isinstance(전략['모멘텀기준'], dict):
                        매수하락률 = 전략['모멘텀기준'].get('기준', 2.0)
                    else:
                        매수하락률 = 전략['모멘텀기준']
                
                # 시뮬레이션 실행
                결과 = self._실행_시뮬레이션(
                    매수기준=매수기준,
                    매수하락률=매수하락률,
                    구매방식=구매방식,
                    매수수량=매수수량,
                    손절라인=손절라인,
                    전략=매도전략타입,
                    수익라인=수익라인
                )
                
                if 결과:
                    # 전략 정보 추가
                    결과['전략정보'] = 전략
                    결과['전략설명'] = self._전략설명_생성(전략)
                    
                    # 성과 지표 계산
                    성과지표 = self._성과지표_계산(결과)
                    결과.update(성과지표)
                    
                    전략별결과.append(결과)
                    실행된수 += 1
                    
                    # 탈락 체크 (옐로우카드 포함)
                    탈락횟수 = 전략.get('탈락횟수', 0)
                    옐로우카드 = 전략.get('옐로우카드', {})
                    옐로우카드수 = 옐로우카드.get('개수', 0) if isinstance(옐로우카드, dict) else 옐로우카드
                    
                    # 성과가 나쁜 경우 탈락 처리
                    최종수익률 = 결과.get('최종수익률', 0)
                    승률 = 결과.get('승률', 0)
                    
                    # 탈락 조건 (더 엄격하게 적용)
                    탈락여부 = False
                    탈락사유 = ""
                    
                    if 최종수익률 < -15.0:  # -15% 이하 손실
                        탈락여부 = True
                        탈락사유 = f"큰손실({최종수익률:.1f}%)"
                    elif 승률 < 30.0 and 최종수익률 < 0:  # 승률 30% 미만이면서 손실
                        탈락여부 = True
                        탈락사유 = f"저승률({승률:.1f}%)"
                    elif 결과.get('최대연속손실', 0) >= 10:  # 10연속 손실
                        탈락여부 = True
                        탈락사유 = f"연속손실({결과.get('최대연속손실')}회)"
                    elif 결과.get('총거래횟수', 0) < 5:  # 거래 기회 부족
                        탈락여부 = True
                        탈락사유 = "거래부족"
                    
                    if 탈락여부:
                        결과['탈락여부'] = True
                        결과['탈락사유'] = 탈락사유
                        전략['탈락횟수'] = 탈락횟수 + 1
                        
                        # 극심한 손실의 경우 즉시 영구 제외 검토
                        극심손실처리됨 = self._극심손실_영구제외(전략, 최종수익률)
                        
                        # 영구제외 확인 (극심손실로 처리되지 않은 경우만)
                        if not 극심손실처리됨:
                            self._영구제외_확인(전략, 탈락횟수 + 1, �el로우카드수, self.시장상황)
                        
                        print(f"   💥 탈락: {결과['전략설명']} - {탈락사유}")
                    else:
                        결과['탈락여부'] = False
            
            except Exception as e:
                print(f"   ❌ 전략 {i} 실행 실패: {e}")
                continue
        
        종료시간 = time.time()
        실행시간 = 종료시간 - 시작시간
        
        print(f"\n✅ 시뮬레이션 완료!")
        print(f"   ⏱️ 실행 시간: {실행시간:.1f}초")
        print(f"   📊 실행된 전략: {실행된수:,}개")
        
        if not 전략별결과:
            print("❌ 성공한 전략이 없습니다.")
            return None
        
        # 결과 정렬 (수익률 기준 내림차순)
        전략별결과.sort(key=lambda x: x.get('최종수익률', 0), reverse=True)
        
        # 결과 요약
        print(f"\n📈 결과 요약:")
        성공전략수 = len([r for r in 전략별결과 if r.get('최종수익률', 0) > 0])
        탈락전략수 = len([r for r in 전략별결과 if r.get('탈락여부', False)])
        
        print(f"   🎯 수익 전략: {성공전략수:,}개 ({성공전략수/len(전략별결과)*100:.1f}%)")
        print(f"   💥 탈락 전략: {탈락전략수:,}개")
        
        if 성공전략수 > 0:
            평균수익률 = sum(r.get('최종수익률', 0) for r in 전략별결과 if r.get('최종수익률', 0) > 0) / 성공전략수
            print(f"   💰 평균 수익률: {평균수익률:.2f}%")
        
        # 상위 전략 출력
        print(f"\n🏆 상위 {min(표시상위, len(전략별결과))}개 전략:")
        for i, 결과 in enumerate(전략별결과[:표시상위]):
            수익률 = 결과.get('최종수익률', 0)
            승률 = 결과.get('승률', 0)
            거래수 = 결과.get('총거래횟수', 0)
            샤프 = 결과.get('샤프비율', 0)
            
            탈락횟수 = 결과.get('전략정보', {}).get('탈락횟수', 0)
            옐로우카드 = 결과.get('전략정보', {}).get('옐로우카드', {})
            옐로우카드수 = 옐로우카드.get('개수', 0) if isinstance(옐로우카드, dict) else 옐로우카드
            
            상태표시 = ""
            if 탈락횟수 > 0:
                상태표시 += f" 탈락{탈락횟수}회"
            if 옐로우카드수 > 0:
                상태표시 += f" 옐로우{옐로우카드수}개"
            
            print(f"   {i+1:2d}. {결과.get('전략설명', 'Unknown')}")
            print(f"       💰 {수익률:+7.2f}% | 승률 {승률:5.1f}% | 거래 {거래수:3d}회 | 샤프 {샤프:5.2f}{상태표시}")
        
        # 탈락 전략 저장
        탈락전략목록_업데이트 = []
        for 결과 in 전략별결과:
            if 결과.get('탈락여부', False):
                탈락전략목록_업데이트.append(결과['전략정보'])
        
        if 탈락전략목록_업데이트:
            self._탈락전략_저장(탈락전략목록_업데이트)
            print(f"   📄 탈락 전략 {len(탈락전략목록_업데이트)}개 기록 저장")
        
        # 최고 전략 저장
        상위전략들 = 전략별결과[:50]  # 상위 50개
        if 상위전략들:
            self._최고전략_저장(상위전략들)
            
        print("   (누적 5회 탈락시 영구 제외, 극심손실은 즉시 영구 제외)")
        return 전략별결과
    
    def _5사이클_누적_시뮬레이션(self):
        """5사이클에 걸친 누적 시뮬레이션 실행 및 분석"""
        print("🔄" * 20)
        print("🎯 5사이클 누적 투자 전략 분석 시작")
        print("🔄" * 20)
        
        전체시작시간 = time.time()
        사이클별결과 = []
        누적통계 = {
            '총전략수': 0,
            '총수익전략수': 0,
            '총탈락전략수': 0,
            '사이클별수익률': [],
            '영구제외수': 0
        }
        
        for 사이클 in range(1, self.사이클수 + 1):
            print(f"\n{'='*50}")
            print(f"📊 사이클 {사이클}/{self.사이클수} 실행 중...")
            print(f"{'='*50}")
            
            # 각 사이클마다 시장 상황을 다시 판단할 수 있음 (실제로는 시간이 지남에 따라 변함)
            # 시뮬레이션에서는 랜덤하게 변경
            시장상황들 = ['상승장', '하락장', '횡보장']
            if 사이클 > 1:  # 첫 사이클은 초기값 사용
                self.시장상황 = random.choice(시장상황들)
            
            사이클결과 = self.시뮬레이션_실행(최대전략수=100, 표시상위=5)
            
            if 사이클결과:
                사이클별결과.append({
                    '사이클': 사이클,
                    '시장상황': self.시장상황,
                    '결과': 사이클결과,
                    '상위10평균수익률': sum(r.get('최종수익률', 0) for r in 사이클결과[:10]) / min(10, len(사이클결과))
                })
                
                # 누적 통계 업데이트
                누적통계['총전략수'] += len(사이클결과)
                누적통계['총수익전략수'] += len([r for r in 사이클결과 if r.get('최종수익률', 0) > 0])
                누적통계['총탈락전략수'] += len([r for r in 사이클결과 if r.get('탈락여부', False)])
                
                상위10평균 = sum(r.get('최종수익률', 0) for r in 사이클결과[:10]) / min(10, len(사이클결과))
                누적통계['사이클별수익률'].append(상위10평균)
                
                print(f"   🎯 사이클 {사이클} 완료 - 상위10 평균수익률: {상위10평균:.2f}%")
            else:
                print(f"   ❌ 사이클 {사이클} 실패")
            
            # 사이클 간 휴식 (실제 환경에서는 필요없음)
            if 사이클 < self.사이클수:
                print(f"   ⏸️ 다음 사이클 준비 중... ({사이클}/{self.사이클수})")
                time.sleep(1)  # 1초 대기
        
        전체종료시간 = time.time()
        전체실행시간 = 전체종료시간 - 전체시작시간
        
        # 5사이클 종합 분석
        print(f"\n{'🏁' * 20}")
        print(f"🎯 5사이클 누적 분석 완료!")
        print(f"{'🏁' * 20}")
        print(f"   ⏱️ 전체 실행시간: {전체실행시간:.1f}초")
        print(f"   📊 총 분석 전략수: {누적통계['총전략수']:,}개")
        print(f"   💰 총 수익 전략수: {누적통계['총수익전략수']:,}개")
        print(f"   💥 총 탈락 전략수: {누적통계['총탈락전략수']:,}개")
        
        # 사이클별 성과 비교
        if 누적통계['사이클별수익률']:
            평균수익률 = sum(누적통계['사이클별수익률']) / len(누적통계['사이클별수익률'])
            최고사이클 = 누적통계['사이클별수익률'].index(max(누적통계['사이클별수익률'])) + 1
            print(f"   📈 평균 사이클 수익률: {평균수익률:.2f}%")
            print(f"   🏆 최고 성과 사이클: {최고사이클}사이클 ({max(누적통계['사이클별수익률']):.2f}%)")
        
        # 사이클별 상세 결과
        print(f"\n📋 사이클별 상세 결과:")
        for i, 사이클데이터 in enumerate(사이클별결과):
            사이클번호 = 사이클데이터['사이클']
            시장상황 = 사이클데이터['시장상황']
            평균수익률 = 사이클데이터['상위10평균수익률']
            전략수 = len(사이클데이터['결과'])
            
            print(f"   사이클 {사이클번호}: {시장상황:4s} | 전략 {전략수:3d}개 | 상위10 평균 {평균수익률:+6.2f}%")
        
        # 최종 권장 전략 (전체 사이클에서 지속적으로 좋은 성과를 보인 전략들)
        print(f"\n🎯 종합 최고 성과 전략 TOP 5:")
        
        # 모든 사이클의 결과를 합쳐서 전략별로 평균 성과 계산
        전략별누적성과 = {}
        for 사이클데이터 in 사이클별결과:
            for 결과 in 사이클데이터['결과'][:20]:  # 각 사이클 상위 20개만
                전략설명 = 결과.get('전략설명', 'Unknown')
                수익률 = 결과.get('최종수익률', 0)
                
                if 전략설명 not in 전략별누적성과:
                    전략별누적성과[전략설명] = {'수익률합계': 0, '등장횟수': 0, '평균수익률': 0}
                
                전략별누적성과[전략설명]['수익률합계'] += 수익률
                전략별누적성과[전략설명]['등장횟수'] += 1
        
        # 평균 수익률 계산
        for 전략설명 in 전략별누적성과:
            데이터 = 전략별누적성과[전략설명]
            데이터['평균수익률'] = 데이터['수익률합계'] / 데이터['등장횟수']
        
        # 등장횟수가 2회 이상이고 평균 수익률이 높은 전략들만 선별
        안정적전략들 = {k: v for k, v in 전략별누적성과.items() if v['등장횟수'] >= 2}
        안정적전략순위 = sorted(안정적전략들.items(), key=lambda x: x[1]['평균수익률'], reverse=True)
        
        for i, (전략설명, 데이터) in enumerate(안정적전략순위[:5]):
            평균수익률 = 데이터['평균수익률']
            등장횟수 = 데이터['등장횟수']
            print(f"   {i+1}. {전략설명}")
            print(f"      💰 평균수익률: {평균수익률:+7.2f}% | 등장: {등장횟수}회/{self.사이클수}사이클")
        
        # 탈락 전략 통계 (영구 제외 포함)
        탈락기록 = self._탈락전략_로드()
        영구제외수 = len(탈락기록.get('영구제외', []))
        임시탈락수 = len(탈락기록.get('임시기록', {}))
        
        print(f"\n📄 탈락 전략 현황:")
        print(f"   🚫 영구 제외 전략: {영구제외수}개")
        print(f"   ⚠️ 임시 탈락 전략: {임시탈락수}개")
        print(f"   💥 이번 분석 탈락: {누적통계['총탈락전략수']}개")
        
        # 성과 지표들의 통계적 분석
        if NUMPY_AVAILABLE and 사이클별결과:
            print(f"\n📊 통계적 분석 (NumPy):")
            
            모든수익률 = []
            for 사이클데이터 in 사이클별결과:
                사이클수익률들 = [r.get('최종수익률', 0) for r in 사이클데이터['결과']]
                모든수익률.extend(사이클수익률들)
            
            if 모든수익률:
                수익률배열 = np.array(모든수익률)
                print(f"   📈 전체 평균 수익률: {np.mean(수익률배열):.2f}%")
                print(f"   📊 수익률 표준편차: {np.std(수익률배열):.2f}%")
                print(f"   🔺 수익률 중앙값: {np.median(수익률배열):.2f}%")
                print(f"   📏 수익률 범위: {np.min(수익률배열):.2f}% ~ {np.max(수익률배열):.2f}%")
        
        print(f"\n💾 탈락 전략 데이터가 JSON으로 저장되어 다음 실행시 자동 제외됩니다.")
        print(f"   전략 조합: {len(전략조합):,}개 (탈락 제외: {len(탈락전략목록):,}개)")
        
        return {
            '사이클수': self.사이클수,
            '총실행시간': 전체실행시간,
            '사이클별결과': 사이클별결과,
            '누적통계': 누적통계,
            '권장전략': 안정적전략순위[:10] if 안정적전략들 else [],
            '탈락현황': {
                '영구제외': 영구제외수,
                '임시탈락': 임시탈락수,
                '신규탈락': 누적통계['총탈락전략수']
            }
        }
    
    def _실행_시뮬레이션(self, 매수기준, 매수하락률, 구매방식, 매수수량, 손절라인, 전략, 수익라인):
        """
        개별 전략에 대한 시뮬레이션 실행
        실제 주식 데이터를 바탕으로 매수/매도 시점을 결정하고 수익률을 계산
        """
        if not self.주식데이터:
            return None
        
        자본 = 100000  # 초기 자본 10만원
        주식수 = 0
        매수가격 = 0
        최고가격 = 0
        거래내역 = []
        이동평균 = self.과거데이터.copy()  # 과거 120일 데이터로 초기화
        절반매도완료 = False
        
        # 고무줄 매도 설정 (전략 '4'인 경우)
        고무줄설정 = None
        if 전략 == '4':
            고무줄설정 = {
                '시작수익률': 수익라인,
                '단계': 2.0,  # 기본 단계
                '초기매도비율': 20,  # 초기 20%
                '비율증가': 15,  # 매 단계마다 15%씩 증가
                '매도완료비율': 0  # 누적 매도 비율
            }
        
        # 일존버 설정 (전략 '5'인 경우)
        일존버설정 = None
        if 전략 == '5':
            일존버설정 = {
                '매수일': None,
                '보유일수': 15,  # 기본 15일 보유
                '수익률제한': None  # 수익률 제한 없음
            }
        
        일별데이터 = list(self.주식데이터.items())
        
        for i, (날짜, 데이터) in enumerate(일별데이터):
            if i < 1:  # 첫날은 건너뛰기 (전일 데이터 필요)
                continue
            
            try:
                현재가 = float(데이터['close'])
                시가 = float(데이터['open'])
                고가 = float(데이터['high'])
                저가 = float(데이터['low'])
                
                전일데이터 = 일별데이터[i-1][1]
                전일종가 = float(전일데이터['close'])
                
                # 이동평균 업데이트 (120일)
                이동평균.append(현재가)
                if len(이동평균) > 120:
                    이동평균.pop(0)
                
                # 20일, 60일, 120일 이동평균 계산
                이동평균20일 = sum(이동평균[-20:]) / min(20, len(이동평균))
                이동평균60일 = sum(이동평균[-60:]) / min(60, len(이동평균))
                이동평균120일 = sum(이동평균) / len(이동평균)
                
                # 매수 조건 확인
                매수신호 = False
                
                if 주식수 == 0:  # 매수 상태가 아닐 때만
                    if 매수기준 == '1':  # 시가하락
                        if 시가 < 전일종가 * (1 - 매수하락률/100):
                            매수신호 = True
                    elif 매수기준 == '2':  # 전일하락
                        if 현재가 < 전일종가 * (1 - 매수하락률/100):
                            매수신호 = True
                    elif 매수기준 == '3':  # 20일선 하락
                        if 현재가 < 이동평균20일 * (1 - 매수하락률/100):
                            매수신호 = True
                    elif 매수기준 == '4':  # 60일선 하락
                        if 현재가 < 이동평균60일 * (1 - 매수하락률/100):
                            매수신호 = True
                    elif 매수기준 == '5':  # 120일선 하락
                        if 현재가 < 이동평균120일 * (1 - 매수하락률/100):
                            매수신호 = True
                    
                    # 신규 상승매수 전략들
                    elif 매수기준 == '6':  # 시가상승
                        if 시가 > 전일종가 * (1 + abs(매수하락률)/100):
                            매수신호 = True
                    elif 매수기준 == '7':  # 20일선상승
                        if 현재가 > 이동평균20일 * (1 + abs(매수하락률)/100):
                            매수신호 = True
                    elif 매수기준 == '8':  # 연속상승 (간단 구현)
                        연속일수 = int(abs(매수하락률))
                        if i >= 연속일수:
                            연속상승여부 = True
                            for j in range(연속일수):
                                if 일별데이터[i-j][1]['close'] <= 일별데이터[i-j-1][1]['close']:
                                    연속상승여부 = False
                                    break
                            if 연속상승여부:
                                매수신호 = True
                    elif 매수기준 == '9' or 매수기준 == '10':  # 모멘텀매수
                        모멘텀기준 = abs(매수하락률)
                        일일변동률 = (현재가 - 전일종가) / 전일종가 * 100
                        if 일일변동률 >= 모멘텀기준:
                            매수신호 = True
                
                # 매수 실행
                if 매수신호:
                    if 구매방식 == '1':  # 퍼센트 방식
                        매수금액 = 자본 * 매수수량
                    else:  # 고정주식수 방식
                        매수금액 = 현재가 * 매수수량
                    
                    if 매수금액 <= 자본:
                        주식수 = 매수금액 / 현재가
                        매수가격 = 현재가
                        자본 -= 매수금액
                        최고가격 = 매수가격
                        절반매도완료 = False
                        
                        # 일존버 설정 초기화
                        if 일존버설정:
                            일존버설정['매수일'] = i
                        
                        거래내역.append({
                            '날짜': 날짜,
                            '타입': '매수',
                            '가격': 매수가격,
                            '수량': 주식수,
                            '금액': 매수금액
                        })
                
                # 보유 중일 때 가격 추적 및 매도 조건 확인
                elif 주식수 > 0:
                    # 최고가 업데이트
                    if 고가 > 최고가격:
                        최고가격 = 고가
                    
                    현재수익률 = (현재가 - 매수가격) / 매수가격 * 100
                    최고가대비하락률 = (현재가 - 최고가격) / 최고가격 * 100
                    
                    매도신호 = False
                    매도사유 = ""
                    매도수량 = 주식수  # 기본은 전량 매도
                    
                    # 손절 조건 확인 (우선순위 1)
                    if 현재수익률 <= 손절라인:
                        매도신호 = True
                        매도사유 = f"손절({현재수익률:.1f}%)"
                    
                    # 전략별 매도 조건 확인
                    elif 전략 == '1':  # 기본 매도 (단순)
                        if 현재수익률 >= 수익라인:
                            매도신호 = True
                            매도사유 = f"수익실현({현재수익률:.1f}%)"
                    
                    elif 전략 == '2':  # 일괄 매도
                        if 현재수익률 >= 수익라인:
                            매도신호 = True
                            매도사유 = f"일괄매도({현재수익률:.1f}%)"
                    
                    elif 전략 == '3':  # 분할 매도 (간단 구현: 50% 도달시 절반 매도)
                        반매도수익률 = 수익라인 * 0.5
                        전매도수익률 = 수익라인
                        
                        if not 절반매도완료 and 현재수익률 >= 반매도수익률:
                            매도신호 = True
                            매도수량 = 주식수 * 0.5
                            매도사유 = f"분할매도1차({현재수익률:.1f}%)"
                            절반매도완료 = True
                        elif 절반매도완료 and 현재수익률 >= 전매도수익률:
                            매도신호 = True
                            매도사유 = f"분할매도2차({현재수익률:.1f}%)"
                    
                    elif 전략 == '4' and 고무줄설정:  # 고무줄 매도
                        시작수익률 = 고무줄설정['시작수익률']
                        단계 = 고무줄설정['단계']
                        초기비율 = 고무줄설정['초기매도비율']
                        비율증가 = 고무줄설정['비율증가']
                        매도완료비율 = 고무줄설정.get('매도완료비율', 0)
                        
                        if 현재수익률 >= 시작수익률 and 매도완료비율 < 100:
                            # 현재 수익률에 따른 매도 단계 계산
                            현재단계 = int((현재수익률 - 시작수익률) / 단계) + 1
                            목표매도비율 = 초기비율 + (현재단계 - 1) * 비율증가
                            목표매도비율 = min(목표매도비율, 100)  # 최대 100%
                            
                            if 목표매도비율 > 매도완료비율:
                                추가매도비율 = 목표매도비율 - 매도완료비율
                                매도수량 = 주식수 * (추가매도비율 / 100)
                                매도신호 = True
                                매도사유 = f"고무줄{현재단계}단계({현재수익률:.1f}%)"
                                고무줄설정['매도완료비율'] = 목표매도비율
                    
                    elif 전략 == '5' and 일존버설정:  # 일존버
                        if 일존버설정['매수일'] is not None:
                            보유일수 = i - 일존버설정['매수일']
                            목표보유일수 = 일존버설정.get('보유일수', 15)
                            
                            if 보유일수 >= 목표보유일수:
                                매도신호 = True
                                매도사유 = f"{보유일수}일보유완료({현재수익률:.1f}%)"
                    
                    # 매도 실행
                    if 매도신호:
                        매도금액 = 매도수량 * 현재가
                        자본 += 매도금액
                        주식수 -= 매도수량
                        
                        실제수익률 = (현재가 - 매수가격) / 매수가격 * 100
                        
                        거래내역.append({
                            '날짜': 날짜,
                            '타입': '매도',
                            '가격': 현재가,
                            '수량': 매도수량,
                            '금액': 매도금액,
                            '수익률': 실제수익률,
                            '매도사유': 매도사유
                        })
                        
                        # 전량 매도된 경우 초기화
                        if 주식수 <= 0.001:  # 소수점 오차 고려
                            주식수 = 0
                            매수가격 = 0
                            최고가격 = 0
                            절반매도완료 = False
                            if 일존버설정:
                                일존버설정['매수일'] = None
                            if 고무줄설정:
                                고무줄설정['매도완료비율'] = 0
            
            except Exception as e:
                continue
        
        # 미매도 주식이 있는 경우 마지막 가격으로 정산
        if 주식수 > 0 and 일별데이터:
            마지막가격 = float(일별데이터[-1][1]['close'])
            정산금액 = 주식수 * 마지막가격
            자본 += 정산금액
            
            실제수익률 = (마지막가격 - 매수가격) / 매수가격 * 100
            거래내역.append({
                '날짜': 일별데이터[-1][0],
                '타입': '정산',
                '가격': 마지막가격,
                '수량': 주식수,
                '금액': 정산금액,
                '수익률': 실제수익률,
                '매도사유': '시뮬레이션종료'
            })
        
        # 최종 결과 계산
        최종수익률 = (자본 - 100000) / 100000 * 100
        
        return {
            '최종자본': 자본,
            '최종수익률': 최종수익률,
            '거래내역': 거래내역,
            '총거래횟수': len(거래내역)
        }

def main():
    """메인 실행 함수"""
    print("🚀 최적화 투자 분석 시스템 시작")
    print("=" * 50)
    
    try:
        # 시스템 초기화
        분석시스템 = 최적화투자분석()
        
        # 사용자 선택
        print("\n📋 실행 모드를 선택하세요:")
        print("  1. 단일 시뮬레이션 (빠름)")
        print("  2. 5사이클 누적 분석 (정밀)")
        
        선택 = input("\n👉 선택 (1 또는 2): ").strip()
        
        if 선택 == '1':
            결과 = 분석시스템.시뮬레이션_실행(최대전략수=200, 표시상위=15)
        elif 선택 == '2':
            결과 = 분석시스템._5사이클_누적_시뮬레이션()
        else:
            print("❌ 잘못된 선택입니다. 기본값으로 단일 시뮬레이션을 실행합니다.")
            결과 = 분석시스템.시뮬레이션_실행(최대전략수=200, 표시상위=15)
        
        if 결과:
            print(f"\n✅ 분석 완료!")
            print(f"📊 상세 결과는 JSON 파일에 저장되었습니다.")
        else:
            print(f"\n❌ 분석 실패!")
    
    except KeyboardInterrupt:
        print(f"\n\n⏹️ 사용자에 의해 중단되었습니다.")
    except Exception as e:
        print(f"\n❌ 오류 발생: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print(f"\n👋 프로그램을 종료합니다.")

if __name__ == "__main__":
    main()