import random
import time
import json
import os
import math
from datetime import datetime

try:
    import numpy as np
    NUMPY_AVAILABLE = True
except ImportError:
    NUMPY_AVAILABLE = False
    print("⚠️ numpy가 설치되지 않았습니다. 기본 수학 라이브러리를 사용합니다.")

class 최적화투자분석:
    def __init__(self, 초기가격=100):
        self.주간데이터 = []
        self.일간데이터 = []
        self.시간데이터 = []
        self.초기가격 = 초기가격
        self.현재가격 = 초기가격
        self.과거데이터 = []  # 이동평균용 과거 120일 데이터
        self._과거데이터_생성()
        self.가격기록 = []  # 시간별 가격 기록
    
    def _과거데이터_생성(self):
        """이동평균 계산용 과거 120일 데이터 생성"""
        print("과거 120일 주가 데이터 생성 중...")
        
        # 현재 초기가격(100원)에서 역산하여 자연스러운 과거 데이터 생성
        과거가격들 = []
        현재가격 = self.초기가격
        
        # 120일 전부터 현재까지의 가격 데이터 생성
        for 일차 in range(120, 0, -1):  # 120일 전부터 역순으로
            # 일일 변동률 (-3% ~ +3% 정도의 현실적 범위)
            일일변동률 = random.uniform(-3, 3)
            # 과거일수록 현재가격과 차이가 날 수 있도록 약간의 추세 반영
            추세보정 = (일차 / 120) * random.uniform(-0.5, 0.5)  # 장기간일수록 변동 가능성 증가
            최종변동률 = 일일변동률 + 추세보정
            
            현재가격 = 현재가격 * (1 + 최종변동률/100)
            현재가격 = max(50, min(200, 현재가격))  # 50~200원 범위 제한
            
        # 이제 정방향으로 120일 데이터 다시 생성
        시작가격 = 현재가격
        과거가격들 = [시작가격]
        
        for 일차 in range(1, 120):
            일일변동률 = random.uniform(-2.5, 2.5)  # 현실적 일일 변동률
            새가격 = 과거가격들[-1] * (1 + 일일변동률/100)
            새가격 = max(50, min(200, 새가격))  # 범위 제한
            과거가격들.append(새가격)
        
        # 마지막 가격이 초기가격(100)에 가깝도록 보정
        마지막가격 = 과거가격들[-1]
        보정비율 = self.초기가격 / 마지막가격
        self.과거데이터 = [가격 * 보정비율 for 가격 in 과거가격들]
        
        print(f"   과거 데이터 생성 완료: {self.과거데이터[0]:.1f}원 → {self.과거데이터[-1]:.1f}원")
        print(f"   20일 평균: {sum(self.과거데이터[-20:])/20:.1f}원")
        print(f"   60일 평균: {sum(self.과거데이터[-60:])/60:.1f}원") 
        print(f"   120일 평균: {sum(self.과거데이터)/120:.1f}원")
        
    def 랜덤_일별_데이터_생성(self):
        """현실적인 일간 변동률 우선 생성 후 주간 집계"""
        print("=== 135일간 일간 변동률 우선 생성 ===")
        
        # 135일간 다양한 변동폭의 일간 변동률 생성
        일간변동률들 = []
        누적가격 = self.초기가격
        
        print("\n일별 변동률 (다양한 변동폭):")
        
        # 시장 분위기 결정 (전체 기간에 영향)
        시장분위기 = random.choices(
            ['안정장', '보통장', '변동장', '급변장'],
            weights=[25, 40, 25, 10],
            k=1
        )[0]
        
        print(f"시장 분위기: {시장분위기}")
        print("   안정 보통 활발 급변동 극단\n")
        
        for 일차 in range(135):
            # 시장분위기에 따른 가중치 조정
            if 시장분위기 == '안정장':
                가중치 = [50, 35, 10, 4, 1]  # 안정적 변동 선호
            elif 시장분위기 == '보통장':
                가중치 = [25, 45, 20, 8, 2]  # 보통 변동 중심
            elif 시장분위기 == '변동장':
                가중치 = [15, 25, 35, 20, 5]  # 활발한 변동
            else:  # 급변장
                가중치 = [10, 15, 25, 35, 15]  # 급변동 자주 발생
            
            # 변동폭 타입 선택
            변동타입 = random.choices(
                ['안정', '보통', '활발', '급변동', '극단'],
                weights=가중치,
                k=1
            )[0]
            
            # 변동타입별 범위 설정
            if 변동타입 == '안정':
                일간변동 = random.uniform(-2, 2)  # 안정적 시장
                타입표시 = "안정"
            elif 변동타입 == '보통':
                일간변동 = random.uniform(-5, 5)  # 일반적 시장
                타입표시 = "보통"
            elif 변동타입 == '활발':
                일간변동 = random.uniform(-10, 10)  # 활발한 시장
                타입표시 = "활발"
            elif 변동타입 == '급변동':
                일간변동 = random.uniform(-20, 20)  # 급격한 시장
                타입표시 = "급변"
            else:  # 극단
                # 극단적 변동은 방향성을 가지도록 (폭락 또는 폭등)
                방향 = random.choice(['폭락', '폭등'])
                if 방향 == '폭락':
                    일간변동 = random.uniform(-30, -15)  # 대폭 하락
                    타입표시 = "폭락"
                else:
                    일간변동 = random.uniform(15, 30)   # 대폭 상승
                    타입표시 = "폭등"
                
            일간변동률들.append(일간변동)
            
            # 누적 가격 계산
            누적가격 = 누적가격 * (1 + 일간변동/100)
            
            # 주차 계산 (5일 단위)
            주차 = (일차 // 5) + 1
            주내일차 = (일차 % 5) + 1
            
            print(f"  {주차}주 {주내일차}일: {타입표시} {일간변동:+.2f}% [{변동타입}] (누적: {누적가격:.1f}원)")
        
        self.일간데이터 = 일간변동률들
        return 일간변동률들
    
    def 주간_집계_계산(self, 일간데이터):
        """일간 데이터를 기반으로 주간 변동률 집계"""
        print("\n=== 일간 → 주간 집계 계산 ===")
        
        self.주간데이터 = []
        누적가격 = self.초기가격
        
        print("\n주간 집계 결과:")
        
        # 27주간 데이터 처리
        for 주차 in range(27):
            주시작_인덱스 = 주차 * 5
            주종료_인덱스 = 주시작_인덱스 + 5
            
            주간_일별데이터 = 일간데이터[주시작_인덱스:주종료_인덱스]
            
            # 주 시작 가격
            주시작가격 = 누적가격
            
            # 해당 주의 일별 변동 복리 계산
            주간누적배수 = 1
            for 일변동 in 주간_일별데이터:
                주간누적배수 *= (1 + 일변동/100)
                누적가격 *= (1 + 일변동/100)
            
            # 주간 총 변동률 계산
            주간변동률 = (주간누적배수 - 1) * 100
            self.주간데이터.append(주간변동률)
            
            # 초기가격 대비 총 변동률
            총변동률 = ((누적가격 - self.초기가격) / self.초기가격) * 100
            
            print(f"  {주차+1}주차: {[f'{x:+.1f}' for x in 주간_일별데이터]} → 주간: {주간변동률:+.1f}% (누적: {총변동률:+.1f}%)")
        
        print(f"\n주간 변동률 집계: {[f'{x:+.1f}%' for x in self.주간데이터]}")
        print(f"최종 가격: {self.초기가격:.1f}원 → {누적가격:.1f}원 ({((누적가격-self.초기가격)/self.초기가격*100):+.1f}%)")
        
        # 시간별 변동률 생성 (6시간 기반)
        self._시간별_변동률_생성()
    
    def _시간별_변동률_생성(self):
        """일간데이터에 맞춰 자연스러운 시간별 변동률 생성"""
        print("\n=== 일간 목표에 맞춘 시간별 변동률 생성 ===")
        
        self.시간데이터 = []
        
        # 각 일간 변동률을 6시간에 현실적으로 분산
        for 일차, 목표일변동 in enumerate(self.일간데이터):
            목표배수 = 1 + 목표일변동/100
            
            # 변동성 패턴 결정
            변동성타입 = self._변동성_패턴_결정(목표일변동)
            
            if 변동성타입 == '급변형':
                # 1-2시간에 큰 변동 집중, 나머지에서 조정
                시간변동들 = self._급변형_시간분산(목표일변동)
            elif 변동성타입 == '롤러코스터':
                # 여러 번 급변동과 회복
                시간변동들 = self._롤러코스터_시간분산(목표일변동)
            else:
                # 기존 안정형 (균등 분산)
                시간변동들 = self._안정형_시간분산(목표일변동)
            
            # 누적 배수 계산
            누적배수 = 1
            for 시간변동 in 시간변동들:
                누적배수 *= (1 + 시간변동/100)
            
            # 7시간째 필요한 변동률 계산
            필요변동 = ((목표배수 / 누적배수) - 1) * 100
            
            # 마지막 시간의 급격한 변동 방지 (±4% 제한) 및 완전 재분산
            if abs(필요변동) > 4:
                # 마지막 시간을 제한하고 부족분을 모든 시간에 재분산
                if 필요변동 > 4:
                    마지막변동 = 4
                    초과분 = 필요변동 - 4
                else:
                    마지막변동 = -4  
                    초과분 = 필요변동 + 4  # 음수값
                
                # 부족분을 7시간 모두에 균등 분산 (마지막 포함)
                시간변동들.append(마지막변동)
                분산량 = 초과분 / 7
                
                # 모든 시간에 분산량 추가
                for i in range(len(시간변동들)):
                    시간변동들[i] += 분산량
                    # 개별 시간 제한 적용 (±5%로 약간 관대하게)
                    if 시간변동들[i] > 5:
                        초과량 = 시간변동들[i] - 5
                        시간변동들[i] = 5
                        # 초과량을 다른 시간들에 재분산
                        for j in range(len(시간변동들)):
                            if j != i and j < len(시간변동들) and 시간변동들[j] < 5:
                                추가량 = min(초과량 / 6, 5 - 시간변동들[j])
                                시간변동들[j] += 추가량
                                초과량 -= 추가량
                    elif 시간변동들[i] < -5:
                        부족량 = -5 - 시간변동들[i]  # 양수값
                        시간변동들[i] = -5
                        # 부족량을 다른 시간들에 재분산
                        for j in range(len(시간변동들)):
                            if j != i and j < len(시간변동들) and 시간변동들[j] > -5:
                                조정량 = min(부족량 / 6, 시간변동들[j] + 5)
                                시간변동들[j] -= 조정량
                                부족량 -= 조정량
            else:
                # 마지막 시간이 제한 범위 내면 그대로 사용
                시간변동들.append(필요변동)
            self.시간데이터.extend(시간변동들)
        
        # 검증 및 표시
        print("일간 목표 vs 시간별 실제 결과:")
        현재가격 = self.초기가격
        
        for 일차 in range(135):
            주차 = (일차 // 5) + 1
            주내일차 = (일차 % 5) + 1
            
            # 해당 일의 6시간 데이터
            시작인덱스 = 일차 * 6
            끝인덱스 = (일차 + 1) * 6
            일일시간데이터 = self.시간데이터[시작인덱스:끝인덱스]
            
            # 실제 누적 변동 계산
            일이상가격 = 현재가격
            for 시간변동 in 일일시간데이터:
                일이상가격 = 일이상가격 * (1 + 시간변동/100)
            
            실제일변동 = ((일이상가격 - 현재가격) / 현재가격) * 100
            목표일변동 = self.일간데이터[일차]
            현재가격 = 일이상가격
            
            # 급변동 표시 및 패턴 타입 표시
            if abs(목표일변동) >= 5:
                # 패턴 판별 (시간별 변동의 특성으로)
                최대변동 = max(abs(x) for x in 일일시간데이터)
                변동편차 = sum(abs(x - 실제일변동/6) for x in 일일시간데이터) / 6
                
                if 최대변동 > abs(실제일변동) * 0.8 and 변동편차 > 2:
                    패턴타입 = "급변형" if 최대변동 > abs(실제일변동) else "롤러코스터"
                else:
                    패턴타입 = "안정형"
                
                변동표시 = f" [목표: {목표일변동:+.1f}%, {패턴타입}]"
            else:
                변동표시 = ""
            
            print(f"  {주차}주 {주내일차}일: {[f'{x:+.1f}' for x in 일일시간데이터]} → {실제일변동:+.1f}%{변동표시}")
        
        print(f"\n시간별 변동률 생성 완료: {len(self.시간데이터)}개")
        print(f"평균 시간별 변동폭: {sum(abs(x) for x in self.시간데이터) / len(self.시간데이터):.2f}%")
    
    def _변동성_패턴_결정(self, 목표일변동):
        """변동성 패턴 타입 결정"""
        변동폭 = abs(목표일변동)
        
        if 변동폭 >= 8:  # ±8% 이상
            # 70% 확률로 급변형, 20% 롤러코스터, 10% 안정형
            return random.choices(['급변형', '롤러코스터', '안정형'], 
                                weights=[70, 20, 10], k=1)[0]
        elif 변동폭 >= 4:  # ±4~8%
            # 40% 급변형, 30% 롤러코스터, 30% 안정형
            return random.choices(['급변형', '롤러코스터', '안정형'], 
                                weights=[40, 30, 30], k=1)[0]
        else:  # ±4% 미만
            # 10% 급변형, 20% 롤러코스터, 70% 안정형
            return random.choices(['급변형', '롤러코스터', '안정형'], 
                                weights=[10, 20, 70], k=1)[0]
    
    def _안정형_시간분산(self, 목표일변동):
        """기존 안정형 균등 분산"""
        시간변동들 = []
        for i in range(5):
            변동폭 = min(3.0, abs(목표일변동) * 0.8)
            
            if random.random() < 0.6 and 목표일변동 != 0:
                방향편향 = 1 if 목표일변동 > 0 else -1
                시간변동 = random.uniform(0, 변동폭) * 방향편향
            else:
                시간변동 = random.uniform(-변동폭, 변동폭)
            
            시간변동들.append(시간변동)
        return 시간변동들
    
    def _급변형_시간분산(self, 목표일변동):
        """1-2시간에 큰 변동 집중"""
        시간변동들 = [0] * 5
        
        # 급변동 시간 선택 (1-2개)
        급변동수 = 1 if abs(목표일변동) < 10 else 2
        급변동시간들 = random.sample(range(5), 급변동수)
        
        # 목표의 120-180%를 급변동 시간에 집중
        집중비율 = random.uniform(1.2, 1.8)
        집중변동 = 목표일변동 * 집중비율
        
        # 급변동 시간에 분배
        for i, 시간인덱스 in enumerate(급변동시간들):
            if 급변동수 == 1:
                시간변동들[시간인덱스] = 집중변동
            else:
                # 2개 시간에 분배 (70:30 또는 60:40)
                비율 = 0.7 if i == 0 else 0.3
                시간변동들[시간인덱스] = 집중변동 * 비율
        
        # 나머지 시간에는 반대 방향으로 조정
        남은시간들 = [i for i in range(5) if i not in 급변동시간들]
        조정필요량 = 집중변동 - 목표일변동  # 초과분
        
        for 시간인덱스 in 남은시간들:
            조정량 = 조정필요량 / len(남은시간들) * -1  # 반대 방향
            # 자연스러운 노이즈 추가
            노이즈 = random.uniform(-1.5, 1.5)
            시간변동들[시간인덱스] = 조정량 + 노이즈
        
        return 시간변동들
    
    def _롤러코스터_시간분산(self, 목표일변동):
        """여러 번 급변동과 회복 패턴"""
        시간변동들 = []
        
        # 목표의 150-250%를 2-3번에 걸쳐 급변동
        총집중비율 = random.uniform(1.5, 2.5)
        변동횟수 = 2 if abs(목표일변동) < 8 else 3
        
        # 급변동 패턴: 상승->하락->상승 또는 하락->상승->하락
        방향 = 1 if 목표일변동 > 0 else -1
        패턴방향들 = []
        
        for i in range(변동횟수):
            if i % 2 == 0:
                패턴방향들.append(방향)  # 목표 방향
            else:
                패턴방향들.append(-방향)  # 반대 방향
        
        # 각 급변동의 크기 결정
        기본크기 = abs(목표일변동) * 총집중비율 / 변동횟수
        
        for i in range(변동횟수):
            크기변동 = random.uniform(0.7, 1.3)  # ±30% 변동
            변동크기 = 기본크기 * 크기변동 * 패턴방향들[i]
            시간변동들.append(변동크기)
        
        # 남은 시간에는 조정 변동
        남은시간수 = 6 - 변동횟수
        총조정필요 = sum(시간변동들) - 목표일변동
        
        for i in range(남은시간수):
            조정량 = 총조정필요 / 남은시간수 * -1
            노이즈 = random.uniform(-1.0, 1.0)
            시간변동들.append(조정량 + 노이즈)
        
        # 순서를 랜덤하게 섞기
        random.shuffle(시간변동들)
        return 시간변동들
    
    def 계층적_변동률_생성(self, 주별데이터):
        """기존 방식 호환 - 주간 목표 기반 일간 데이터 생성 (특수 시나리오용)"""
        print(f"\n특수 시나리오용 주간 목표 기반 생성")
        
        self.주간데이터 = 주별데이터.copy()
        print(f"주간 변동률: {[f'{x:+.1f}%' for x in self.주간데이터]}")
        
        # 일간 변동률 생성 (5일 복리 계산이 주 변동률과 같게)
        self.일간데이터 = []
        
        for 주변동 in self.주간데이터:
            목표배수 = 1 + 주변동/100
            
            # 랜덤 일간 변동 생성
            일변동들 = []
            for i in range(4):  # 처음 4일은 랜덤
                일변동 = random.uniform(-6, 6)  # 범위 약간 줄임
                일변동들.append(일변동)
            
            # 마지막 날은 목표에 맞춰 계산 (기존 로직)
            누적배수 = 1
            for 일변동 in 일변동들:
                누적배수 *= (1 + 일변동/100)
            
            필요변동 = ((목표배수 / 누적배수) - 1) * 100
            
            # 극단값 제한을 좀 더 관대하게
            if 필요변동 < -12:
                필요변동 = -12
            elif 필요변동 > 12:
                필요변동 = 12
            
            일변동들.append(필요변동)
            
            # 검증
            실제누적 = 1
            for 일변동 in 일변동들:
                실제누적 *= (1 + 일변동/100)
            실제주변동 = (실제누적 - 1) * 100
            
            print(f"  주 {주변동:+.1f}% → 일간: {[f'{x:+.1f}' for x in 일변동들]} → 실제: {실제주변동:+.1f}%")
            
            self.일간데이터.extend(일변동들)
        
        print(f"일간 변동률 생성 완료: {len(self.일간데이터)}개")
        
        # 시간별 변동률 생성 (6시간 복리 계산이 일 변동률과 같게)
        self.시간데이터 = []
        
        for 일변동 in self.일간데이터:
            # 목표: 6시간의 복리 변동이 일변동과 같도록
            목표배수 = 1 + 일변동/100
            
            # 랜덤 시간 변동 생성
            시간변동들 = []
            for i in range(5):  # 처음 5시간은 랜덤
                시간변동 = random.uniform(-2, 2)
                시간변동들.append(시간변동)
            
            # 마지막 시간은 목표에 맞춰 계산
            누적배수 = 1
            for 시간변동 in 시간변동들:
                누적배수 *= (1 + 시간변동/100)
            
            # 7시간째 필요한 변동률 계산
            필요변동 = ((목표배수 / 누적배수) - 1) * 100
            
            # 너무 극단적인 값 방지 (-8% ~ 8% 제한)
            if 필요변동 < -8:
                필요변동 = -8
            elif 필요변동 > 8:
                필요변동 = 8
            
            시간변동들.append(필요변동)
            
            self.시간데이터.extend(시간변동들)
        
        # 검증 출력
        print(f"\n검증: 첫째 주 첫날 시간별 변동")
        첫날시간 = self.시간데이터[:6]
        누적 = 100
        for i, 변동 in enumerate(첫날시간):
            누적 = 누적 * (1 + 변동/100)
            # 소수점 1자리까지만 표시 (버림)
            누적 = int(누적 * 10) / 10
            print(f"  {i+1}시간: {변동:+.2f}% → 가격: {누적:.1f}")
        
        첫날변동 = ((누적 - 100) / 100) * 100
        print(f"  첫날 총 변동: {첫날변동:+.1f}% (목표: {self.일간데이터[0]:+.1f}%)")
        
        print(f"\n시간별 변동률 생성 완료: {len(self.시간데이터)}개")
        print()
    
    def 전략_비교_시뮬레이션(self):
        """다양한 전략을 자동 비교하며 점진적 필터링"""
        print(f"\n=== 전략 비교 시뮬레이션 ===")
        print(f"초기 주식 가격: {self.초기가격}원")
        print("="*60)
        
        # 기존 탈락 전략 로드
        탈락전략목록 = self._탈락전략_로드()
        
        # 다양한 전략 조합 생성 (탈락 전략 제외)
        전략조합 = self._전략조합_생성(탈락전략목록)
        print(f"\n총 {len(전략조합)}개 전략 조합 생성 완료")
        if 탈락전략목록:
            print(f"이전 탈락 전략 {len(탈락전략목록)}개 제외됨")
        
        # 일별 점진적 필터링
        생존전략 = 전략조합.copy()
        탈락기록 = []
        
        for 일차 in range(135):  # 27주 = 135일
            주차 = (일차 // 5) + 1
            주내일차 = (일차 % 5) + 1
            
            # 주간 단위로만 출력 (매주 월요일 = 주내일차 1일 때)
            if 주내일차 == 1:
                print(f"\n{'='*60}")
                print(f"{주차}주차 시뮬레이션 시작")
                print(f"현재 생존 전략: {len(생존전략)}개")
            
            # 각 전략별 시뮬레이션 실행
            일일결과 = []
            for 전략 in 생존전략:
                결과 = self._일일_시뮬레이션(전략, 일차)
                일일결과.append(결과)
            
            # 성과 기준 정렬 (총수익률 기준)
            일일결과.sort(key=lambda x: x['수익률'], reverse=True)
            
            # 자산 기준 탈락: 평가자산이 60,000원(60%) 이하인 전략 탈락 (40% 손실)
            # 옐로우카드 시스템 (점진적 경고 방식)
            생존전략 = []
            탈락자 = []
            옐로우카드발급 = []
            
            # 주차별 체크 (매주 금요일: 4, 9, 14, 19, 24, 29...)
            주차 = (일차 // 5) + 1
            
            for 결과 in 일일결과:
                전략 = 결과['전략']
                현재평가자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
                현재수익률 = ((현재평가자산 - 100000) / 100000) * 100
                
                # 개선된 옐로우카드 관리 (매주 체크, 12개 누적시 탈락)
                # 옐로우카드는 전략 생성시 이미 복원됨
                if '옐로우카드' not in 전략:
                    전략['옐로우카드'] = {'개수': 0, '마지막카드주차': 0}  # 새 전략인 경우만
                
                # 매주(5일 단위)로 수익률 체크 - 주차가 바뀔 때마다
                if 주차 > 전략['옐로우카드']['마지막카드주차']:
                    if 현재수익률 <= -5:  # -5% 이하일 때만 카드 발급
                        전략['옐로우카드']['개수'] += 1
                        전략['옐로우카드']['마지막카드주차'] = 주차
                        옐로우카드발급.append({'전략': 전략, '주차': 주차, '수익률': 현재수익률, '카드개수': 전략['옐로우카드']['개수']})
                
                # 개선된 탈락 판정: 옐로우카드 12개 OR 극심한 손실 (50% 이하)
                if 전략['옐로우카드']['개수'] >= 12:
                    탈락자.append(전략)
                elif 현재수익률 <= -50:  # -50% 이하 = 극심한 손실로 즉시 탈락
                    탈락자.append(전략)  
                else:
                    생존전략.append(전략)
            
            # 탈락 기록 (모든 탈락자 저장)
            for 전략 in 탈락자:
                # 탈락 횟수 누적
                # 탈락 횟수 증가 (전략 생성시 이미 복원됨)
                if '탈락횟수' not in 전략:
                    전략['탈락횟수'] = 0  # 새 전략인 경우만 0으로 초기화
                전략['탈락횟수'] += 1
                
                # 실시간 영구 제외 조건 확인 및 저장
                self._실시간_영구제외_확인(전략, 일차+1)
                
                탈락사유 = "옐로우카드12개(12주부진)" if 전략['옐로우카드']['개수'] >= 12 else "극심한손실(-50%)"
                탈락기록.append({'전략': 전략, '탈락일': 일차+1, '탈락사유': 탈락사유,
                                '영구탈락': False})  # 일시 탈락으로 변경 (재활용 가능)
            
            # 매일 간단한 진행상황 출력 (성능 최적화)
            # dict는 set에 넣을 수 없으므로 id 기반으로 최적화
            생존전략_ids = {id(전략) for 전략 in 생존전략}
            생존전략수익률 = [결과['수익률'] for 결과 in 일일결과 if id(결과['전략']) in 생존전략_ids]
            평균수익률 = sum(생존전략수익률)/len(생존전략수익률) if 생존전략수익률 else 0
            print(f"{일차+1}일차: 생존 {len(생존전략):,}개 전략 (평균 누적수익률 {평균수익률:+.1f}%)")
            
            # 상태 출력 (간단히) - 생존 정보 이후에 표시
            if 옐로우카드발급:
                print(f"   ⚠️ 옐로우카드 {len(옐로우카드발급)}개 발급")
            
            # 탈락 출력 (옐로우카드 이후에 표시)
            if 탈락자:
                옐로우탈락 = sum(1 for t in 탈락자 if t['옐로우카드']['개수'] >= 12)
                극심탈락 = len(탈락자) - 옐로우탈락
                print(f"   🚨 탈락: {len(탈락자)}개 (옐로우카드:{옐로우탈락}개, 극심손실:{극심탈락}개)")
            
            # 극심손실 탈락 발생시에만 상세 출력
            극심탈락자 = [t for t in 탈락자 if t['옐로우카드']['개수'] < 12]  # 옐로우카드가 아닌 극심손실 탈락자
            if 극심탈락자:
                # 일일 결과 출력
                self._일일결과_출력(일일결과, 일차)
                
                # 생존 전략 중 상위 5개만 표시
                print(f"\n생존 전략 중 상위 2개 누적 통계:")
                count = 0
                for 결과 in 일일결과:
                    전략 = 결과['전략']
                    # 생존 전략인지 확인
                    if 전략 in 생존전략:
                        # 총 거래 내역 분석
                        총거래내역 = 전략['거래내역']
                        총매수 = len([t for t in 총거래내역 if t[0] == '매수'])
                        총매도 = len([t for t in 총거래내역 if t[0] in ['절반매도', '전량매도', '최종매도', '수익매도', '트레일링스탑', '기간매도'] or '고무줄' in t[0]])
                        총손절 = len([t for t in 총거래내역 if t[0] == '손절'])
                        
                        전략설명 = self._전략설명_생성(전략)
                        현재가 = 전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격
                        평가자산 = 전략['자본'] + 전략['주식수'] * 현재가
                        보유상태 = f"보유{전략['주식수']:.1f}주@{현재가:.1f}원" if 전략['주식수'] > 0 else "현금100%"
                        print(f"{count+1}. [{전략설명}] (매수{총매수} 매도{총매도} 손절{총손절})")
                        print(f"   총수익률: {결과['수익률']:+.1f}%, 평가자산{평가자산:,.0f}원, {보유상태}")
                        
                        count += 1
                        if count >= 2:
                            break
                
                # 상위 전략 출력 후 줄바꿈
                print()
            
            if len(생존전략) <= 5:
                print(f"\n최종 {len(생존전략)}개 전략만 남음. 시뮬레이션 종료")
                break
            
            # 매주 금요일에 주간 결과 요약 및 엔터키 대기
            if 일차 < 134 and (일차 % 5 == 4):  # 주내일차 5일째 (금요일)
                주차 = (일차 // 5) + 1
                print(f"\n{주차}주차 요약")
                print(f"   생존 전략: {len(생존전략)}개")
                if 탈락기록:
                    최근탈락 = [t for t in 탈락기록 if (일차 - 4) <= t['탈락일'] <= (일차 + 1)]
                    if 최근탈락:
                        print(f"   이번 주 탈락: {len(최근탈락)}개")
        
        # 모든 탈락 전략을 누적 횟수 기반으로 저장
        if 탈락기록:
            self._탈락전략_저장(탈락기록)
            옐로우탈락 = len([t for t in 탈락기록 if '옐로우카드' in t['탈락사유']])
            극심탈락 = len([t for t in 탈락기록 if '극심손실' in t['탈락사유']])
            print(f"\n탈락 기록 저장 완료: 옐로우카드 {옐로우탈락}개, 극심손실 {극심탈락}개")
            print(f"   (누적 5회 탈락시 영구 제외, 극심손실은 즉시 영구 제외)")
        else:
            print(f"\n모든 전략이 생존했습니다. 탈락 없음.")
        
        # 최종 결과 분석 및 최고 전략 저장
        최고전략 = self._최종결과_분석(생존전략, 탈락기록)
        
        # 결과 반환 (5사이클용)
        return {
            '생존전략': 생존전략,
            '탈락기록': 탈락기록,
            '최고전략': 최고전략
        }
    
    def 전략_비교_시뮬레이션_조용함(self):
        """조용한 모드 시뮬레이션 (5사이클용)"""
        # 기존 탈락 전략 로드
        탈락전략목록 = self._탈락전략_로드()
        
        # 전략 조합 생성 (탈락 전략 제외)
        전략조합 = self._전략조합_생성(탈락전략목록)
        
        생존전략 = 전략조합.copy()
        탈락기록 = []
        
        # 135일간 시뮬레이션 (조용히)
        for 일차 in range(135):
            if len(생존전략) <= 5:
                break
                
            # 일일 시뮬레이션 실행 (출력 없음)
            일일결과 = []
            for i, 전략 in enumerate(생존전략):
                결과 = self._단일전략_시뮬레이션(전략, 일차, 
                    전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
                일일결과.append(결과)
            
            # 옐로우카드 및 탈락 체크
            생존전략 = []
            탈락자 = []
            주차 = (일차 // 5) + 1
            
            for 결과 in 일일결과:
                전략 = 결과['전략']
                현재평가자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
                현재수익률 = ((현재평가자산 - 100000) / 100000) * 100
                
                # 옐로우카드 관리 (전략 생성시 이미 복원됨)
                if '옐로우카드' not in 전략:
                    전략['옐로우카드'] = {'개수': 0, '마지막음성주차': 0}  # 새 전략인 경우만
                
                # 6주 단위 체크
                if 주차 % 6 == 0 and 주차 > 전략['옐로우카드']['마지막음성주차']:
                    if 현재수익률 <= -5:
                        전략['옐로우카드']['개수'] += 1
                        전략['옐로우카드']['마지막음성주차'] = 주차
                
                # 탈락 판정
                if 전략['옐로우카드']['개수'] >= 2:
                    탈락자.append(전략)
                elif 현재평가자산 <= 50000:
                    탈락자.append(전략)
                else:
                    생존전략.append(전략)
            
            # 탈락 기록 저장
            for 전략 in 탈락자:
                # 탈락 횟수 누적
                # 탈락 횟수 증가 (전략 생성시 이미 복원됨)
                if '탈락횟수' not in 전략:
                    전략['탈락횟수'] = 0  # 새 전략인 경우만 0으로 초기화
                전략['탈락횟수'] += 1
                
                # 실시간 영구 제외 조건 확인 및 저장
                self._실시간_영구제외_확인(전략, 일차+1)
                
                탈락사유 = "옐로우카드12개(12주부진)" if 전략['옐로우카드']['개수'] >= 12 else "극심한손실(-50%)"
                탈락기록.append({'전략': 전략, '탈락일': 일차+1, '탈락사유': 탈락사유, '영구탈락': False})
        
        # 탈락 전략 저장
        if 탈락기록:
            self._탈락전략_저장(탈락기록)
        
        # 최고전략 분석
        최고전략 = None
        if 생존전략:
            최고전략 = max(생존전략, key=lambda x: ((x['자본'] + x['주식수'] * (x['이동평균'][-1] if x['이동평균'] else self.초기가격)) - 100000) / 100000 * 100)
            if 최고전략:
                self._최고전략_히스토리_저장(최고전략, '5사이클자동')
        
        return {
            '생존전략': 생존전략,
            '탈락기록': 탈락기록,
            '최고전략': 최고전략
        }
        
        # 시장 상황 분석 및 전략 성과 저장
        try:
            현재상황 = self.시장상황_분석()
            print(f"\n시장 상황 분석 결과:")
            print(f"   시장 체제: {현재상황['market_regime']}")
            print(f"   변동성: {현재상황['volatility_pattern']}")
            print(f"   추세: {현재상황['trend_pattern']}")
            print(f"   모멘텀: {현재상황['price_momentum']}")
        except AttributeError:
            print(f"\n시장 상황 분석을 건너뜁니다 (메소드 오류)")
            현재상황 = {
                'market_regime': '분석불가',
                'volatility_pattern': '분석불가',
                'trend_pattern': '분석불가',
                'price_momentum': '분석불가'
            }
        
        # 생존 전략들을 저장 형식으로 변환 (전략 설명 추가)
        저장용전략들 = []
        for 전략 in 생존전략:
            평가자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
            수익률 = ((평가자산 - 100000) / 100000) * 100
            거래횟수 = len(전략['거래내역'])
            
            저장용전략들.append({
                '전략설명': self._전략설명_생성(전략),
                '수익률': 수익률,
                '거래횟수': 거래횟수,
                '최종자산': 평가자산,
                '전략상세': {
                    '매수기준': 전략.get('매수기준명', ''),
                    '매수하락률': 전략.get('매수하락률', 0),
                    '구매방식': 전략.get('구매방식명', ''),
                    '손절라인': 전략.get('손절라인', 0),
                    '매도전략': 전략.get('매도전략명', '')
                }
            })
        
        # 전략 성과를 상황별로 저장
        self.전략성과_저장(현재상황, 저장용전략들)
        
        # 유사 상황의 과거 전략 추천
        print(f"\n유사 상황 기반 전략 추천:")
        추천전략들 = self.유사상황_전략추천(현재상황)
        
        # 최고 성과 전략 히스토리에 저장 (기존 로직 유지)
        if 최고전략:
            self._최고전략_히스토리_저장(최고전략, '일반시뮬레이션')
        
        # 최종 검증 제안
        if len(생존전략) <= 10:
            print(f"\n2단계 극한 검증을 실행하시겠습니까?")
            print(f"현재 {len(생존전략)}개 후보 전략을 다양한 극한 환경에서 테스트합니다.")
            극한검증 = input("극한 검증 실행? (y/n): ")
            if 극한검증.lower() == 'y':
                self._극한검증_시뮬레이션(생존전략)
    
    def _탈락전략_로드(self):
        """누적 탈락 기록 로드 (탈락 횟수 추적)"""
        파일경로 = "탈락전략.json"
        if os.path.exists(파일경로):
            try:
                with open(파일경로, 'r', encoding='utf-8') as f:
                    탈락기록 = json.load(f)
                
                # 영구 제외 전략 (탈락 횟수 >= 5 또는 극심손실)
                영구제외 = []
                임시탈락기록 = {}
                
                for 기록 in 탈락기록:
                    전략키 = self._전략을_키로_변환(기록)
                    if '탈락횟수' in 기록:
                        if 기록['탈락횟수'] >= 5 or ('극심손실' in 기록.get('최근탈락사유', '')):
                            영구제외.append(기록)
                        else:
                            임시탈락기록[전략키] = 기록
                    else:
                        # 기존 데이터 호환성: 기본 탈락횟수 1로 설정
                        기록['탈락횟수'] = 1
                        기록['탈락이력'] = [기록.get('탈락사유', '기존탈락')]
                        임시탈락기록[전략키] = 기록
                
                print(f"탈락 기록 로드: 영구제외 {len(영구제외)}개, 임시탈락 {len(임시탈락기록)}개")
                return {'영구제외': 영구제외, '임시기록': 임시탈락기록}
            except:
                print("탈락 전략 파일 로드 실패")
                return {'영구제외': [], '임시기록': {}}
        return {'영구제외': [], '임시기록': {}}
    
    def _탈락전략_저장(self, 새탈락전략_정보):
        """누적 탈락 횟수 기반 저장"""
        기존기록 = self._탈락전략_로드()
        기존영구제외 = 기존기록['영구제외']
        임시기록 = 기존기록['임시기록']
        
        # 출력 카운터
        영구제외카운트 = 0
        
        # 새 탈락 전략들 처리
        for 탈락정보 in 새탈락전략_정보:
            전략 = 탈락정보['전략']
            탈락사유 = 탈락정보['탈락사유']
            전략키 = self._전략을_키로_변환(전략)
            
            # 기존 기록 확인
            if 전략키 in 임시기록:
                # 탈락 횟수 증가
                임시기록[전략키]['탈락횟수'] += 1
                임시기록[전략키]['탈락이력'].append(탈락사유)
                임시기록[전략키]['최근탈락사유'] = 탈락사유
                
                # 5회 탈락 또는 극심손실시 영구 제외로 이동
                if 임시기록[전략키]['탈락횟수'] >= 5 or '극심손실' in 탈락사유:
                    탈락횟수 = 임시기록[전략키]['탈락횟수']  # 삭제 전에 저장
                    기존영구제외.append(임시기록[전략키])
                    del 임시기록[전략키]
                    영구제외카운트 += 1
            else:
                # 새 전략 첫 탈락
                새기록 = {
                    '매수기준': 전략['매수기준'],
                    '매수하락률': 전략['매수하락률'],
                    '구매방식': 전략['구매방식'],
                    '매수수량': 전략['매수수량'],
                    '손절라인': 전략['손절라인'],
                    '매도전략': 전략['매도전략'],
                    '수익라인': 전략.get('수익라인', 0),
                    '탈락횟수': 1,
                    '탈락이력': [탈락사유],
                    '최근탈락사유': 탈락사유,
                    '첫탈락일': time.strftime("%Y-%m-%d")
                }
                
                if '극심손실' in 탈락사유:
                    # 극심손실은 첫 탈락이어도 영구 제외
                    기존영구제외.append(새기록)
                    영구제외카운트 += 1
                else:
                    임시기록[전략키] = 새기록
        
        # 요약 출력
        if 영구제외카운트 > 0:
            print(f"   영구 제외 전략: {영구제외카운트}개")
        
        # 전체 탈락 기록 재구성
        전체탈락기록 = 기존영구제외 + list(임시기록.values())
        
        try:
            with open("탈락전략.json", 'w', encoding='utf-8') as f:
                # 저장할 데이터를 간소화
                간소화데이터 = []
                for 전략 in 전체탈락기록:
                    간소화데이터.append({
                        '매수기준': 전략['매수기준'],
                        '매수하락률': 전략['매수하락률'],
                        '구매방식': 전략['구매방식'],
                        '매수수량': 전략['매수수량'],
                        '손절라인': 전략['손절라인'],
                        '매도전략': 전략['매도전략'],
                        '수익라인': 전략['수익라인']
                    })
                json.dump(간소화데이터, f, ensure_ascii=False, indent=2)
            print(f"탈락 전략 {len(전체탈락기록)}개 저장 완료 (신규: {len(새로운탈락)}개)")
        except Exception as e:
            print(f"탈락 전략 저장 실패: {e}")
    
    def _전략을_키로_변환(self, 전략):
        """전략을 고유 키로 변환"""
        return f"{전략['매수기준']}-{전략['매수하락률']}-{전략['구매방식']}-{전략['매수수량']}-{전략['손절라인']}-{전략['매도전략']}-{전략['수익라인']}"
    
    def _전략조합_생성(self, 탈락전략목록=None):
        """다양한 전략 조합 자동 생성"""
        전략조합 = []
        
        # 탈락 기록 로드 (탈락 횟수 복원용)
        탈락기록 = self._탈락전략_로드()
        임시탈락기록 = 탈락기록['임시기록']
        
        # 매수 전략 옵션 (0.5% 단위 세밀 조정)
        매수전략들 = [
            {'기준': '1', '이름': '시가하락', 
             '하락률': [0.1, 0.2, 0.3, 0.5, 0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0]},
            {'기준': '2', '이름': '전일하락',
             '하락률': [0.2, 0.3, 0.5, 0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0]},
            {'기준': '3', '이름': '20일선하락',
             '하락률': [0.5, 0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0, 22.0]},
            {'기준': '4', '이름': '60일선하락',
             '하락률': [0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0, 22.0, 25.0]},
            {'기준': '5', '이름': '120일선하락',
             '하락률': [1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0, 22.0, 25.0, 28.0, 30.0]},
            
            # 신규 상승매수 전략들 (상승장 대응)
            {'기준': '6', '이름': '시가상승', 
             '상승률': [0.1, 0.2, 0.3, 0.5, 0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0]},
            {'기준': '7', '이름': '20일선상승',
             '상승률': [0.2, 0.5, 0.8, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0]},
            {'기준': '8', '이름': '연속상승',
             '연속횟수': [2, 3, 4, 5, 6]},  # N시간 연속 상승
            {'기준': '9', '이름': '모멘텀매수',
             '모멘텀기준': [1.5, 2.0, 2.5, 3.0, 4.0, 5.0]},  # 큰 상승 움직임 추종
        ]
        
        # 매수 수량 옵션
        매수수량들 = [
            {'방식': '1', '이름': '10%', '수량': 0.1},
            {'방식': '1', '이름': '30%', '수량': 0.3},
            {'방식': '1', '이름': '50%', '수량': 0.5},
            {'방식': '2', '이름': '5주', '수량': 5},
            {'방식': '2', '이름': '10주', '수량': 10}
        ]
        
        # 손절 옵션 (0.5% 단위 세밀 조정)
        손절라인들 = [-0.5, -1.0, -1.5, -2.0, -2.5, -3.0, -3.5, -4.0, -4.5, -5.0, -6.0, -7.0, -8.0, -9.0, -10.0, -12.0, -15.0]
        
        # 고무줄 매도 전략 옵션
        매도전략들 = []
        
        # 1. 기본 일괄 매도 전략들
        일괄수익라인들 = [1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 12.0, 15.0, 18.0, 20.0]
        for 수익라인 in 일괄수익라인들:
            매도전략들.append({'전략': '2', '이름': f'일괄{수익라인}%', '수익라인': 수익라인})
        
        # 2. 고무줄 분할 매도 전략들 (수익률에 따른 차등 매도)
        고무줄전략들 = [
            # 보수적 고무줄 (적게 팔기)
            {'시작': 2.0, '단계': 1.0, '초기비율': 10, '증가율': 5, '이름': '보수고무줄'},  # 2%에서 10%, 3%에서 15%, 4%에서 20%...
            {'시작': 2.5, '단계': 1.5, '초기비율': 15, '증가율': 10, '이름': '중간고무줄'}, # 2.5%에서 15%, 4%에서 25%, 5.5%에서 35%...
            {'시작': 3.0, '단계': 2.0, '초기비율': 20, '증가율': 15, '이름': '적극고무줄'}, # 3%에서 20%, 5%에서 35%, 7%에서 50%...
            
            # 공격적 고무줄 (많이 팔기)
            {'시작': 1.5, '단계': 0.5, '초기비율': 25, '증가율': 15, '이름': '급진고무줄'}, # 1.5%에서 25%, 2%에서 40%, 2.5%에서 55%...
            {'시작': 4.0, '단계': 3.0, '초기비율': 30, '증가율': 20, '이름': '대기고무줄'}, # 4%에서 30%, 7%에서 50%, 10%에서 70%...
        ]
        
        for 전략 in 고무줄전략들:
            매도전략들.append({
                '전략': '4', # 새로운 고무줄 전략 타입
                '이름': 전략['이름'],
                '수익라인': 전략['시작'],  # 시작 수익률
                '고무줄설정': {
                    '시작수익률': 전략['시작'],
                    '단계간격': 전략['단계'],
                    '초기매도비율': 전략['초기비율'],
                    '비율증가량': 전략['증가율']
                }
            })
        
        # 3. 기간별 존버 전략들 (정해진 기간에만 매도)
        존버전략들 = [
            {'전략': '3', '이름': '15일존버', '수익라인': 999, '매도기간': 14},  # 15일차에 매도 (3주)
            {'전략': '3', '이름': '30일존버', '수익라인': 999, '매도기간': 29},  # 30일차에 매도 (6주)
            {'전략': '3', '이름': '45일존버', '수익라인': 999, '매도기간': 44},  # 45일차에 매도 (9주)
            {'전략': '3', '이름': '90일존버', '수익라인': 999, '매도기간': 89},  # 90일차에 매도 (18주)
            {'전략': '3', '이름': '120일존버', '수익라인': 999, '매도기간': 119}, # 120일차에 매도 (24주)
            {'전략': '3', '이름': '최종존버', '수익라인': 999, '매도기간': 134}   # 135일차에 매도 (27주)
        ]
        
        for 존버 in 존버전략들:
            매도전략들.append(존버)
        
        # 영구 제외 전략 키 세트 생성
        영구제외키들 = set()
        if 탈락전략목록:
            # 탈락전략목록이 새로운 형식인지 확인
            if isinstance(탈락전략목록, dict) and '영구제외' in 탈락전략목록:
                영구제외전략들 = 탈락전략목록['영구제외']
            else:
                # 기존 형식 호환성
                영구제외전략들 = 탈락전략목록
            
            for 탈락전략 in 영구제외전략들:
                키 = self._전략을_키로_변환(탈락전략)
                영구제외키들.add(키)
        
        print(f"영구 제외 전략: {len(영구제외키들)}개 (5회 이상 탈락 또는 극심손실)")
        
        # 모든 조합 생성 (탈락 전략 제외)
        생성수 = 0
        제외수 = 0
        
        for 매수전략 in 매수전략들:
            # 전략 타입에 따라 다른 매개변수 처리
            if '하락률' in 매수전략:  # 하락매수 전략들 (기존)
                매개변수들 = 매수전략['하락률']
                매개변수명 = '매수하락률'
            elif '상승률' in 매수전략:  # 상승매수 전략들 (신규)
                매개변수들 = 매수전략['상승률']
                매개변수명 = '매수상승률'
            elif '연속횟수' in 매수전략:  # 연속상승 전략 (신규)
                매개변수들 = 매수전략['연속횟수']
                매개변수명 = '연속횟수'
            elif '모멘텀기준' in 매수전략:  # 모멘텀 전략 (신규)
                매개변수들 = 매수전략['모멘텀기준']
                매개변수명 = '모멘텀기준'
            else:
                continue  # 알 수 없는 전략 타입은 건너뛰기
                
            for 매개변수값 in 매개변수들:
                for 매수수량 in 매수수량들:
                    for 손절 in 손절라인들:
                        for 매도전략 in 매도전략들:
                            # 임시 전략 객체 생성 (동적 매개변수명 사용)
                            임시전략 = {
                                '매수기준': 매수전략['기준'],
                                매개변수명: 매개변수값,  # 동적으로 설정
                                '구매방식': 매수수량['방식'],
                                '매수수량': 매수수량['수량'],
                                '손절라인': 손절,
                                '매도전략': 매도전략['전략'],
                                '수익라인': 매도전략['수익라인']
                            }
                            
                            # 하락률은 하위 호환성을 위해 유지
                            if 매개변수명 == '매수하락률':
                                임시전략['매수하락률'] = 매개변수값
                            else:
                                # 매수하락률이 없는 경우 전략에 맞는 기본값 설정
                                if '매수하락률' not in 임시전략:
                                    # 상승매수 전략의 경우 적절한 기본값 설정
                                    if 매수전략['기준'] in ['6', '7']:  # 시가상승, 20일선상승
                                        임시전략['매수하락률'] = -매개변수값  # 상승률을 음수 하락률로 변환
                                    else:
                                        임시전략['매수하락률'] = 1.0  # 기타 전략 기본값
                            
                            # 탈락 전략인지 확인
                            키 = self._전략을_키로_변환(임시전략)
                            if 키 in 영구제외키들:
                                제외수 += 1
                                continue
                            
                            # 정상 전략 추가
                            # 동적 매개변수 추가
                            전략데이터 = {
                                '매수기준': 매수전략['기준'],
                                '매수기준명': 매수전략['이름'],
                                매개변수명: 매개변수값,  # 동적으로 매개변수 추가
                                '구매방식': 매수수량['방식'],
                                '구매방식명': 매수수량['이름'],
                                '매수수량': 매수수량['수량'],
                                '손절라인': 손절,
                                '매도전략': 매도전략['전략'],
                                '매도전략명': 매도전략['이름'],
                                '수익라인': 매도전략['수익라인'],
                                '자본': 100000,
                                '주식수': 0,
                                '매수가격': 0,
                                '최고가격': 0,
                                '절반매도완료': False,
                                '이동평균': self.과거데이터.copy(),  # 과거 120일 데이터로 초기화
                                '거래내역': [],
                            }
                            
                            # 고무줄 매도 전략인 경우 설정 추가
                            if '고무줄설정' in 매도전략:
                                전략데이터['고무줄설정'] = 매도전략['고무줄설정']
                                
                            # 하위 호환성을 위해 매수하락률도 추가 (기존 코드 동작 보장)
                            if '매수하락률' not in 전략데이터:
                                전략데이터['매수하락률'] = 0  # 기본값
                            
                            # 탈락 횟수 복원 (기존 탈락 기록에서)
                            전략키 = self._전략을_키로_변환(전략데이터)
                            if 전략키 in 임시탈락기록:
                                전략데이터['탈락횟수'] = 임시탈락기록[전략키]['탈락횟수']
                                기존옐로우 = 임시탈락기록[전략키].get('옐로우카드', 0)
                                if isinstance(기존옐로우, dict):
                                    전략데이터['옐로우카드'] = {'개수': 기존옐로우.get('개수', 0), '마지막카드주차': 0}
                                else:
                                    전략데이터['옐로우카드'] = {'개수': 기존옐로우, '마지막카드주차': 0}
                            else:
                                전략데이터['탈락횟수'] = 0
                                전략데이터['옐로우카드'] = {'개수': 0, '마지막카드주차': 0}
                                
                            전략조합.append(전략데이터)
                            
                            생성수 += 1
        
        if 제외수 > 0:
            print(f"탈락 전략 {제외수}개 제외, {생성수}개 생성")
        
        return 전략조합
    
    def _일일_시뮬레이션(self, 전략, 일차):
        """하루 동안의 특정 전략 시뮬레이션"""
        # 전일 종가 계산 (이동평균에서)
        전일종가 = 전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격
        
        # 시작 가격 (전일 종가)
        현재가격 = 전일종가
        시작자본 = 전략['자본']
        시작평가 = 시작자본 + 전략['주식수'] * 현재가격
        
        거래횟수 = 0
        
        # 하루 6시간 시뮬레이션
        for 시간 in range(7):
            시간인덱스 = 일차 * 7 + 시간
            if 시간인덱스 >= len(self.시간데이터):
                break
                
            변동률 = self.시간데이터[시간인덱스]
            현재가격 = 현재가격 * (1 + 변동률/100)
            현재가격 = int(현재가격 * 10) / 10  # 소수점 1자리 버림
            
            # 매매 로직 실행 (첫 시간 제외)
            if 시간 > 0:  # 첫 번째 시간은 매수/매도 금지
                거래발생 = self._전략_매매_실행(전략, 현재가격, 전일종가, 일차, 시간)
                if 거래발생:
                    거래횟수 += 1
        
        # 이동평균 업데이트 (최대 120일 유지)
        전략['이동평균'].append(현재가격)
        if len(전략['이동평균']) > 120:
            전략['이동평균'].pop(0)
        
        # 최종 평가자산 및 수익률 계산
        최종평가 = 전략['자본'] + 전략['주식수'] * 현재가격
        
        # 일일 수익률: 하루 시작 대비 하루 종료시점 총 평가자산 변화율
        일일수익률 = ((최종평가 - 시작평가) / 시작평가) * 100 if 시작평가 > 0 else 0
        
        총수익률 = ((최종평가 - 100000) / 100000) * 100
        
        return {
            '전략': 전략,
            '수익률': 총수익률,
            '일수익률': 일일수익률,
            '평가자산': 최종평가,
            '거래횟수': 거래횟수,
            '현재가격': 현재가격
        }
    
    def _전략_매매_실행(self, 전략, 현재가격, 전일종가, 일차, 시간):
        """전략에 따른 매매 실행"""
        거래발생 = False
        
        # 손절 체크
        if 전략['주식수'] > 0 and 전략['매수가격'] > 0:
            손실률 = ((현재가격 - 전략['매수가격']) / 전략['매수가격']) * 100
            if 손실률 <= 전략['손절라인']:
                매도금액 = 전략['주식수'] * 현재가격
                전략['자본'] += 매도금액
                전략['거래내역'].append(('손절', 일차+1, 시간+1, 현재가격, 전략['주식수']))
                전략['주식수'] = 0
                전략['매수가격'] = 0  # 매수가 초기화
                전략['절반매도완료'] = False
                return True
        
        # 매수 체크
        if 전략['자본'] > 현재가격 and 전략['주식수'] == 0:
            매수신호 = False
            
            if 전략['매수기준'] == '1':  # 시가 대비 하락
                시가 = self._시가_계산(일차)
                일대비변동 = ((현재가격 - 시가) / 시가) * 100
                if 일대비변동 <= -전략['매수하락률']:
                    매수신호 = True
                        
            elif 전략['매수기준'] == '2':  # 전일 종가 대비 하락
                if 일차 > 0:  # 첫날이 아닌 경우만
                    전일대비변동 = ((현재가격 - 전일종가) / 전일종가) * 100
                    if 전일대비변동 <= -전략['매수하락률']:
                        매수신호 = True
                else:  # 첫날은 초기가격 대비로 계산
                    초기대비변동 = ((현재가격 - self.초기가격) / self.초기가격) * 100
                    if 초기대비변동 <= -전략['매수하락률']:
                        매수신호 = True
                    
            elif 전략['매수기준'] == '3':  # 20일선 이탈
                if len(전략['이동평균']) >= 20:
                    평균가 = sum(전략['이동평균'][-20:]) / 20
                    평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                    if 평균대비 <= -전략['매수하락률']:
                        매수신호 = True
                        
            elif 전략['매수기준'] == '4':  # 60일선 이탈
                if len(전략['이동평균']) >= 60:
                    평균가 = sum(전략['이동평균'][-60:]) / 60
                    평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                    if 평균대비 <= -전략['매수하락률']:
                        매수신호 = True
                        
            elif 전략['매수기준'] == '5':  # 120일선 이탈
                if len(전략['이동평균']) >= 120:
                    평균가 = sum(전략['이동평균'][-120:]) / 120
                    평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                    if 평균대비 <= -전략['매수하락률']:
                        매수신호 = True
                        
            elif 전략['매수기준'] == '6':  # 시가 대비 상승
                시가 = self._시가_계산(일차)
                일대비변동 = ((현재가격 - 시가) / 시가) * 100
                if 일대비변동 >= 전략['매수상승률']:
                    매수신호 = True
                    
            elif 전략['매수기준'] == '7':  # 20일선 돌파 상승
                if len(전략['이동평균']) >= 20:
                    평균가 = sum(전략['이동평균'][-20:]) / 20
                    평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                    if 평균대비 >= 전략['매수상승률']:
                        매수신호 = True
                        
            elif 전략['매수기준'] == '8':  # 연속상승 매수
                if len(전략['이동평균']) >= 전략['연속횟수']:
                    연속상승 = self._연속상승_체크(전략['이동평균'], 전략['연속횟수'])
                    if 연속상승:
                        매수신호 = True
                        
            elif 전략['매수기준'] == '9':  # 모멘텀 매수
                if len(전략['이동평균']) >= 5:  # 최근 5일 모멘텀 체크
                    모멘텀 = self._모멘텀_계산(전략['이동평균'][-5:])
                    if 모멘텀 >= 전략['모멘텀기준']:
                        매수신호 = True
            
            if 매수신호:
                if 전략['구매방식'] == '1':  # 퍼센트 방식
                    매수금액 = 전략['자본'] * 전략['매수수량']
                else:  # 고정 주식수 방식
                    매수금액 = min(현재가격 * 전략['매수수량'], 전략['자본'])
                
                매수주식 = 매수금액 / 현재가격
                
                # 평균 매수가 계산 (기존 보유 + 신규 매수)
                기존총액 = 전략['주식수'] * 전략['매수가격'] if 전략['주식수'] > 0 else 0
                신규총액 = 매수주식 * 현재가격
                총보유주식 = 전략['주식수'] + 매수주식
                
                전략['주식수'] = 총보유주식
                전략['자본'] -= 매수금액
                전략['매수가격'] = (기존총액 + 신규총액) / 총보유주식  # 평균 매수가
                전략['거래내역'].append(('매수', 일차+1, 시간+1, 현재가격, 매수주식))
                거래발생 = True
        
        # 매도 체크
        if 전략['주식수'] > 0:
            수익률 = ((현재가격 - 전략['매수가격']) / 전략['매수가격']) * 100
            
            # 최고가 업데이트 (트레일링 스탑용)
            if 현재가격 > 전략['최고가격']:
                전략['최고가격'] = 현재가격
            
            if 전략['매도전략'] == '1' and not 전략['절반매도완료']:  # 분할 매도
                if 수익률 >= 전략['수익라인']:
                    매도주식 = 전략['주식수'] * 0.5
                    매도금액 = 매도주식 * 현재가격
                    전략['주식수'] -= 매도주식
                    전략['자본'] += 매도금액
                    전략['절반매도완료'] = True
                    전략['거래내역'].append(('절반매도', 일차+1, 시간+1, 현재가격, 매도주식))
                    거래발생 = True
                    
            elif 전략['매도전략'] == '2':  # 목표가 일괄 매도
                if 수익률 >= 전략['수익라인']:
                    매도금액 = 전략['주식수'] * 현재가격
                    전략['자본'] += 매도금액
                    전략['거래내역'].append(('전량매도', 일차+1, 시간+1, 현재가격, 전략['주식수']))
                    전략['주식수'] = 0
                    전략['매수가격'] = 0  # 매수가 초기화
                    전략['절반매도완료'] = False
                    전략['최고가격'] = 0
                    거래발생 = True
                    
            elif 전략['매도전략'] == '3':  # 존버 전략
                # 기간별 존버: 정해진 기간에 도달하면 매도
                매도기간 = 전략.get('매도기간', 134)  # 기본값: 134일차
                if 일차 == 매도기간:  # 정해진 기간에 매도
                    전략['자본'] += 전략['주식수'] * 현재가격
                    전략['거래내역'].append(('기간매도', 일차+1, 시간+1, 현재가격, 전략['주식수']))
                    전략['주식수'] = 0
                    거래발생 = True
                
            elif 전략['매도전략'] == '4':  # 고무줄 매도 시스템
                if '고무줄설정' in 전략:
                    거래발생 = self._고무줄_매도_처리(전략, 수익률, 현재가격, 일차, 시간)
                else:
                    # 기본값으로 처리 (혹시 설정이 없는 경우)
                    pass
        
        return 거래발생
    
    def _고무줄_매도_처리(self, 전략, 수익률, 현재가격, 일차, 시간):
        """고무줄 매도 시스템 - 수익률에 따른 차등 매도"""
        if 전략['주식수'] <= 0:
            return False
        
        설정 = 전략['고무줄설정']
        시작수익률 = 설정['시작수익률']
        단계간격 = 설정['단계간격']
        초기매도비율 = 설정['초기매도비율']
        비율증가량 = 설정['비율증가량']
        
        # 매도 레벨 별로 기록 (전략에 고무줄 상태 저장)
        if '고무줄상태' not in 전략:
            전략['고무줄상태'] = {
                '누적매도비율': 0,  # 지금까지 매도한 비율
                '다음매도레벨': 시작수익률  # 다음 매도 트리거 수익률
            }
        
        상태 = 전략['고무줄상태']
        
        # 현재 수익률이 다음 매도 레벨에 도달했는지 확인
        if 수익률 >= 상태['다음매도레벨'] and 상태['누적매도비율'] < 100:
            # 현재 레벨 계산 (0부터 시작)
            현재레벨 = int((상태['다음매도레벨'] - 시작수익률) / 단계간격)
            
            # 이번에 매도할 비율 계산
            현재매도비율 = 초기매도비율 + (비율증가량 * 현재레벨)
            현재매도비율 = min(현재매도비율, 100 - 상태['누적매도비율'])  # 100% 초과 방지
            
            # 실제 매도할 주식 수 계산 (전체 주식의 비율)
            원본주식수 = 전략['주식수'] / (1 - 상태['누적매도비율']/100) if 상태['누적매도비율'] < 100 else 전략['주식수']
            매도할주식 = 원본주식수 * (현재매도비율 / 100)
            매도할주식 = min(매도할주식, 전략['주식수'])  # 보유 주식 초과 방지
            
            if 매도할주식 > 0:
                # 매도 실행
                매도금액 = 매도할주식 * 현재가격
                전략['주식수'] -= 매도할주식
                전략['자본'] += 매도금액
                
                # 상태 업데이트
                상태['누적매도비율'] += 현재매도비율
                상태['다음매도레벨'] += 단계간격
                
                # 거래 기록
                매도타입 = f'고무줄{현재레벨+1}단계'
                전략['거래내역'].append((매도타입, 일차+1, 시간+1, 현재가격, 매도할주식))
                
                # 모든 주식을 매도했거나 100% 매도 완료 시 초기화
                if 전략['주식수'] <= 0.01 or 상태['누적매도비율'] >= 99:
                    전략['매수가격'] = 0
                    전략['최고가격'] = 0
                    전략['절반매도완료'] = False
                    상태['누적매도비율'] = 0
                    상태['다음매도레벨'] = 시작수익률
                    전략['주식수'] = 0  # 완전 정리
                
                return True
        
        return False
    
    def _전략설명_생성(self, 전략):
        """전략 설명 텍스트 생성"""
        매수기준 = 전략.get('매수기준명', '기본매수')
        매수하락률 = 전략.get('매수하락률', 0) if '하락' in 매수기준 else 0
        매수상승률 = 전략.get('매수상승률', 0) if '상승' in 매수기준 else 0
        구매방식 = 전략.get('구매방식명', '고정구매')
        매수수량 = 전략.get('매수수량', '')
        손절라인 = abs(전략.get('손절라인', 0))
        매도전략 = 전략.get('매도전략명', '기본매도')
        수익라인 = 전략.get('수익라인', 0)
        
        # 매수 조건 표시
        if 매수하락률 > 0:
            매수조건 = f"{매수기준}-{매수하락률}%"
        elif 매수상승률 > 0:
            매수조건 = f"{매수기준}+{매수상승률}%"
        else:
            매수조건 = 매수기준
        
        # 구매 방식과 수량 표시
        # 구매방식명에 이미 % 또는 주가 포함되어 있음
        if '주' in str(구매방식):
            구매설명 = 구매방식  # 예: '5주', '10주'
        elif '%' in str(구매방식):
            구매설명 = 구매방식  # 예: '10%', '30%', '50%'
        elif 전략.get('구매방식') == '1':  # 퍼센트 방식 (구매방식명이 없는 경우)
            구매설명 = f"{int(매수수량*100)}%"
        elif 전략.get('구매방식') == '2':  # 고정주식수 방식 (구매방식명이 없는 경우)
            구매설명 = f"{int(매수수량)}주"
        else:
            구매설명 = 구매방식
        
        # 매도 전략 표시
        if '고무줄설정' in 전략:
            설정 = 전략['고무줄설정']
            매도설명 = f"{매도전략}({설정['시작수익률']}%부터 {설정['단계간격']}%씩)"
        elif '분할' in 매도전략:
            매도설명 = f"분할{수익라인}%"
        elif '일괄' in 매도전략:
            매도설명 = f"일괄{수익라인}%"
        elif '트레일링' in 매도전략:
            매도설명 = f"트레일링{수익라인}%"
        elif '존버' in 매도전략:
            if '15일' in 매도전략:
                매도설명 = "15일존버"
            elif '30일' in 매도전략:
                매도설명 = "30일존버"
            elif '45일' in 매도전략:
                매도설명 = "45일존버"
            elif '90일' in 매도전략:
                매도설명 = "90일존버" 
            elif '120일' in 매도전략:
                매도설명 = "120일존버"
            elif '최종' in 매도전략:
                매도설명 = "최종존버"
            else:
                매도설명 = f"존버{수익라인}%"
        else:
            매도설명 = f"{매도전략}{수익라인}%"
        
        return f"{매수조건} + {구매설명} + 손절-{손절라인}% + {매도설명}"
    
    def _시가_계산(self, 일차):
        """해당 일의 시가 계산"""
        if 일차 == 0:
            return self.초기가격
        
        # 전일 종가 기준으로 시가 계산 (간단히 전일 마지막 가격 사용)
        이전일마지막시간 = (일차 - 1) * 6 + 5
        현재가격 = self.초기가격
        
        for i in range(이전일마지막시간 + 1):
            if i < len(self.시간데이터):
                현재가격 = 현재가격 * (1 + self.시간데이터[i]/100)
                현재가격 = int(현재가격 * 10) / 10
        
        return 현재가격
    
    def _연속상승_체크(self, 이동평균, 연속횟수):
        """연속 상승 여부 체크"""
        if len(이동평균) < 연속횟수:
            return False
        
        최근가격들 = 이동평균[-연속횟수:]
        for i in range(1, len(최근가격들)):
            if 최근가격들[i] <= 최근가격들[i-1]:
                return False
        return True
    
    def _모멘텀_계산(self, 가격들):
        """가격 모멘텀 계산 (최근 5일간의 상승률)"""
        if len(가격들) < 2:
            return 0
        
        초기가 = 가격들[0]
        최종가 = 가격들[-1]
        
        모멘텀 = ((최종가 - 초기가) / 초기가) * 100
        return 모멘텀
    
    def _일일결과_출력(self, 일일결과, 일차):
        """일일 시뮬레이션 결과 요약 출력"""
        # 일일수익률 기준으로 정렬
        일일정렬 = sorted(일일결과, key=lambda x: x['일수익률'], reverse=True)
        상위3 = 일일정렬[:3]
        하위3 = 일일정렬[-3:]
        
        # 전날 대비 주가 변동률 계산
        if 일차 > 0 and len(일일결과) > 0:
            # 첫 번째 전략의 이동평균으로 주가 변동 계산
            전략 = 일일결과[0]['전략']
            if len(전략['이동평균']) >= 2:
                현재가 = 전략['이동평균'][-1]
                전일가 = 전략['이동평균'][-2]
                변동률 = ((현재가 - 전일가) / 전일가) * 100
                변동표시 = f" {변동률:+.1f}%"
            else:
                변동표시 = ""
        else:
            변동표시 = ""
        
        print(f"\n{일차+1}일차 결과 요약 (총 {len(일일결과)}개 전략){변동표시}")
        print("="*50)
        
        # 상위 3개
        print("상위 3개 전략 (일일수익률 기준):")
        for i, 결과 in enumerate(상위3):
            전략 = 결과['전략']
            # 총 거래 내역 분석
            총거래내역 = 전략['거래내역']
            총매수 = len([t for t in 총거래내역 if t[0] == '매수'])
            총매도 = len([t for t in 총거래내역 if t[0] in ['절반매도', '전량매도', '최종매도', '수익매도', '트레일링스탑', '기간매도'] or '고무줄' in t[0]])
            총손절 = len([t for t in 총거래내역 if t[0] == '손절'])
            
            # 오늘 거래 분석 (일차 기준)
            오늘거래 = [t for t in 총거래내역 if t[1] == 일차+1]
            오늘매수 = len([t for t in 오늘거래 if t[0] == '매수'])
            오늘매도 = len([t for t in 오늘거래 if t[0] in ['절반매도', '전량매도', '최종매도', '수익매도', '트레일링스탑', '기간매도'] or '고무줄' in t[0]])
            오늘손절 = len([t for t in 오늘거래 if t[0] == '손절'])
            
            전략설명 = self._전략설명_생성(전략)
            # 보유 상태 표시
            보유상태 = f"보유{전략['주식수']:.0f}주" if 전략['주식수'] > 0 else "현금상태"
            print(f"{i+1}. [{전략설명}] (매수{오늘매수} 매도{오늘매도} 손절{오늘손절})")
            print(f"   일일: {결과['일수익률']:+.1f}% | 누적: {결과['수익률']:+.1f}% | {보유상태}")
        
        print("\n하위 3개 전략:")
        for i, 결과 in enumerate(하위3):
            전략 = 결과['전략']
            # 총 거래 내역 분석
            총거래내역 = 전략['거래내역']
            총매수 = len([t for t in 총거래내역 if t[0] == '매수'])
            총매도 = len([t for t in 총거래내역 if t[0] in ['절반매도', '전량매도', '최종매도', '수익매도', '트레일링스탑', '기간매도'] or '고무줄' in t[0]])
            총손절 = len([t for t in 총거래내역 if t[0] == '손절'])
            
            # 오늘 거래 분석 (일차 기준)
            오늘거래 = [t for t in 총거래내역 if t[1] == 일차+1]
            오늘매수 = len([t for t in 오늘거래 if t[0] == '매수'])
            오늘매도 = len([t for t in 오늘거래 if t[0] in ['절반매도', '전량매도', '최종매도', '수익매도', '트레일링스탑', '기간매도'] or '고무줄' in t[0]])
            오늘손절 = len([t for t in 오늘거래 if t[0] == '손절'])
            
            전략설명 = self._전략설명_생성(전략)
            # 보유 상태 표시
            보유상태 = f"보유{전략['주식수']:.0f}주" if 전략['주식수'] > 0 else "현금상태"
            print(f"{len(일일정렬)-2+i}. [{전략설명}] (매수{오늘매수} 매도{오늘매도} 손절{오늘손절})")
            print(f"   일일: {결과['일수익률']:+.1f}% | 누적: {결과['수익률']:+.1f}% | {보유상태}")
        
        # 통계 요약
        일일수익률들 = [r['일수익률'] for r in 일일결과]
        총수익률들 = [r['수익률'] for r in 일일결과]
        print(f"\n전체 {len(일일결과)}개 전략 통계 (탈락 포함):")
        print(f"일일: 최고 {max(일일수익률들):+.1f}% | 최저 {min(일일수익률들):+.1f}% | 평균 {sum(일일수익률들)/len(일일수익률들):+.1f}%")
        print(f"누적: 최고 {max(총수익률들):+.1f}% | 최저 {min(총수익률들):+.1f}% | 평균 {sum(총수익률들)/len(총수익률들):+.1f}%")
    
    def _최종결과_분석(self, 생존전략, 탈락기록):
        """최종 생존 전략들과 탈락 분석"""
        print(f"\n{'='*80}")
        print(f"최종 결과 분석")
        print(f"{'='*80}")
        
        print(f"\n최종 생존 전략 ({len(생존전략)}개): 요약만 표시")
        
        # 탈락 분석
        print(f"\n탈락 분석:")
        탈락일별 = {}
        for 탈락 in 탈락기록:
            일차 = 탈락['탈락일']
            if 일차 not in 탈락일별:
                탈락일별[일차] = 0
            탈락일별[일차] += 1
        
        for 일차 in sorted(탈락일별.keys()):
            print(f"  {일차}일차: {탈락일별[일차]}개 전략 탈락")
        
        # 전략 패턴 분석 - 생략
        
        # 최고 성과 전략 상세 분석
        if 생존전략:
            최고전략 = max(생존전략, key=lambda x: ((x['자본'] + x['주식수'] * (x['이동평균'][-1] if x['이동평균'] else self.초기가격)) - 100000) / 100000 * 100)
            
            print(f"\n⭐ 최고 성과 전략 상세:")
            평가자산 = 최고전략['자본'] + 최고전략['주식수'] * (최고전략['이동평균'][-1] if 최고전략['이동평균'] else self.초기가격)
            수익률 = ((평가자산 - 100000) / 100000) * 100
            
            print(f"전략: {최고전략['매수기준명']}-{최고전략['매수하락률']}% + {최고전략['구매방식명']} + 손절{최고전략['손절라인']}% + {최고전략['매도전략명']}")
            print(f"최종 수익률: {수익률:+.1f}%")
            print(f"최종 자산: {평가자산:,.0f}원")
            print(f"총 거래 횟수: {len(최고전략['거래내역'])}회")
            
            # 거래 내역 - 생략
            
            # 거래 통계 분석 추가
            self._거래통계_분석(생존전략)
            
            # 최고전략을 히스토리에 저장
            self._최고전략_히스토리_저장(최고전략, "단일시뮬레이션", {
                '생존전략수': len(생존전략),
                '탈락전략수': len(탈락기록)
            })
            
            return 최고전략
        
        return None
    
    def _최고전략_히스토리_저장(self, 생존전략들, 시뮬레이션타입, 추가정보=None):
        """상위 15개 최고 전략을 체계적으로 분석하여 히스토리에 저장"""
        # 상위 15개 전략 추출 및 분석
        상위15전략 = self._상위15전략_분석(생존전략들)
        
        # 시장 상황 분석
        시장상황 = self._시장상황_분석()
        
        # 전략 그룹화 (비슷한 전략들을 범위로 묶음)
        전략그룹들 = self._전략_그룹화(상위15전략)
        
        # 새로운 히스토리 데이터 생성
        새로운_기록 = {
            '발견날짜': time.strftime("%Y-%m-%d %H:%M:%S"),
            '시뮬레이션타입': 시뮬레이션타입,
            '시장상황': 시장상황,
            '최고전략_순위': []
        }
        
        # 각 그룹별로 대표 전략과 범위 정보 저장
        순위 = 1
        for 그룹 in 전략그룹들:
            그룹정보 = self._그룹정보_생성(그룹, 순위, 시장상황)
            새로운_기록['최고전략_순위'].append(그룹정보)
            순위 += len(그룹['전략들'])
        탈락점수 = 이전탈락횟수 * 2
        총점수 = 옐로우카드수 + 탈락점수
        
        if 이전탈락횟수 >= 5:
            # 5회 이상 탈락: 옐로우카드와 합산하여 영구 제외 판정
            영구제외대상 = 총점수 >= 12
            제외유형 = "영구제외" if 영구제외대상 else "계속진행"
        else:
            # 4회 이하 탈락: 일시 제외 (빠른 계산 제외)
            영구제외대상 = False
            제외유형 = "일시제외" if 이전탈락횟수 > 0 else "정상진행"
        
        # 새로운 히스토리 엔트리
        새로운_기록 = {
            '발견날짜': time.strftime("%Y-%m-%d %H:%M:%S"),
            '시뮬레이션타입': 시뮬레이션타입,
            '전략정보': {
                '매수기준': 최고전략['매수기준명'],
                '매수하락률': 최고전략['매수하락률'],
                '구매방식': 최고전략['구매방식명'],
                '손절라인': 최고전략['손절라인'],
                '매도전략': 최고전략['매도전략명'],
                '수익라인': 최고전략.get('수익라인', 0)
            },
            '성과': {
                '수익률': round(수익률, 2),
                '최종자산': int(평가자산),
                '거래횟수': len(최고전략['거래내역']),
                '승률': self._승률_계산(최고전략['거래내역']) if 최고전략['거래내역'] else 0
            },
            '시장환경': {
                '초기가격': self.초기가격,
                '최종가격': 최고전략['이동평균'][-1] if 최고전략['이동평균'] else self.초기가격,
                '시장수익률': round(((최고전략['이동평균'][-1] if 최고전략['이동평균'] else self.초기가격) - self.초기가격) / self.초기가격 * 100, 2) if 최고전략['이동평균'] else 0
            },
            '추가정보': {
                '매수횟수': 매수횟수,
                '매도횟수': 매도횟수,
                '손절횟수': 손절횟수,
                '옐로우카드수': 옐로우카드수,
                '이전탈락횟수': 이전탈락횟수,
                '탈락점수': 탈락점수,
                '총점수': 총점수,
                '제외유형': 제외유형,
                '영구제외대상': 영구제외대상,
                '제외사유': self._제외사유_생성(이전탈락횟수, 옐로우카드수, 탈락점수, 총점수, 제외유형, 영구제외대상)
            }
        }
        
        # 기존 히스토리 로드
        히스토리_파일 = "최고전략_히스토리.json"
        기존히스토리 = []
        
        try:
            if os.path.exists(히스토리_파일):
                with open(히스토리_파일, 'r', encoding='utf-8') as f:
                    로드된데이터 = json.load(f)
                    # 리스트인지 확인하고 딕셔너리면 리스트로 변환
                    if isinstance(로드된데이터, list):
                        기존히스토리 = 로드된데이터
                    else:
                        기존히스토리 = []  # 딕셔너리면 새로 시작
        except:
            print("  기존 히스토리 로드 실패, 새로 시작")
        
        # 새 기록 추가
        기존히스토리.append(새로운_기록)
        
        # 저장 (최근 50개만 유지)
        if len(기존히스토리) > 50:
            기존히스토리 = 기존히스토리[-50:]
        
        try:
            with open(히스토리_파일, 'w', encoding='utf-8') as f:
                json.dump(기존히스토리, f, ensure_ascii=False, indent=2)
            
            print(f"\n최고전략 히스토리 저장 완료")
            print(f"   전략: {최고전략['매수기준명']}-{최고전략['매수하락률']}% + {최고전략['매도전략명']}")
            # 거래 내역 분석
            거래내역 = 최고전략['거래내역']
            매수횟수 = len([t for t in 거래내역 if t[0] == '매수'])
            매도횟수 = len([t for t in 거래내역 if t[0] in ['절반매도', '전량매도', '최종매도', '수익매도', '고무줄매도', '트레일링스탑']])
            손절횟수 = len([t for t in 거래내역 if t[0] == '손절'])
            
            print(f"   수익률: {수익률:+.1f}% | 총 거래: {매수횟수+매도횟수+손절횟수}회 (매수:{매수횟수}, 매도:{매도횟수}, 손절:{손절횟수})")
            print(f"   총 기록: {len(기존히스토리)}개")
            
        except Exception as e:
            print(f"최고전략 히스토리 저장 실패: {e}")
    
    def _실시간_영구제외_확인(self, 전략, 탈락일):
        """실시간으로 영구 제외 조건 확인 및 JSON 저장"""
        try:
            # 현재 성과 계산
            평가자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
            수익률 = ((평가자산 - 100000) / 100000) * 100
            
            # 거래 내역 분석
            거래내역 = 전략['거래내역']
            매수횟수 = len([t for t in 거래내역 if t[0] == '매수'])
            매도횟수 = len([t for t in 거래내역 if t[0] in ['절반매도', '전량매도', '최종매도', '수익매도', '고무줄매도', '트레일링스탑']])
            손절횟수 = len([t for t in 거래내역 if t[0] == '손절'])
            옐로우카드수 = 전략.get('옐로우카드', {}).get('개수', 0)
            탈락횟수 = 전략.get('탈락횟수', 0)
            
            # 영구 제외 조건 확인
            탈락점수 = 탈락횟수 * 2
            총점수 = 옐로우카드수 + 탈락점수
            
            if 탈락횟수 >= 5:
                영구제외대상 = 총점수 >= 12
                제외유형 = "영구제외" if 영구제외대상 else "계속진행"
            else:
                영구제외대상 = False
                제외유형 = "일시제외" if 탈락횟수 > 0 else "정상진행"
            
            # 영구제외 대상만 JSON에 저장
            if 영구제외대상:
                제외기록 = {
                    '발견날짜': time.strftime("%Y-%m-%d %H:%M:%S"),
                    '시뮬레이션타입': '실시간탈락',
                    '탈락일': 탈락일,
                    '전략정보': {
                        '매수기준': 전략['매수기준명'],
                        '매수하락률': 전략['매수하락률'],
                        '구매방식': 전략['구매방식명'],
                        '손절라인': 전략['손절라인'],
                        '매도전략': 전략['매도전략명'],
                        '수익라인': 전략.get('수익라인', 0)
                    },
                    '성과': {
                        '수익률': round(수익률, 2),
                        '최종자산': int(평가자산),
                        '거래횟수': len(전략['거래내역']),
                        '승률': self._승률_계산(전략['거래내역']) if 전략['거래내역'] else 0
                    },
                    '시장환경': {
                        '초기가격': self.초기가격,
                        '최종가격': 전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격,
                        '시장수익률': round(((전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격) - self.초기가격) / self.초기가격 * 100, 2) if 전략['이동평균'] else 0
                    },
                    '추가정보': {
                        '매수횟수': 매수횟수,
                        '매도횟수': 매도횟수,
                        '손절횟수': 손절횟수,
                        '옐로우카드수': 옐로우카드수,
                        '탈락횟수': 탈락횟수,
                        '탈락점수': 탈락점수,
                        '총점수': 총점수,
                        '제외유형': 제외유형,
                        '영구제외대상': True,
                        '제외사유': f"탈락{탈락횟수}회(×2={탈락점수}점) + 옐로우카드{옐로우카드수}개 = {총점수}점 (영구제외)"
                    }
                }
                
                # 영구제외 전략 JSON 파일에 저장
                영구제외_파일 = "영구제외_전략_히스토리.json"
                기존기록 = []
                
                try:
                    if os.path.exists(영구제외_파일):
                        with open(영구제외_파일, 'r', encoding='utf-8') as f:
                            기존기록 = json.load(f)
                except:
                    pass
                
                기존기록.append(제외기록)
                
                # 최근 100개만 유지
                if len(기존기록) > 100:
                    기존기록 = 기존기록[-100:]
                
                with open(영구제외_파일, 'w', encoding='utf-8') as f:
                    json.dump(기존기록, f, ensure_ascii=False, indent=2)
                
                print(f"   영구제외 저장: {전략['매수기준명']}-{전략['매수하락률']}% (탈락{탈락횟수}회+옐로우{옐로우카드수}개={총점수}점)")
                
        except Exception as e:
            print(f"   영구제외 확인 실패: {e}")
    
    def _제외사유_생성(self, 탈락횟수, 옐로우카드수, 탈락점수, 총점수, 제외유형, 영구제외대상):
        """제외 사유 메시지 생성"""
        if 제외유형 == "정상진행":
            return None
        elif 제외유형 == "일시제외":
            return f"탈락{탈락횟수}회 (4회 이하 일시제외)"
        elif 제외유형 == "계속진행":
            return f"탈락{탈락횟수}회(×2={탈락점수}점) + 옐로우카드{옐로우카드수}개 = {총점수}점 (12점 미만)"
        elif 제외유형 == "영구제외" and 영구제외대상:
            return f"탈락{탈락횟수}회(×2={탈락점수}점) + 옐로우카드{옐로우카드수}개 = {총점수}점 (영구제외)"
        else:
            return f"알수없음: {제외유형}"
    
    def _승률_계산(self, 거래내역):
        """거래 승률 계산"""
        if not 거래내역 or len(거래내역) < 2:
            return 0
        
        매수거래 = {}
        수익거래 = 0
        총매도거래 = 0
        
        for 거래 in 거래내역:
            거래유형, 일차, 시간, 가격, 수량 = 거래
            
            if 거래유형 == '매수':
                if 일차 not in 매수거래:
                    매수거래[일차] = []
                매수거래[일차].append((가격, 수량))
            elif 거래유형 == '매도':
                # 간단히 매수 평균가와 비교
                if 매수거래:
                    총매수금액 = sum(가격 * 수량 for 일차_거래 in 매수거래.values() for 가격, 수량 in 일차_거래)
                    총매수수량 = sum(수량 for 일차_거래 in 매수거래.values() for _, 수량 in 일차_거래)
                    if 총매수수량 > 0:
                        평균매수가 = 총매수금액 / 총매수수량
                        if 가격 > 평균매수가:
                            수익거래 += 1
                        총매도거래 += 1
        
        return round((수익거래 / 총매도거래 * 100) if 총매도거래 > 0 else 0, 1)
    
    def _거래통계_분석(self, 전략들):
        """전략들의 거래 통계 분석"""
        print(f"\n거래 통계 분석 ({len(전략들)}개 전략)")
        print("="*60)
        
        총매수 = 0
        총매도 = 0  
        총손절 = 0
        총존버 = 0
        거래유형별 = {}
        
        for 전략 in 전략들[:10]:  # 상위 10개만 분석
            매수횟수 = 0
            매도횟수 = 0
            손절횟수 = 0
            
            for 거래 in 전략['거래내역']:
                거래유형 = 거래[0]
                if 거래유형 == '매수':
                    매수횟수 += 1
                elif '매도' in 거래유형:
                    매도횟수 += 1
                elif '손절' in 거래유형:
                    손절횟수 += 1
                
                거래유형별[거래유형] = 거래유형별.get(거래유형, 0) + 1
            
            총매수 += 매수횟수
            총매도 += 매도횟수
            총손절 += 손절횟수
            
            if len(전략['거래내역']) == 0:
                총존버 += 1
            
            # 개별 전략 요약
            평가자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
            수익률 = ((평가자산 - 100000) / 100000) * 100
            
            if len(전략들) <= 5:  # 5개 이하면 개별 표시
                print(f"{전략['매수기준명']}-{전략['매수하락률']}%+{전략['매도전략명']}")
                print(f"   매수:{매수횟수}회 | 매도:{매도횟수}회 | 손절:{손절횟수}회 | 수익률:{수익률:+.1f}%")
        
        print(f"\n🎯 통계 요약:")
        print(f"총 매수: {총매수}회")
        print(f"총 매도: {총매도}회") 
        print(f"총 손절: {총손절}회")
        print(f"거래 없음: {총존버}개 전략")
        
        if 총매수 > 0:
            print(f"매도율: {총매도/총매수*100:.1f}%")
            print(f"손절율: {총손절/총매수*100:.1f}%")
        
        print(f"\n거래 유형별 세부:")
        for 유형, 횟수 in sorted(거래유형별.items()):
            print(f"  {유형}: {횟수}회")
    
    def _최고전략_히스토리_조회(self):
        """저장된 최고 전략 히스토리 조회"""
        히스토리_파일 = "최고전략_히스토리.json"
        
        try:
            if os.path.exists(히스토리_파일):
                with open(히스토리_파일, 'r', encoding='utf-8') as f:
                    히스토리 = json.load(f)
                
                if not 히스토리:
                    print("저장된 최고 전략이 없습니다.")
                    return
                
                print(f"\n{'='*80}")
                print(f"최고 전략 히스토리 ({len(히스토리)}개)")
                print(f"{'='*80}")
                
                # 시뮬레이션 타입별로 그룹화
                타입별_기록 = {}
                for 기록 in 히스토리:
                    타입 = 기록['시뮬레이션타입']
                    if 타입 not in 타입별_기록:
                        타입별_기록[타입] = []
                    타입별_기록[타입].append(기록)
                
                for 타입, 기록들 in 타입별_기록.items():
                    print(f"\n🏆 {타입} ({len(기록들)}개):")
                    
                    # 최근 5개만 표시
                    for 기록 in 기록들[-5:]:
                        전략 = 기록['전략정보']
                        성과 = 기록['성과']
                        환경 = 기록['시장환경']
                        
                        print(f"  {기록['발견날짜']}")
                        print(f"     전략: {전략['매수기준']}-{전략['매수하락률']}% + {전략['매도전략']}")
                        print(f"     수익률: {성과['수익률']:+.1f}% | 거래: {성과['거래횟수']}회 | 승률: {성과['승률']}%")
                        print(f"     시장: {환경['시장수익률']:+.1f}% | 초기: {환경['초기가격']:.0f}원 → 최종: {환경['최종가격']:.0f}원")
                        
                        if 기록.get('추가정보') and '시나리오별성과' in 기록['추가정보']:
                            시나리오성과 = 기록['추가정보']['시나리오별성과']
                            print(f"     극한테스트: {len(시나리오성과)}개 시나리오, 평균 {sum(시나리오성과.values())/len(시나리오성과):+.1f}%")
                        print()
                
                return 히스토리
            else:
                print("아직 저장된 최고 전략이 없습니다.")
                return []
                
        except Exception as e:
            print(f"히스토리 조회 실패: {e}")
            return []
    
    def _히스토리_전략_재검증(self, 환경이름="현재환경"):
        """기존 최고 전략들을 현재 시장 환경에서 재검증"""
        히스토리 = self._최고전략_히스토리_조회()
        
        if not 히스토리:
            return
        
        print(f"\n{'='*80}")
        print(f"히스토리 전략 재검증: {환경이름}")
        print(f"{'='*80}")
        
        # 히스토리에서 고유한 전략들만 추출
        고유전략들 = []
        전략키들 = set()
        
        for 기록 in 히스토리:
            전략정보 = 기록['전략정보']
            키 = f"{전략정보['매수기준']}-{전략정보['매수하락률']}-{전략정보['구매방식']}-{전략정보['손절라인']}-{전략정보['매도전략']}"
            
            if 키 not in 전략키들:
                전략키들.add(키)
                
                # 전략 객체 재구성
                재구성전략 = {
                    '매수기준': '1' if '시가' in 전략정보['매수기준'] else '2' if '전일' in 전략정보['매수기준'] else '3' if '20일' in 전략정보['매수기준'] else '4' if '60일' in 전략정보['매수기준'] else '5',
                    '매수기준명': 전략정보['매수기준'],
                    '매수하락률': 전략정보['매수하락률'],
                    '구매방식': '1',
                    '구매방식명': 전략정보['구매방식'],
                    '매수수량': 0.1 if '10%' in 전략정보['구매방식'] else 0.3 if '30%' in 전략정보['구매방식'] else 0.5,
                    '손절라인': 전략정보['손절라인'],
                    '매도전략': '1' if '수익률' in 전략정보['매도전략'] else '2',
                    '매도전략명': 전략정보['매도전략'],
                    '수익라인': 전략정보.get('수익라인', 10),
                    '자본': 100000,
                    '주식수': 0,
                    '매수가격': 0,
                    '최고가격': 0,
                    '절반매도완료': False,
                    '이동평균': self.과거데이터.copy(),
                    '거래내역': [],
                    '가격기록': [],
                    '원본기록': 기록  # 원본 히스토리 참조
                }
                고유전략들.append(재구성전략)
        
        print(f"재검증할 고유 전략: {len(고유전략들)}개")
        
        # 현재 시장 데이터로 재검증
        재검증결과 = []
        
        for 전략 in 고유전략들:
            # 5주 시뮬레이션 실행
            임시전략 = self._전략_초기화(전략)
            
            for 일차 in range(135):  # 27주 = 135일
                self._일일_시뮬레이션(임시전략, 일차)
            
            # 결과 계산
            최종평가 = 임시전략['자본'] + 임시전략['주식수'] * (임시전략['이동평균'][-1] if 임시전략['이동평균'] else self.초기가격)
            수익률 = ((최종평가 - 100000) / 100000) * 100
            
            재검증결과.append({
                '전략': 전략,
                '수익률': 수익률,
                '거래횟수': len(임시전략['거래내역']),
                '원본성과': 전략['원본기록']['성과']['수익률'],
                '성과차이': 수익률 - 전략['원본기록']['성과']['수익률']
            })
        
        # 결과 정렬 및 출력
        재검증결과.sort(key=lambda x: x['수익률'], reverse=True)
        
        print(f"\n재검증 결과:")
        print("-" * 100)
        print(f"{'순위':<4} {'전략명':<40} {'현재수익률':<10} {'원본수익률':<10} {'성과차이':<10} {'거래횟수':<8}")
        print("-" * 100)
        
        for i, 결과 in enumerate(재검증결과[:10]):  # 상위 10개만
            전략 = 결과['전략']
            print(f"{i+1:<4} {전략['매수기준명']}-{전략['매수하락률']}%+{전략['매도전략명']:<25} "
                  f"{결과['수익률']:+7.1f}% {결과['원본성과']:+9.1f}% {결과['성과차이']:+8.1f}% {결과['거래횟수']:>7}회")
        
        # 최고 재검증 전략 저장
        if 재검증결과:
            최고재검증 = 재검증결과[0]
            추가정보 = {
                '재검증환경': 환경이름,
                '원본성과': 최고재검증['원본성과'],
                '성과차이': 최고재검증['성과차이'],
                '재검증전략수': len(재검증결과)
            }
            self._최고전략_히스토리_저장(최고재검증['전략'], '재검증', 추가정보)
    
    def _극한검증_시뮬레이션(self, 후보전략들):
        """극한 환경에서 최종 검증"""
        print(f"\n{'='*80}")
        print(f"2단계 극한 검증 시뮬레이션")
        print(f"{'='*80}")
        
        # 다양한 극한 환경 시나리오
        극한시나리오들 = [
            {'이름': '극심한변동성', '설명': '주별 ±50% 변동', '주변동범위': 50},
            {'이름': '장기하락장', '설명': '전체 -40% 추세', '주변동범위': 25, '추세': -2.0},
            {'이름': '장기상승장', '설명': '전체 +50% 추세', '주변동범위': 25, '추세': +2.5},
            {'이름': '극한횡보장', '설명': '변동폭 ±3% 제한', '주변동범위': 3},
            {'이름': '급락급등장', '설명': '일별 ±15% 변동', '주변동범위': 20, '일변동': 15},
            {'이름': '패턴반복장', '설명': '주별 +10,-5,+8,-3,+6 패턴', '패턴': [10,-5,8,-3,6]}
        ]
        
        전략별점수 = {i: 0 for i in range(len(후보전략들))}
        시나리오별결과 = []
        
        for 시나리오 in 극한시나리오들:
            print(f"\n{시나리오['이름']}: {시나리오['설명']}")
            
            # 시나리오별 데이터 생성
            시나리오데이터 = self._시나리오_데이터_생성(시나리오)
            
            # 각 후보 전략 테스트
            시나리오결과 = []
            for i, 전략 in enumerate(후보전략들):
                # 전략 초기화
                테스트전략 = self._전략_초기화(전략)
                
                # 135일 (27주) 시뮬레이션
                for 일차 in range(135):
                    self._일일_시뮬레이션_시나리오(테스트전략, 일차, 시나리오데이터)
                
                # 최종 결과 계산
                최종평가 = 테스트전략['자본'] + 테스트전략['주식수'] * (테스트전략['이동평균'][-1] if 테스트전략['이동평균'] else self.초기가격)
                수익률 = ((최종평가 - 100000) / 100000) * 100
                
                시나리오결과.append({
                    '전략번호': i,
                    '전략': 전략,
                    '수익률': 수익률,
                    '최종자산': 최종평가
                })
            
            # 시나리오 결과 정렬 및 점수 부여
            시나리오결과.sort(key=lambda x: x['수익률'], reverse=True)
            for 순위, 결과 in enumerate(시나리오결과):
                점수 = len(후보전략들) - 순위  # 1등: 최고점수, 꼴등: 1점
                전략별점수[결과['전략번호']] += 점수
            
            # 시나리오별 TOP3 출력
            print("  TOP 3 결과:")
            for i, 결과 in enumerate(시나리오결과[:3]):
                전략 = 결과['전략']
                print(f"  {i+1}. [{전략['매수기준명']}-{전략['매수하락률']}%+{전략['매도전략명']}] → {결과['수익률']:+.1f}%")
            
            시나리오별결과.append(시나리오결과)
        
        # 최종 종합 순위
        print(f"\n{'='*60}")
        print(f"극한 검증 종합 순위")
        print(f"{'='*60}")
        
        종합순위 = [(전략번호, 점수) for 전략번호, 점수 in 전략별점수.items()]
        종합순위.sort(key=lambda x: x[1], reverse=True)
        
        print("순위 | 전략 | 종합점수 | 평균수익률")
        print("-"*60)
        
        for 순위, (전략번호, 종합점수) in enumerate(종합순위):
            전략 = 후보전략들[전략번호]
            
            # 평균 수익률 계산
            수익률들 = []
            for 시나리오결과 in 시나리오별결과:
                for 결과 in 시나리오결과:
                    if 결과['전략번호'] == 전략번호:
                        수익률들.append(결과['수익률'])
            평균수익률 = sum(수익률들) / len(수익률들)
            
            print(f"{순위+1:2d}위 | [{전략['매수기준명']}-{전략['매수하락률']}%+{전략['매도전략명']}] | {종합점수:2d}점 | {평균수익률:+.1f}%")
        
        # 최고 전략 상세 분석
        최고전략번호 = 종합순위[0][0]
        최고전략 = 후보전략들[최고전략번호]
        
        print(f"\n극한 검증 최고 전략:")
        print(f"전략: {최고전략['매수기준명']}-{최고전략['매수하락률']}% + {최고전략['구매방식명']} + 손절{최고전략['손절라인']}% + {최고전략['매도전략명']}")
        print(f"종합 점수: {종합순위[0][1]}점 / {len(극한시나리오들) * len(후보전략들)}점 만점")
        
        print(f"\n시나리오별 성과:")
        시나리오별성과 = {}
        for i, 시나리오 in enumerate(극한시나리오들):
            for 결과 in 시나리오별결과[i]:
                if 결과['전략번호'] == 최고전략번호:
                    시나리오별성과[시나리오['이름']] = 결과['수익률']
                    print(f"  {시나리오['이름']}: {결과['수익률']:+.1f}%")
        
        # 극한 검증 최고 전략 히스토리 저장
        추가정보 = {
            '종합점수': 종합순위[0][1],
            '만점': len(극한시나리오들) * len(후보전략들),
            '시나리오별성과': 시나리오별성과,
            '테스트시나리오': len(극한시나리오들)
        }
        self._최고전략_히스토리_저장(최고전략, '극한검증', 추가정보)
        
        # 상황별 최적 전략 분석
        상황별최적전략 = self._상황별_최적전략_분석(후보전략들, 시나리오별결과, 극한시나리오들)
        
        # 검증된 전략 세트 저장
        검증완료전략 = {
            '최종검증완료': True,
            '검증일시': time.strftime("%Y-%m-%d %H:%M:%S"),
            '종합최고전략': 최고전략,
            '상황별최적전략': 상황별최적전략,
            '전체순위': [(후보전략들[전략번호], 점수) for 전략번호, 점수 in 종합순위]
        }
        
        try:
            with open("전략포트폴리오.json", 'w', encoding='utf-8') as f:
                # JSON 직렬화 가능한 형태로 변환
                저장데이터 = {
                    '검증일시': 검증완료전략['검증일시'],
                    '종합최고전략': self._전략_직렬화(최고전략, 종합순위[0][1]),
                    '상황별최적전략': {}
                }
                
                # 상황별 전략 저장
                for 상황, 전략정보 in 상황별최적전략.items():
                    저장데이터['상황별최적전략'][상황] = {
                        '전략': self._전략_직렬화(전략정보['전략'], 0),
                        '수익률': 전략정보['수익률'],
                        '설명': 전략정보['설명']
                    }
                
                json.dump(저장데이터, f, ensure_ascii=False, indent=2)
            print(f"\n극한 검증 완료! 전략 포트폴리오가 '전략포트폴리오.json'에 저장되었습니다.")
        except Exception as e:
            print(f"검증 결과 저장 실패: {e}")
    
    def _상황별_최적전략_분석(self, 후보전략들, 시나리오별결과, 극한시나리오들):
        """각 상황별로 최적 전략 찾기"""
        print(f"\n{'='*60}")
        print(f"상황별 최적 전략 분석")
        print(f"{'='*60}")
        
        상황별최적전략 = {}
        
        for i, 시나리오 in enumerate(극한시나리오들):
            시나리오결과 = 시나리오별결과[i]
            최적결과 = max(시나리오결과, key=lambda x: x['수익률'])
            최적전략 = 최적결과['전략']
            
            상황별최적전략[시나리오['이름']] = {
                '전략': 최적전략,
                '수익률': 최적결과['수익률'],
                '설명': 시나리오['설명']
            }
            
            print(f"\n{시나리오['이름']} ({시나리오['설명']}):")
            print(f"   최적전략: [{최적전략['매수기준명']}-{최적전략['매수하락률']}% + {최적전략['구매방식명']} + 손절{최적전략['손절라인']}% + {최적전략['매도전략명']}]")
            print(f"   수익률: {최적결과['수익률']:+.1f}%")
        
        # 전략 다양성 분석
        print(f"\n전략 다양성 분석:")
        전략세트 = set()
        for 상황, 전략정보 in 상황별최적전략.items():
            전략키 = self._전략을_키로_변환(전략정보['전략'])
            전략세트.add(전략키)
        
        print(f"   총 {len(상황별최적전략)}개 상황 중 {len(전략세트)}개의 서로 다른 전략 필요")
        
        if len(전략세트) == 1:
            print(f"   모든 상황에 만능인 전략 발견!")
        elif len(전략세트) <= 3:
            print(f"   소수 전략으로 모든 상황 대응 가능")
        else:
            print(f"   상황별로 다른 전략 필요 (다양성 높음)")
        
        return 상황별최적전략
    
    def _전략_직렬화(self, 전략, 점수):
        """전략을 JSON 저장 가능한 형태로 변환"""
        return {
            '매수기준': 전략['매수기준'],
            '매수기준명': 전략['매수기준명'],
            '매수하락률': 전략['매수하락률'],
            '구매방식': 전략['구매방식'],
            '구매방식명': 전략['구매방식명'],
            '매수수량': 전략['매수수량'],
            '손절라인': 전략['손절라인'],
            '매도전략': 전략['매도전략'],
            '매도전략명': 전략['매도전략명'],
            '수익라인': 전략['수익라인'],
            '점수': 점수
        }
    
    def _시나리오_데이터_생성(self, 시나리오):
        """시나리오별 특수 데이터 생성"""
        if '패턴' in 시나리오:
            # 패턴 반복 모드
            주별데이터 = 시나리오['패턴'].copy()
        else:
            # 일반 랜덤 생성
            주별데이터 = []
            for 주차 in range(5):
                if '추세' in 시나리오:
                    # 추세가 있는 경우
                    기본변동 = random.uniform(-시나리오['주변동범위'], 시나리오['주변동범위'])
                    추세변동 = 시나리오['추세'] * (주차 + 1)  # 시간에 따른 추세 강화
                    변동률 = 기본변동 + 추세변동
                else:
                    # 일반 랜덤 변동
                    변동률 = random.uniform(-시나리오['주변동범위'], 시나리오['주변동범위'])
                주별데이터.append(변동률)
        
        # 계층적 데이터 생성
        임시분석기 = 최적화투자분석(self.초기가격)
        임시분석기.계층적_변동률_생성(주별데이터)
        
        # 특수 변동 적용
        if '일변동' in 시나리오:
            # 일별 극한 변동 추가
            for i in range(len(임시분석기.일간데이터)):
                극한변동 = random.uniform(-시나리오['일변동'], 시나리오['일변동'])
                임시분석기.일간데이터[i] += 극한변동
        
        return 임시분석기.시간데이터
    
    def _전략_초기화(self, 원본전략):
        """전략 복사 및 초기화"""
        return {
            '매수기준': 원본전략['매수기준'],
            '매수기준명': 원본전략['매수기준명'],
            '매수하락률': 원본전략['매수하락률'],
            '구매방식': 원본전략['구매방식'],
            '구매방식명': 원본전략['구매방식명'],
            '매수수량': 원본전략['매수수량'],
            '손절라인': 원본전략['손절라인'],
            '매도전략': 원본전략['매도전략'],
            '매도전략명': 원본전략['매도전략명'],
            '수익라인': 원본전략['수익라인'],
            '자본': 100000,
            '주식수': 0,
            '매수가격': 0,
            '최고가격': 0,
            '절반매도완료': False,
            '이동평균': self.과거데이터.copy(),  # 과거 120일 데이터로 초기화
            '거래내역': []
        }
    
    def _일일_시뮬레이션_시나리오(self, 전략, 일차, 시나리오데이터):
        """시나리오 데이터를 사용한 일일 시뮬레이션"""
        # 기존 일일 시뮬레이션과 동일하지만 시나리오데이터 사용
        전일종가 = 전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격
        현재가격 = 전일종가
        
        for 시간 in range(7):
            시간인덱스 = 일차 * 7 + 시간
            if 시간인덱스 >= len(시나리오데이터):
                break
                
            변동률 = 시나리오데이터[시간인덱스]
            현재가격 = 현재가격 * (1 + 변동률/100)
            현재가격 = int(현재가격 * 10) / 10
            
            # 매매 로직 실행 (첫 시간 제요)
            if 시간 > 0:  # 첫 번째 시간은 매수/매도 금지
                self._전략_매매_실행_시나리오(전략, 현재가격, 전일종가, 일차, 시간, 시나리오데이터)
        
        # 이동평균 업데이트 (최대 120일 유지)
        전략['이동평균'].append(현재가격)
        if len(전략['이동평균']) > 120:
            전략['이동평균'].pop(0)
    
    def _전략_매매_실행_시나리오(self, 전략, 현재가격, 전일종가, 일차, 시간, 시나리오데이터):
        """시나리오용 매매 실행 (기존 로직과 동일)"""
        # 기존 _전략_매매_실행과 동일한 로직
        # 손절 체크
        if 전략['주식수'] > 0 and 전략['매수가격'] > 0:
            손실률 = ((현재가격 - 전략['매수가격']) / 전략['매수가격']) * 100
            if 손실률 <= 전략['손절라인']:
                매도금액 = 전략['주식수'] * 현재가격
                전략['자본'] += 매도금액
                전략['주식수'] = 0
                전략['매수가격'] = 0  # 매수가 초기화
                전략['절반매도완료'] = False
                return True
        
        # 매수 체크 (모든 기준 지원)
        if 전략['자본'] > 현재가격 and 전략['주식수'] == 0:
            매수신호 = False
            
            if 전략['매수기준'] == '1':  # 시가 대비 하락
                시가 = 전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격
                시가대비변동 = ((현재가격 - 시가) / 시가) * 100
                if 시가대비변동 <= -전략['매수하락률']:
                    매수신호 = True
                    
            elif 전략['매수기준'] == '2':  # 전일 종가 대비
                전일대비변동 = ((현재가격 - 전일종가) / 전일종가) * 100
                if 전일대비변동 <= -전략['매수하락률']:
                    매수신호 = True
                    
            elif 전략['매수기준'] == '3':  # 20일선 이탈
                if len(전략['이동평균']) >= 20:
                    평균가 = sum(전략['이동평균'][-20:]) / 20
                    평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                    if 평균대비 <= -전략['매수하락률']:
                        매수신호 = True
                        
            elif 전략['매수기준'] == '4':  # 60일선 이탈
                if len(전략['이동평균']) >= 60:
                    평균가 = sum(전략['이동평균'][-60:]) / 60
                    평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                    if 평균대비 <= -전략['매수하락률']:
                        매수신호 = True
                        
            elif 전략['매수기준'] == '5':  # 120일선 이탈
                if len(전략['이동평균']) >= 120:
                    평균가 = sum(전략['이동평균'][-120:]) / 120
                    평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                    if 평균대비 <= -전략['매수하락률']:
                        매수신호 = True
            
            if 매수신호:
                if 전략['구매방식'] == '1':
                    매수금액 = 전략['자본'] * 전략['매수수량']
                else:
                    매수금액 = min(현재가격 * 전략['매수수량'], 전략['자본'])
                
                매수주식 = 매수금액 / 현재가격
                
                # 평균 매수가 계산 (기존 보유 + 신규 매수)
                기존총액 = 전략['주식수'] * 전략['매수가격'] if 전략['주식수'] > 0 else 0
                신규총액 = 매수주식 * 현재가격
                총보유주식 = 전략['주식수'] + 매수주식
                
                전략['주식수'] = 총보유주식
                전략['자본'] -= 매수금액
                전략['매수가격'] = (기존총액 + 신규총액) / 총보유주식  # 평균 매수가
        
        # 매도 체크 (간소화된 버전)
        if 전략['주식수'] > 0:
            수익률 = ((현재가격 - 전략['매수가격']) / 전략['매수가격']) * 100
            
            if 전략['매도전략'] == '2' and 수익률 >= 전략['수익라인']:  # 일괄 매도만
                매도금액 = 전략['주식수'] * 현재가격
                전략['자본'] += 매도금액
                전략['주식수'] = 0
                전략['매수가격'] = 0  # 매수가 초기화
        
        return False
    
    def 대화형_시뮬레이션(self):
        """시간별 변동을 보여주며 하루씩 진행하는 대화형 시뮬레이션"""
        print(f"\n=== 대화형 투자 시뮬레이션 ===")
        print(f"초기 주식 가격: {self.초기가격}원\n")
        
        # 매수 전략 선택
        print("=== 매수 전략 설정 ===")
        print("매수 기준 선택:")
        print("1. 시가 대비 하락시 매수 (장중 하락 포착)")
        print("2. 전일 종가 대비 하락시 매수 (갭하락 포착)")
        print("3. 20일선 이탈시 매수 (단기 기술적 분석)")
        print("4. 60일선 이탈시 매수 (중기 기술적 분석)")
        print("5. 120일선 이탈시 매수 (장기 기술적 분석)")
        매수기준 = input("선택 (1, 2, 3, 4, 5): ")
        
        매수하락률 = float(input("몇 % 하락시 매수? (예: 2는 -2%): "))
        
        print("\n구매 비율 선택:")
        print("1. 퍼센트 방식 (자본의 %)")
        print("2. 고정 주식수 방식")
        방식 = input("선택 (1 또는 2): ")
        
        if 방식 == "1":
            매수비율 = float(input("자본의 몇 % 매수? (예: 30은 30%): ")) / 100
        else:
            매수주식수 = int(input("몇 주씩 매수? (예: 10): "))
            매수비율 = None
        
        # 매도 전략 선택
        print("\n=== 매도 전략 설정 ===")
        
        # 손절 라인 설정
        손절라인 = float(input("손절 라인 설정 (예: -3은 -3%): "))
        
        # 익절 전략 선택
        print("\n익절 전략 선택:")
        print("1. 분할 매도 (절반씩)")
        print("2. 목표가 일괄 매도")
        print("3. 트레일링 스탑 (고점 대비 %)")
        전략 = input("선택 (1, 2, 3): ")
        
        if 전략 == "1":
            수익라인 = float(input("1차 매도 수익률 (예: 3은 +3%): "))
        elif 전략 == "2":
            수익라인 = float(input("목표 수익률 (예: 5는 +5%): "))
        else:  # 트레일링 스탑
            수익라인 = float(input("최고점 대비 몇% 하락시 매도? (예: 2): "))
        
        return self._실행_시뮬레이션(매수기준, 매수하락률, 방식, 매수비율 if 방식 == "1" else 매수주식수, 
                                     손절라인, 전략, 수익라인)
    
    def _실행_시뮬레이션(self, 매수기준, 매수하락률, 구매방식, 매수수량, 손절라인, 전략, 수익라인):
        """실제 시뮬레이션 실행"""
        자본 = 100000
        주식수 = 0
        현재가격 = self.초기가격
        거래내역 = []
        절반매도완료 = False
        매수가격 = 0
        전일종가 = self.초기가격  # 전일 종가 추적
        최고가격 = 0  # 트레일링 스탑용
        이동평균 = self.과거데이터.copy()  # 과거 120일 데이터로 초기화
        
        print(f"\n시작 자본: 100,000원")
        print(f"시작 주가: {self.초기가격:.0f}원")
        print("="*60)
        
        for 일차 in range(135):  # 27주 = 135일
            주차 = (일차 // 5) + 1  # 현재 주차 계산
            
            print(f"\n === {주차}주차 {일차+1}일 ===")
            일시작가격 = 현재가격
            
            # 전일 대비 변동률 계산
            전일대비 = ((일시작가격 - 전일종가) / 전일종가) * 100 if 일차 > 0 else 0
            # 초기가격 대비 변동률 계산
            초기대비 = ((일시작가격 - self.초기가격) / self.초기가격) * 100
            
            print(f"시가: {일시작가격:.1f}원 (전일대비: {전일대비:+.1f}%, 초기대비: {초기대비:+.1f}%)")
            print("-"*40)
            
            # 시간별 데이터를 먼저 모두 계산
            시간별결과 = []
            for 시간 in range(7):  # 하루 7시간 (첫 시간은 시가 설정용)
                시간인덱스 = 일차 * 7 + 시간
                변동률 = self.시간데이터[시간인덱스]
                이전가격 = 현재가격
                현재가격 = 이전가격 * (1 + 변동률/100)
                # 소수점 1자리까지만 (버림)
                현재가격 = int(현재가격 * 10) / 10
                
                거래정보 = ""
                거래발생 = False
                
                # 첫 시간은 매매 금지 (시가 설정용)
                if 시간 == 0:
                    시간별결과.append({
                        '시간': 시간 + 1,
                        '변동률': 변동률,
                        '현재가격': 현재가격,
                        '거래': '시가설정'
                    })
                    continue
                
                # 손절 체크
                if 주식수 > 0 and 매수가격 > 0:
                    손실률 = ((현재가격 - 매수가격) / 매수가격) * 100
                    if 손실률 <= 손절라인:
                        매도금액 = 주식수 * 현재가격
                        자본 += 매도금액
                        거래내역.append(('손절', 일차+1, 시간+1, 현재가격, 주식수))
                        거래정보 = f" 손절! {손실률:.1f}% 손실, {주식수:.1f}주 매도"
                        주식수 = 0
                        매수가격 = 0  # 매수가 초기화
                        거래발생 = True
                        절반매도완료 = False
                
                # 매수 체크
                if not 거래발생 and 자본 > 현재가격 and 주식수 == 0:
                    매수신호 = False
                    
                    if 매수기준 == "1":  # 시가 대비 하락
                        일대비변동 = ((현재가격 - 일시작가격) / 일시작가격) * 100
                        if 일대비변동 <= -매수하락률:
                            매수신호 = True
                    elif 매수기준 == "2":  # 전일 종가 대비 하락
                        전일대비변동 = ((현재가격 - 전일종가) / 전일종가) * 100 if 일차 > 0 else 0
                        if 전일대비변동 <= -매수하락률:
                            매수신호 = True
                    elif 매수기준 == '3':  # 20일선 이탈
                        if len(이동평균) >= 20:
                            평균가 = sum(이동평균[-20:]) / 20
                            평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                            if 평균대비 <= -매수하락률:
                                매수신호 = True
                    elif 매수기준 == '4':  # 60일선 이탈
                        if len(이동평균) >= 60:
                            평균가 = sum(이동평균[-60:]) / 60
                            평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                            if 평균대비 <= -매수하락률:
                                매수신호 = True
                    elif 매수기준 == '5':  # 120일선 이탈
                        if len(이동평균) >= 120:
                            평균가 = sum(이동평균[-120:]) / 120
                            평균대비 = ((현재가격 - 평균가) / 평균가) * 100
                            if 평균대비 <= -매수하락률:
                                매수신호 = True
                    
                    if 매수신호:
                        if 구매방식 == "1":  # 퍼센트 방식
                            매수금액 = 자본 * 매수수량  # 매수수량은 비율
                        else:  # 고정 주식수 방식
                            매수금액 = min(현재가격 * 매수수량, 자본)  # 매수수량은 주식수
                        
                        매수주식 = 매수금액 / 현재가격
                        
                        # 평균 매수가 계산 (기존 보유 + 신규 매수)
                        기존총액 = 주식수 * 매수가격 if 주식수 > 0 else 0
                        신규총액 = 매수주식 * 현재가격
                        총보유주식 = 주식수 + 매수주식
                        
                        주식수 = 총보유주식
                        자본 -= 매수금액
                        매수가격 = (기존총액 + 신규총액) / 총보유주식  # 평균 매수가
                        거래내역.append(('매수', 일차+1, 시간+1, 현재가격, 매수주식))
                        거래정보 = f" 매수! {매수주식:.1f}주 @ {현재가격:.0f}원 (평균가:{매수가격:.1f}원)"
                        거래발생 = True
                
                # 매도 체크
                if not 거래발생 and 주식수 > 0:
                    수익률 = ((현재가격 - 매수가격) / 매수가격) * 100
                    
                    # 최고가 업데이트 (트레일링 스탑용)
                    if 현재가격 > 최고가격:
                        최고가격 = 현재가격
                    
                    if 전략 == "1" and not 절반매도완료:  # 분할 매도 전략
                        if 수익률 >= 수익라인:  # 1차 목표 도달시 절반 매도
                            매도주식 = 주식수 * 0.5
                            매도금액 = 매도주식 * 현재가격
                            주식수 -= 매도주식
                            자본 += 매도금액
                            절반매도완료 = True
                            거래내역.append(('절반매도', 일차+1, 시간+1, 현재가격, 매도주식))
                            거래정보 = f" 절반매도! {매도주식:.1f}주, 수익률 +{수익률:.1f}%"
                    
                    elif 전략 == "2":  # 목표가 일괄 매도
                        if 수익률 >= 수익라인:
                            매도금액 = 주식수 * 현재가격
                            자본 += 매도금액
                            거래내역.append(('전량매도', 일차+1, 시간+1, 현재가격, 주식수))
                            거래정보 = f" 전량매도! {주식수:.1f}주, 수익률 +{수익률:.1f}%"
                            주식수 = 0
                            매수가격 = 0  # 매수가 초기화
                            절반매도완료 = False
                            최고가격 = 0
                    
                    elif 전략 == "3":  # 트레일링 스탑
                        고점대비 = ((최고가격 - 현재가격) / 최고가격) * 100
                        if 고점대비 >= 수익라인:  # 고점 대비 하락률 도달
                            매도금액 = 주식수 * 현재가격
                            자본 += 매도금액
                            거래내역.append(('트레일링스탑', 일차+1, 시간+1, 현재가격, 주식수))
                            거래정보 = f" 트레일링스탑! 고점({최고가격:.0f})대비 -{고점대비:.1f}%"
                            주식수 = 0
                            매수가격 = 0  # 매수가 초기화
                            최고가격 = 0
                
                # 시가 대비 변동률 계산 (하루 기준)
                시가대비 = ((현재가격 - 일시작가격) / 일시작가격) * 100
                
                시간별결과.append({
                    '시간': 시간+1,
                    '이전가격': 이전가격,
                    '현재가격': 현재가격,
                    '변동률': 변동률,
                    '시가대비': 시가대비,
                    '거래정보': 거래정보
                })
            
            # 시간별 결과 출력
            for 결과 in 시간별결과:
                print(f"  {결과['시간']}시간: {결과['이전가격']:.0f} → {결과['현재가격']:.0f} (직전대비: {결과['변동률']:+.2f}%, 시가대비: {결과['시가대비']:+.1f}%){결과['거래정보']}")
            
            # 하루 마감 정보
            print("-"*40)
            일변동률 = ((현재가격 - 일시작가격) / 일시작가격) * 100
            전일대비종가 = ((현재가격 - 전일종가) / 전일종가) * 100 if 일차 > 0 else 0
            초기대비종가 = ((현재가격 - self.초기가격) / self.초기가격) * 100
            평가자산 = 자본 + 주식수 * 현재가격
            수익률 = ((평가자산 - 100000) / 100000) * 100
            
            print(f" 일 마감 현황:")
            print(f"  종가: {현재가격:.1f}원")
            print(f"  ├─ 일중 변동: {일변동률:+.1f}% (시가 {일시작가격:.1f} → 종가 {현재가격:.1f})")
            print(f"  ├─ 전일 대비: {전일대비종가:+.1f}%" + (f" (전일 종가 {전일종가:.1f}원)" if 일차 > 0 else " (첫날)"))
            print(f"  └─ 초기 대비: {초기대비종가:+.1f}% (초기가 {self.초기가격:.1f}원)")
            print(f"  보유현금: {자본:,.0f}원")
            print(f"  보유주식: {주식수:.1f}주")
            print(f"  평가자산: {평가자산:,.0f}원 (수익률: {수익률:+.1f}%)")
            
            # 주 마감 시 주간 요약
            if (일차 + 1) % 5 == 0:
                주차 = (일차 // 5) + 1
                print(f"\n === {주차}주차 마감 ===")
                print(f"  주간 초기대비: {초기대비종가:+.1f}%")
                print(f"  주간 수익률: {수익률:+.1f}%")
            
            # 이동평균용 가격 기록 (일 종가 기준)
            이동평균.append(현재가격)
            if len(이동평균) > 120:
                이동평균.pop(0)  # 120일치만 유지
            
            # 전일 종가 업데이트
            전일종가 = 현재가격
            
            # 자본 탈락 체크 후 엔터키 대기
            if 일차 < 134 and (일차 % 5 == 4):  # 주내일차 5일째 (금요일)
                현재자본 = 자본 + 주식수 * 현재가격
                if 현재자본 <= 60000:  # 탈락 기준
                    주차 = (일차 // 5) + 1
                    print(f"\n{주차}주차 자본 탈락! 현재 자본: {현재자본:,.0f}원")
                    break  # 탈락시 시뮬레이션 종료
        
        # 최종 결과
        최종자산 = 자본 + 주식수 * 현재가격
        수익률 = ((최종자산 - 100000) / 100000) * 100
        
        return {
            '수익률': 수익률,
            '최종자산': 최종자산,
            '거래내역': 거래내역,
            '최종주식수': 주식수,
            '최종현금': 자본
        }
    
    def 매매시뮬레이션(self, 매수기준, 매도기준, 시간범위, 전략=None):
        """지정된 시간 범위에서 매매 시뮬레이션
        매수기준: 시가 대비 몇% 떨어질 때 매수 (음수, 시가하락 전용)
        매도기준: 시가 대비 몇% 오를 때 매도 (양수)
        전략: 전체 전략 정보 (다양한 매수 기준 처리용)
        """
        자본 = 100000
        주식수 = 0
        시작가격 = self.초기가격
        현재가격 = 시작가격
        거래내역 = []
        
        # 일별 시가 저장
        일별시가 = {}
        
        데이터슬라이스 = self.시간데이터[:시간범위]
        
        for i, 변동률 in enumerate(데이터슬라이스):
            일차 = i // 6 + 1
            
            # 가격 업데이트 먼저
            이전가격 = 현재가격
            현재가격 = 이전가격 * (1 + 변동률/100)
            
            # 하루의 첫 시간에 시가 설정 (업데이트된 가격으로)
            if i % 6 == 0:
                일별시가[일차] = 현재가격
            
            # 시가 대비 변돐률 계산
            시가 = 일별시가[일차]
            시가대비변돐률 = ((현재가격 - 시가) / 시가) * 100
            
            # 매수 조건: 전략별 다양한 매수 기준 처리
            매수신호 = False
            
            if 전략 and '매수기준' in 전략:
                매수기준타입 = 전략['매수기준']
                
                if 매수기준타입 == '1':  # 시가하락
                    if 시가대비변돐률 <= 매수기준 and 자본 > 현재가격:
                        매수신호 = True
                        
                elif 매수기준타입 == '6':  # 시가상승 (상승매수)
                    상승률 = 전략.get('매수상승률', 1.0)
                    if 시가대비변돐률 >= 상승률 and 자본 > 현재가격:
                        매수신호 = True
                        
                elif 매수기준타입 in ['2', '3', '4', '5']:  # 기타 하락 전략들
                    # 단순화: 시가하락과 동일하게 처리 (임시)
                    하락률 = 전략.get('매수하락률', abs(매수기준))
                    if 시가대비변돐률 <= -하락률 and 자본 > 현재가격:
                        매수신호 = True
                        
            else:
                # 기존 방식: 시가하락만 (하위 호환성)
                if 시가대비변돐률 <= 매수기준 and 자본 > 현재가격:
                    매수신호 = True
            
            if 매수신호:
                매수금액 = min(자본 * 0.25, 자본)
                매수주식 = 매수금액 / 현재가격
                주식수 += 매수주식
                자본 -= 매수금액
                거래내역.append(('매수', i, 시가대비변돐률, 현재가격))
            
            # 매도 조건 확인 (보유 주식이 있을 때만)
            if 주식수 > 0:
                # 손절 조건 우선 확인
                if 전략 and '손절라인' in 전략:
                    손절라인 = 전략['손절라인']  # 음수값 (예: -3.0)
                    if 시가대비변돐률 <= 손절라인:
                        # 손절: 전량 매도
                        매도금액 = 주식수 * 현재가격
                        자본 += 매도금액
                        거래내역.append(('손절', i, 시가대비변돐률, 현재가격))
                        주식수 = 0
                # 익절 조건
                elif 시가대비변돐률 >= 매도기준:
                    매도주식 = 주식수 * 0.4
                    매도금액 = 매도주식 * 현재가격
                    주식수 -= 매도주식
                    자본 += 매도금액
                    거래내역.append(('익절', i, 시가대비변돐률, 현재가격))
        
        최종자산 = 자본 + 주식수 * 현재가격
        수익률 = (최종자산 - 100000) / 100000 * 100
        
        return {
            '수익률': 수익률,
            '최종자산': 최종자산,
            '거래횟수': len(거래내역),
            '거래내역': 거래내역,
            '시간범위': 시간범위,
            '일수': 시간범위 // 6,
            '최종현금': 자본,
            '최종주식수': 주식수
        }
    
    def 전략_거래_상세보기(self, 전략, 시간범위=27):
        """특정 전략의 거래 내역 상세 출력"""
        print(f"\n전략 거래 상세 분석")
        print(f"   매수기준: {전략['매수기준']}, 하락률: {전략.get('매수하락률', 0):.1f}%")
        print(f"   손절라인: {전략.get('손절라인', 0):.1f}%, 수익라인: {전략.get('수익라인', 0):.1f}%")
        print("-" * 60)
        
        매수기준값 = -abs(전략['매수하락률']) if 전략['매수하락률'] > 0 else 전략['매수하락률']
        결과 = self.매매시뮬레이션(매수기준값, 전략['수익라인'], 시간범위, 전략)
        
        print(f"결과:")
        print(f"   최종 수익률: {결과['수익률']:+.2f}%")
        print(f"   거래 횟수: {결과['거래횟수']}회")
        print(f"   최종 자산: {결과['최종자산']:,.0f}원 (초기: 100,000원)")
        print(f"   ├ 현금: {결과['최종현금']:,.0f}원")
        주식평가액 = 결과['최종자산'] - 결과['최종현금']
        print(f"   └ 주식평가액: {주식평가액:,.0f}원 ({결과['최종주식수']:.2f}주)")
        
        if 결과['거래내역']:
            print(f"\n거래 내역 (처음 10개):")
            for i, (유형, 시간, 변동률, 가격) in enumerate(결과['거래내역'][:10], 1):
                일차 = 시간 // 6 + 1
                시간대 = 시간 % 6 + 1
                print(f"   {i}. {일차}일 {시간대}시간: {유형} - 시가대비 {변동률:+.2f}% (가격: {가격:.0f}원)")
        else:
            print(f"\n❌ 거래 없음 - 매수 조건을 충족하지 못함")
        
        return 결과
    
    def 매수불가_전략_분석(self, 생존전략들, 시간범위=27):
        """0% 수익률 전략들이 실제로 매수를 못하는지 분석"""
        print(f"\n매수 불가 전략 분석 (0% 수익률 원인 조사)")
        print("-" * 60)
        
        영수익전략들 = []
        매수성공전략들 = []
        
        for i, 전략 in enumerate(생존전략들[:50]):  # 샘플 50개만 테스트
            try:
                매수기준값 = -abs(전략['매수하락률']) if 전략['매수하락률'] > 0 else 전략['매수하락률']
                결과 = self.매매시뮬레이션(매수기준값, 전략['수익라인'], 시간범위, 전략)
                
                if abs(결과['수익률']) < 0.01:  # 거의 0%
                    영수익전략들.append({
                        '전략': 전략,
                        '거래횟수': 결과['거래횟수'],
                        '최종현금': 결과['최종현금'],
                        '최종주식수': 결과['최종주식수']
                    })
                else:
                    매수성공전략들.append({
                        '전략': 전략,
                        '수익률': 결과['수익률'],
                        '거래횟수': 결과['거래횟수']
                    })
                    
            except Exception as e:
                print(f"   전략 {i} 오류: {e}")
        
        print(f"분석 결과:")
        print(f"   0% 수익률 전략: {len(영수익전략들)}개")
        print(f"   정상 거래 전략: {len(매수성공전략들)}개")
        
        if 영수익전략들:
            print(f"\n0% 수익률 전략들 (매수 실패):")
            for i, 데이터 in enumerate(영수익전략들[:5]):
                전략 = 데이터['전략']
                print(f"   {i+1}. 매수기준:{전략['매수기준']} 하락률:{전략['매수하락률']} → 거래:{데이터['거래횟수']}회")
        
        if 매수성공전략들:
            print(f"\n정상 거래 전략들:")
            for i, 데이터 in enumerate(매수성공전략들[:5]):
                전략 = 데이터['전략']
                print(f"   {i+1}. 매수기준:{전략['매수기준']} 하락률:{전략['매수하락률']} → 수익률:{데이터['수익률']:+.1f}% 거래:{데이터['거래횟수']}회")
        
        return len(영수익전략들), len(매수성공전략들)

    def 점진적_필터링_분석(self):
        """점진적 필터링으로 최적 조건 탐색"""
        print("=== 점진적 필터링 분석 시작 ===")
        
        # 매매 조건 생성 (현실적인 범위로 수정)
        매수조건들 = [-3.0, -2.8, -2.5, -2.3, -2.0, -1.8, -1.5, -1.3, -1.0, -0.8,
                    -0.5, -0.3, -0.1, 0.1, 0.3, 0.5, 0.8, 1.0, 1.3, 1.5]
        매도조건들 = [0.1, 0.3, 0.5, 0.8, 1.0, 1.3, 1.5, 1.8, 2.0, 2.3,
                    2.5, 2.8, 3.0, 3.3, 3.5, 3.8, 4.0, 4.3, 4.5, 4.8]
        
        # 1단계: 하루(6시간) 필터링
        print("1단계: 하루(6시간) 스크리닝 - 400개 조합")
        
        초기결과 = []
        for 매수 in 매수조건들:
            for 매도 in 매도조건들:
                결과 = self.매매시뮬레이션(매수, 매도, 8)
                초기결과.append({
                    '매수기준': 매수,
                    '매도기준': 매도,
                    '수익률': 결과['수익률'],
                    '거래횟수': 결과['거래횟수'],
                    '거래내역': 결과['거래내역'],
                    '단계': 1,
                    '탈락일': None
                })
        
        # 상위 100개 선발 (거래 0회는 제외하고 선발)
        거래있는결과 = [r for r in 초기결과 if r['거래횟수'] > 0]
        거래없는결과 = [r for r in 초기결과 if r['거래횟수'] == 0]
        
        거래있는결과.sort(key=lambda x: x['수익률'], reverse=True)
        
        if len(거래있는결과) >= 100:
            선발100_거래있는 = 거래있는결과[:100]
            탈락300_거래있는 = 거래있는결과[100:]
            선발100 = 선발100_거래있는 + 거래없는결과  # 거래 0회는 모두 생존
            탈락300 = 탈락300_거래있는
        else:
            # 거래 있는 전략이 100개 미만인 경우
            선발100 = 거래있는결과 + 거래없는결과
            탈락300 = []
        
        # 탈락자 기록
        for 탈락 in 탈락300:
            탈락['탈락일'] = 1
        
        print(f"   상위 100개 선발 완료 (탈락: {len(탈락300)}개, 거래0회 {len(거래없는결과)}개 보호)")
        print(f"   1일차 최고 수익률: {선발100[0]['수익률']:+.2f}%")
        
        # 2단계: 3일(24시간) 필터링
        print("2단계: 3일(24시간) 검증 - 100개 조합")
        
        중간결과 = []
        for 조건 in 선발100:
            결과 = self.매매시뮬레이션(조건['매수기준'], 조건['매도기준'], 24)
            중간결과.append({
                '매수기준': 조건['매수기준'],
                '매도기준': 조건['매도기준'],
                '수익률': 결과['수익률'],
                '거래횟수': 결과['거래횟수'],
                '단계': 2,
                '탈락일': None
            })
        
        # 상위 50개 선발 (거래 0회는 제외하고 선발)
        거래있는중간 = [r for r in 중간결과 if r['거래횟수'] > 0]
        거래없는중간 = [r for r in 중간결과 if r['거래횟수'] == 0]
        
        거래있는중간.sort(key=lambda x: x['수익률'], reverse=True)
        
        if len(거래있는중간) >= 50:
            선발50_거래있는 = 거래있는중간[:50]
            탈락50_거래있는 = 거래있는중간[50:]
            선발50 = 선발50_거래있는 + 거래없는중간  # 거래 0회는 모두 생존
            탈락50 = 탈락50_거래있는
        else:
            # 거래 있는 전략이 50개 미만인 경우
            선발50 = 거래있는중간 + 거래없는중간
            탈락50 = []
        
        # 탈락자 기록
        for 탈락 in 탈락50:
            탈락['탈락일'] = 3
        
        print(f"   상위 50개 선발 완료 (탈락: {len(탈락50)}개, 거래0회 {len(거래없는중간)}개 보호)")
        print(f"   3일차 최고 수익률: {선발50[0]['수익률']:+.2f}%")
        
        # 3단계: 전체(200시간) 최종 분석
        print("3단계: 5주(200시간) 최종 분석 - 50개 조합")
        
        최종결과 = []
        for 조건 in 선발50:
            결과 = self.매매시뮬레이션(조건['매수기준'], 조건['매도기준'], 200)
            최종결과.append({
                '매수기준': 조건['매수기준'],
                '매도기준': 조건['매도기준'],
                '수익률': 결과['수익률'],
                '거래횟수': 결과['거래횟수'],
                '최종자산': 결과['최종자산'],
                '거래내역': 결과['거래내역'],
                '단계': 3,
                '탈락일': None,
                '생존률': '상위 12.5%'
            })
        
        최종결과.sort(key=lambda x: x['수익률'], reverse=True)
        
        print(f"   최종 50개 분석 완료")
        print(f"   최종 최고 수익률: {최종결과[0]['수익률']:+.2f}%")
        
        # 모든 결과 통합
        전체결과 = {
            '탈락300_1일': 탈락300,
            '탈락50_3일': 탈락50,
            '최종50': 최종결과
        }
        
        return 전체결과
    
    def 결과출력(self, 전체결과):
        """최적화된 결과 출력"""
        print("\n" + "="*90)
        print("🏆 최종 생존 상위 20개 조합")
        print("="*90)
        print("순위 | 매수기준 | 매도기준 | 최종수익률 | 거래횟수 | 최종자산    | 생존단계")
        print("-"*90)
        
        최종50 = 전체결과['최종50']
        
        for i, 결과 in enumerate(최종50[:20]):
            print(f"{i+1:2d}위 | {결과['매수기준']:+6.1f}% | {결과['매도기준']:+6.1f}% | "
                  f"{결과['수익률']:+7.2f}% | {결과['거래횟수']:4d}회 | "
                  f"{결과['최종자산']:8,.0f}원 | 최종생존")
        
        print("="*90)
        
        # 탈락자 분석
        print("\n탈락자 분석")
        print("-"*50)
        
        탈락300 = 전체결과['탈락300_1일']
        탈락50 = 전체결과['탈락50_3일']
        
        print(f"1일차 탈락: 300개 (75.0%)")
        print(f"   최고 수익률: {max(탈락300, key=lambda x: x['수익률'])['수익률']:+.2f}%")
        print(f"   최저 수익률: {min(탈락300, key=lambda x: x['수익률'])['수익률']:+.2f}%")
        
        print(f"3일차 탈락: 50개 (12.5%)")  
        print(f"   최고 수익률: {max(탈락50, key=lambda x: x['수익률'])['수익률']:+.2f}%")
        print(f"   최저 수익률: {min(탈락50, key=lambda x: x['수익률'])['수익률']:+.2f}%")
        
        print(f"최종 생존: 50개 (12.5%)")
        print(f"   최고 수익률: {max(최종50, key=lambda x: x['수익률'])['수익률']:+.2f}%")
        print(f"   최저 수익률: {min(최종50, key=lambda x: x['수익률'])['수익률']:+.2f}%")
    
    def 상세분석(self, 전체결과):
        """상세 통계 분석"""
        print("\n" + "="*60)
        print("상세 통계 분석")
        print("="*60)
        
        최종50 = 전체결과['최종50']
        
        # 최고 성과자 상세 분석
        최고조건 = 최종50[0]
        print(f"최고 성과 조건:")
        print(f"   매수/매도: 시가대비 {최고조건['매수기준']:+.1f}% / 시가대비 {최고조건['매도기준']:+.1f}%")
        print(f"   최종 수익률: {최고조건['수익률']:+.2f}%")
        print(f"   총 거래 횟수: {최고조건['거래횟수']}회")
        print(f"   최종 자산: {최고조건['최종자산']:,.0f}원")
        
        # 거래 내역 샘플 출력 (최고 조건에서)
        최종결과 = 전체결과['최종50']
        최고거래내역 = 최종결과[0].get('거래내역', [])
        # 거래 내역 샘플 - 생략
        
        # 거래 빈도 분석
        평균거래 = sum(r['거래횟수'] for r in 최종50) / len(최종50)
        고빈도조건 = [r for r in 최종50 if r['거래횟수'] >= 평균거래]
        저빈도조건 = [r for r in 최종50 if r['거래횟수'] < 평균거래]
        
        print(f"\n거래 빈도 분석:")
        print(f"   평균 거래 횟수: {평균거래:.1f}회")
        print(f"   고빈도 그룹 ({len(고빈도조건)}개): 평균 {sum(r['수익률'] for r in 고빈도조건)/len(고빈도조건):+.1f}%")
        if 저빈도조건:
            print(f"   저빈도 그룹 ({len(저빈도조건)}개): 평균 {sum(r['수익률'] for r in 저빈도조건)/len(저빈도조건):+.1f}%")
        
        # 변동폭 분석
        입력변동폭 = sum(abs(x) for x in self.시간데이터) / len(self.시간데이터)
        print(f"\n시장 분석:")
        print(f"   입력 데이터 평균 변동폭: ±{입력변동폭:.2f}%")
        print(f"   분석 기간: 135일/27주 (945시간)")
        print(f"   주별 변동: {[f'{x:+.1f}%' for x in self.주간데이터]}")
    
    def 전략_비교_시뮬레이션_누적추적(self):
        """누적 추적용 전략 비교 시뮬레이션 (상위 20개 추적, 조용한 실행)"""
        # 기존 탈락 전략 로드 (조용히)
        탈락전략목록 = self._탈락전략_로드()
        
        # 다양한 전략 조합 생성 (탈락 전략 제외)
        전략조합 = self._전략조합_생성(탈락전략목록)
        print(f"   전략 조합: {len(전략조합):,}개 (탈락 제외: {len(탈락전략목록):,}개)")
        
        # 시장 데이터 요약 출력
        print(f"\n   시장 데이터 요약 (27주간):")
        if hasattr(self, '주간데이터') and self.주간데이터:
            주간데이터 = self.주간데이터[:27]  # 27주 데이터
            총변동 = sum(주간데이터)
            최고주 = max(주간데이터)
            최저주 = min(주간데이터)
            print(f"   ├ 총 변동: {총변동:+.1f}% | 최고주: {최고주:+.1f}% | 최저주: {최저주:+.1f}%")
            
            # 단순 보유 수익률 계산
            초기가격 = self.초기가격
            현재가격 = 초기가격
            for 변동 in self.주간데이터[:27]:
                현재가격 *= (1 + 변동/100)
            단순보유수익률 = (현재가격 - 초기가격) / 초기가격 * 100
            print(f"   ├ 단순 보유시 수익률: {단순보유수익률:+.1f}%")
            
            # 처음 5주 데이터 표시
            print(f"   └ 초반 5주: ", end="")
            for i, 주간변동 in enumerate(주간데이터[:5], 1):
                print(f"{i}주:{주간변동:+.1f}% ", end="")
            print()
        
        # 일별 점진적 필터링 - 조용한 버전 (3주차 단위 출력)
        생존전략 = 전략조합.copy()
        print(f"\n   27주 시뮬레이션 시작... (초기 생존: {len(생존전략):,}개)")
        
        for 일차 in range(135):  # 27주 = 135일
            주차 = (일차 // 5) + 1
            주내일차 = (일차 % 5) + 1
            
            # 3주마다 진행상황 및 수익률 분포 출력 (상세 버전)
            if 주차 % 3 == 0 and 주내일차 == 1:
                # 현재 수익률 분포 계산
                현재수익률들 = []
                거래횟수들 = []
                영수익전략수 = 0
                매수못한전략 = []
                
                # 전체 전략 분석 (정확도를 위해 샘플링 없이 전체 분석)
                샘플전략 = 생존전략
                print(f"   >>> 전체 {len(생존전략):,}개 전략 분석 중... (시간이 걸릴 수 있음)")
                
                for i, 전략 in enumerate(샘플전략):
                    # 진행률 표시 (매 10만개마다)
                    if (i + 1) % 100000 == 0:
                        진행률 = ((i + 1) / len(샘플전략)) * 100
                        print(f"       진행: {i+1:,}/{len(샘플전략):,} ({진행률:.1f}%)")
                    
                    try:
                        # 매수하락률이 양수면 음수로, 이미 음수면 그대로
                        매수기준값 = -abs(전략['매수하락률']) if 전략['매수하락률'] > 0 else 전략['매수하락률']
                        결과 = self.매매시뮬레이션(매수기준값, 전략['수익라인'], 일차 + 1, 전략)
                        현재수익률들.append(결과['수익률'])
                        거래횟수들.append(결과['거래횟수'])
                        
                        # 0% 수익률 전략 분석
                        if abs(결과['수익률']) < 0.01:
                            영수익전략수 += 1
                            if 결과['거래횟수'] == 0:
                                매수못한전략.append(전략)
                    except:
                        현재수익률들.append(0.0)
                        거래횟수들.append(0)
                
                if 현재수익률들:
                    최고 = max(현재수익률들)
                    최저 = min(현재수익률들)
                    평균 = sum(현재수익률들) / len(현재수익률들)
                    평균거래 = sum(거래횟수들) / len(거래횟수들) if 거래횟수들 else 0
                    
                    print(f"\n   === {주차}주차 상세 현황 ===")
                    print(f"   생존: {len(생존전략):,}개 (전체 분석 완료)")
                    print(f"   ├ 수익률: 최고 {최고:+.1f}% | 최저 {최저:+.1f}% | 평균 {평균:+.1f}%")
                    print(f"   ├ 거래: 평균 {평균거래:.1f}회 | 거래 없음 {영수익전략수}개")
                    
                    # 수익률 분포 표시
                    플러스 = len([x for x in 현재수익률들 if x > 0])
                    마이너스 = len([x for x in 현재수익률들 if x < 0])
                    제로 = len([x for x in 현재수익률들 if abs(x) < 0.01])
                    
                    print(f"   ├ 분포: +수익 {플러스}개 | 0% {제로}개 | -손실 {마이너스}개")
                    
                else:
                    print(f"   {주차}주차 진행 중... (생존: {len(생존전략):,}개)")
            
            # 시뮬레이션 실행 (제한된 로깅)
            일일결과 = []
            for 전략 in 생존전략:
                # 옐로우카드 초기화 확인 (전략 생성시 이미 복원됨)
                if '옐로우카드' not in 전략:
                    전략['옐로우카드'] = {'개수': 0, '마지막음성주차': 0}  # 새 전략인 경우만
                
                # 매수하락률이 양수면 음수로 변환
                매수기준값 = -abs(전략['매수하락률']) if 전략['매수하락률'] > 0 else 전략['매수하락률']
                결과 = self.매매시뮬레이션(
                    매수기준값,
                    전략['수익라인'], 
                    일차 + 1,
                    전략  # 전략 정보 추가
                )
                결과['전략'] = 전략
                일일결과.append(결과)
            
            # 옐로우카드 시스템 (6주 단위)
            if 주차 % 6 == 0 and 주내일차 == 1:  # 6주차마다 체크
                탈락자 = []
                손실5이하 = 0
                손실50이하 = 0
                옐로우2개이상 = 0
                
                for 결과 in 일일결과:
                    전략 = 결과['전략']
                    현재수익률 = 결과['수익률']
                    최종자산 = 결과['최종자산']
                    
                    if 현재수익률 <= -5:  # -5% 이하
                        전략['옐로우카드']['개수'] += 1
                        전략['옐로우카드']['마지막음성주차'] = 주차
                        손실5이하 += 1
                    
                    # 탈락 판정
                    if 전략['옐로우카드']['개수'] >= 2:
                        탈락자.append(전략)
                        옐로우2개이상 += 1
                    elif 최종자산 <= 50000:  # 50% 손실
                        탈락자.append(전략)
                        손실50이하 += 1
                
                # 디버그 정보 출력
                print(f"   → -5% 이하 손실: {손실5이하:,}개")
                print(f"   → 50% 이하 자산: {손실50이하:,}개") 
                print(f"   → 옐로우카드 2개 이상: {옐로우2개이상:,}개")
                print(f"   → 총 탈락 대상: {len(탈락자):,}개")
                
                
                # 탈락 처리
                if 탈락자:
                    # 탈락 정보를 올바른 형식으로 변환
                    탈락정보들 = []
                    for 탈락전략 in 탈락자:
                        탈락정보들.append({
                            '전략': 탈락전략,
                            '탈락사유': '옐로우카드2개' if 탈락전략['옐로우카드']['개수'] >= 2 else '50%손실',
                            '탈락일': 일차 + 1
                        })
                    
                    try:
                        self._탈락전략_저장(탈락정보들)
                        생존전략 = [전략 for 전략 in 생존전략 if 전략 not in 탈락자]
                        print(f"   → 탈락 처리 완료: {len(탈락자):,}개")
                    except Exception as e:
                        print(f"   →  탈락 저장 실패 (계속 진행): {e}")
                else:
                    print(f"   → 탈락자 없음")
        
        # 최종 결과 - 상위 20개만 반환 (메모리 절약)
        print(f"   최종 생존: {len(생존전략):,}개 → 상위 20개 선발")
        
        최종결과 = []
        for 전략 in 생존전략:
            try:
                매수기준값 = -abs(전략['매수하락률']) if 전략['매수하락률'] > 0 else 전략['매수하락률']
                결과 = self.매매시뮬레이션(매수기준값, 전략['수익라인'], 135, 전략)
                결과['전략설명'] = f"{전략['매수기준']}-{전략['매수하락률']}-{전략['구매방식']}-{전략['매수수량']}-{전략['손절라인']}-{전략['매도전략']}-{전략['수익라인']}"
                최종결과.append(결과)
            except Exception as e:
                print(f"   → 전략 처리 오류 (건너뛰기): {e}")
                continue
        
        # 매수 불가 전략 분석 (0% 수익률 원인 조사)
        try:
            if 최종결과:
                self.매수불가_전략_분석([결과['전략'] for 결과 in 최종결과], 135)
        except Exception as e:
            print(f"   → 매수불가분석 오류: {e}")
        
        # 상위 20개 선발 (안전한 정렬)
        try:
            최종결과.sort(key=lambda x: x['수익률'], reverse=True)
            return 최종결과[:20]
        except Exception as e:
            print(f"   → 정렬 오류: {e}")
            return 최종결과[:20] if 최종결과 else []
    
    def _시장상황_분류(self, 단순보유수익률=None):
        """현재 시장 상황 분류"""
        if 단순보유수익률 is not None:
            # 전달받은 수익률로 분류
            총수익률 = 단순보유수익률
        else:
            # 기존 방식: 주간데이터로 계산
            주간데이터 = self.주간데이터
            if not 주간데이터:
                return "알수없음"
                
            # 전체 27주 수익률 계산
            총수익률 = sum(주간데이터)
        
        if 총수익률 > 5:
            return "상승장"
        elif 총수익률 < -5:
            return "하락장"
        else:
            return "횡보장"
    
    def _종합랭킹_생성_저장(self, 전략성과누적):
        """종합 랭킹 생성 및 안전한 JSON 저장"""
        import json
        import os
        from datetime import datetime
        
        try:
            # 안정성 점수 계산 (출현횟수 * 평균수익률 / 순위변동성)
            랭킹목록 = []
            for 전략설명, 성과 in 전략성과누적.items():
                if 성과['출현횟수'] > 0 and '수익률들' in 성과 and '순위들' in 성과:
                    try:
                        평균수익률 = sum(성과['수익률들']) / len(성과['수익률들'])
                        평균순위 = sum(성과['순위들']) / len(성과['순위들'])
                        순위변동성 = max(성과['순위들']) - min(성과['순위들']) if len(성과['순위들']) > 1 else 0
                        
                        # 안정성 점수: 출현횟수 * 평균수익률 / (순위변동성 + 1)
                        안정성점수 = 성과['출현횟수'] * 평균수익률 / (순위변동성 + 1)
                        
                        랭킹목록.append({
                            '전략설명': 전략설명,
                            '출현횟수': 성과['출현횟수'],
                            '평균수익률': 평균수익률,
                            '평균순위': 평균순위,
                            '최고순위': 성과.get('최고순위', 999),
                            '순위변동성': 순위변동성,
                            '안정성점수': 안정성점수,
                            '시장상황별성과': 성과.get('시장상황별성과', {'상승장': [], '하락장': [], '횡보장': []})
                        })
                    except Exception as e:
                        print(f"   → 전략 {전략설명} 계산 오류 (건너뛰기): {e}")
                        continue
            
            # 안정성 점수로 정렬 (안전한 정렬)
            try:
                랭킹목록.sort(key=lambda x: x['안정성점수'], reverse=True)
            except Exception as e:
                print(f"   → 랭킹 정렬 오류: {e}")
            
            # JSON 안전 저장 (상위 50개만)
            저장데이터 = {
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                '총사이클수': 5,
                '전략총개수': len(랭킹목록),
                '종합랭킹': 랭킹목록[:50]  # 상위 50개만 저장
            }
            
            # 백업 파일 먼저 생성
            try:
                with open('종합전략랭킹_백업.json', 'w', encoding='utf-8') as f:
                    json.dump(저장데이터, f, ensure_ascii=False, indent=2)
                print(f"    백업 파일 저장 완료")
            except Exception as e:
                print(f"    백업 저장 실패: {e}")
            
            # 메인 파일 저장
            try:
                with open('종합전략랭킹.json', 'w', encoding='utf-8') as f:
                    json.dump(저장데이터, f, ensure_ascii=False, indent=2)
                print(f"    종합랭킹 JSON 저장 완료 ({len(랭킹목록)}개 → 상위 50개 저장)")
            except Exception as e:
                print(f"    JSON 저장 실패: {e}")
                print(f"   → 백업 파일을 확인하세요: 종합전략랭킹_백업.json")
            
            return 랭킹목록[:50]  # 상위 50개만 반환
            
        except Exception as e:
            print(f"    종합랭킹 생성 전체 실패: {e}")
            return []
    
    def _5사이클_누적_시뮬레이션(self):
        """5사이클 누적 시뮬레이션 - 누적 수익률 방식"""
        사이클결과들 = []
        전략성과누적 = {}
        
        for 사이클 in range(1, 6):
            print(f"\n=== 사이클 {사이클}/5 시작 ===")
            print("-"*50)
            
            # 새로운 랜덤 데이터 생성
            일간데이터 = self.랜덤_일별_데이터_생성()
            self.주간_집계_계산(일간데이터)
            
            # 단일 시뮬레이션 실행 (누적 방식)
            결과 = self.전략_비교_시뮬레이션()
            
            if 결과 and '생존전략' in 결과:
                # 시장 상황 분류
                단순보유수익률 = 0
                if hasattr(self, '주간데이터') and self.주간데이터:
                    현재가격 = self.초기가격
                    for 변동 in self.주간데이터[:27]:
                        현재가격 *= (1 + 변동/100)
                    단순보유수익률 = (현재가격 - self.초기가격) / self.초기가격 * 100
                
                시장상황 = self._시장상황_분류(단순보유수익률)
                
                # 최고 전략 계산
                최고전략 = None
                최고수익률 = -float('inf')
                
                for 전략 in 결과['생존전략']:
                    평가자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
                    수익률 = ((평가자산 - 100000) / 100000) * 100
                    
                    if 수익률 > 최고수익률:
                        최고수익률 = 수익률
                        최고전략 = {
                            '전략': 전략,
                            '수익률': 수익률,
                            '전략설명': f"{전략['매수기준명']}-{전략['매수하락률']}% + {전략['구매방식명']} + 손절{전략['손절라인']}% + {전략['매도전략명']}"
                        }
                
                # 누적 통계에 추가 (상위 20개 전략)
                상위전략들 = []
                for 전략 in 결과['생존전략'][:20]:  # 상위 20개만
                    평가자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
                    수익률 = ((평가자산 - 100000) / 100000) * 100
                    상위전략들.append({
                        '전략': 전략,
                        '수익률': 수익률,
                        '전략설명': f"{전략['매수기준명']}-{전략['매수하락률']}% + {전략['구매방식명']} + 손절{전략['손절라인']}% + {전략['매도전략명']}"
                    })
                
                # 상위전략들을 누적 통계에 추가
                for 순위, 전략정보 in enumerate(상위전략들, 1):
                    전략키 = self._전략을_키로_변환(전략정보['전략'])
                    
                    if 전략키 not in 전략성과누적:
                        전략성과누적[전략키] = {
                            '전략정보': 전략정보['전략'],
                            '출현횟수': 0,
                            '총수익률': 0,
                            '순위합계': 0,
                            '최고순위': float('inf'),
                            '시장상황별성과': {'상승장': [], '하락장': [], '횡보장': []},
                            '사이클기록': []
                        }
                    
                    전략성과누적[전략키]['출현횟수'] += 1
                    전략성과누적[전략키]['총수익률'] += 전략정보['수익률']
                    전략성과누적[전략키]['순위합계'] += 순위
                    전략성과누적[전략키]['최고순위'] = min(전략성과누적[전략키]['최고순위'], 순위)
                    전략성과누적[전략키]['시장상황별성과'][시장상황].append(전략정보['수익률'])
                    전략성과누적[전략키]['사이클기록'].append({
                        '사이클': 사이클,
                        '순위': 순위,
                        '수익률': 전략정보['수익률'],
                        '시장상황': 시장상황
                    })
                
                사이클결과들.append({
                    '사이클': 사이클,
                    '생존전략수': len(결과['생존전략']),
                    '탈락전략수': len(결과['탈락기록']) if '탈락기록' in 결과 else 0,
                    '최고전략': 최고전략,
                    '시장상황': 시장상황,
                    '단순보유수익률': 단순보유수익률
                })
                
                print(f"사이클 {사이클} 완료:")
                print(f"  생존: {사이클결과들[-1]['생존전략수']:,}개")
                print(f"  최고 수익률: {최고수익률:+.1f}% ({시장상황})")
                print(f"  단순보유 대비: {최고수익률 - 단순보유수익률:+.1f}%p")
            else:
                print(f"사이클 {사이클} 실패!")
                return None
        
        # 종합 랭킹 생성 및 저장
        종합랭킹 = self._종합랭킹_생성_저장(전략성과누적)
        
        # 최종 결과 요약
        print(f"\n{'='*80}")
        print(f"5사이클 누적 시뮬레이션 완료!")
        print(f"{'='*80}")
        
        print(f"\n사이클별 결과:")
        for 결과 in 사이클결과들:
            print(f"  사이클 {결과['사이클']}: 생존 {결과['생존전략수']:,}개, 최고 {결과['최고전략']['수익률']:+.1f}% ({결과['시장상황']})")
        
        # 종합 랭킹 TOP 10 표시
        if 종합랭킹:
            print(f"\n종합 랭킹 TOP 10:")
            print("-" * 60)
            
            for i, 전략데이터 in enumerate(종합랭킹[:10], 1):
                전략설명 = 전략데이터['전략설명']
                평균수익률 = 전략데이터['평균수익률']
                출현횟수 = 전략데이터['출현횟수']
                안정성점수 = 전략데이터['안정성점수']
                
                print(f"{i:2}. [{전략설명}]")
                print(f"    출현: {출현횟수}/5회, 평균수익률: {평균수익률:+.1f}%, 안정성: {안정성점수:.1f}")
        
        return 종합랭킹


def main():
    """메인 실행 함수"""
    print("최적화 투자 패턴 분석기 v5.0")
    print("="*60)
    
    # 초기 주식 가격 입력
    초기가격 = float(input("초기 주식 가격을 입력하세요 (원): "))
    
    print("\n실행 모드 선택:")
    print("1. 전략 비교 시뮬레이션 (전체)")
    print("2. 최고전략 히스토리 조회")
    print("3. 히스토리 전략 재검증")
    print("4. 시장 상황별 성과 조회")
    print("5. 현재 상황 기반 전략 추천")
    print("6. 포트폴리오 전략 시뮬레이션")
    print("7. 포트폴리오 히스토리 조회")
    print("8. 5사이클 누적 시뮬레이션 (개선된 옐로우카드)")
    모드 = input("선택 (1-8): ")
    
    분석기 = 최적화투자분석(초기가격)
    
    if 모드 == "1":
        # 탈락 전략 데이터 자동 유지 (누적 학습 효과)
        if os.path.exists("탈락전략.json"):
            print("기존 탈락 전략 데이터 유지 → 누적 학습 효과 적용")
        
        # 27주 투자 시뮬레이션 실행
        print(f"27주 투자 패턴 분석 시작!")
        print("="*50)
        
        # 랜덤 데이터 생성
        일간데이터 = 분석기.랜덤_일별_데이터_생성()
        분석기.주간_집계_계산(일간데이터)
        
        # 시뮬레이션 실행
        결과 = 분석기.전략_비교_시뮬레이션()
        
        if 결과:
            print(f"\n최종 결과:")
            print(f"생존 전략: {len(결과['생존전략']):,}개")
            print(f"탈락 전략: {len(결과['탈락기록']):,}개")
            
            if '최고전략' in 결과 and 결과['최고전략']:
                최고전략 = 결과['최고전략']
                # 수익률 계산
                평가자산 = 최고전략['자본'] + 최고전략['주식수'] * (최고전략['이동평균'][-1] if 최고전략['이동평균'] else 100000)
                수익률 = ((평가자산 - 100000) / 100000) * 100
                
                print(f"\n최고 전략:")
                print(f"  수익률: {수익률:+.1f}%")
                print(f"  전략: {최고전략['매수기준명']}-{최고전략['매수하락률']}% + {최고전략['구매방식명']} + 손절{최고전략['손절라인']}% + {최고전략['매도전략명']}")
                print(f"  최종 자산: {평가자산:,.0f}원")
        else:
            print("시뮬레이션 실행 중 오류가 발생했습니다.")
    
    elif 모드 == "2":
        # 최고전략 히스토리 조회
        분석기._최고전략_히스토리_조회()
        
        print("\n💡 활용 팁:")
        print("- 히스토리에서 자주 등장하는 전략 패턴을 주목하세요")
        print("- 다양한 시장 환경에서 일관되게 좋은 성과를 내는 전략을 찾아보세요")
        print("- 극한 테스트 결과를 통해 전략의 안정성을 확인하세요")
    
    elif 모드 == "3":
        # 히스토리 전략 재검증
        print("\n재검증할 시장 환경:")
        print("1. 현재 환경 (새로운 랜덤 데이터)")
        print("2. 상승장 환경")
        print("3. 하락장 환경") 
        print("4. 횡보장 환경")
        환경선택 = input("선택 (1, 2, 3, 4): ")
        
        환경이름 = {
            "1": "현재환경",
            "2": "상승장환경", 
            "3": "하락장환경",
            "4": "횡보장환경"
        }.get(환경선택, "현재환경")
        
        # 환경별 데이터 생성
        if 환경선택 == "2":  # 상승장
            주별데이터 = [5, 8, 3, 7, 12]  # 전체적 상승
        elif 환경선택 == "3":  # 하락장
            주별데이터 = [-8, -5, -12, -3, -7]  # 전체적 하락
        elif 환경선택 == "4":  # 횡보장
            주별데이터 = [2, -1, 3, -2, 1]  # 작은 변동
        else:  # 현재환경
            주별데이터 = 분석기.랜덤_주별_데이터_생성()
        
        분석기.계층적_변동률_생성(주별데이터)
        분석기._히스토리_전략_재검증(환경이름)
        
        print(f"\n {환경이름} 재검증 완료!")
        print("- 기존 최고 전략들의 현재 환경 적응력을 확인했습니다")
        print("- 성과 차이를 통해 전략의 환경 민감도를 파악하세요")
    
    elif 모드 == "4":
        # 시장 상황별 성과 조회
        print("\n 시장 상황별 전략 성과 조회")
        print("="*50)
        분석기.상황별_성과시각화()
    
    elif 모드 == "5":
        # 현재 상황 기반 전략 추천
        print("\n 현재 상황 기반 전략 추천")
        print("="*50)
        
        # 현재 상황 분석
        현재상황 = 분석기.시장상황_분석()
        print(f"\n 현재 시장 상황:")
        print(f"   시장 체제: {현재상황['market_regime']}")
        print(f"   변동성: {현재상황['volatility_pattern']}")
        print(f"   추세: {현재상황['trend_pattern']}")
        print(f"   모멘텀: {현재상황['price_momentum']}")
        
        # 전략 추천
        print(f"\n 추천 전략:")
        추천전략들 = 분석기.유사상황_전략추천(현재상황)
        
        if 추천전략들:
            print(f"\n 추천 이유:")
            print(f"   과거 유사 상황에서 검증된 최적 전략들입니다")
            print(f"   현재 시장 조건과 {round(100 * len(추천전략들) / 3)}% 유사한 환경에서 우수한 성과를 보였습니다")
        else:
            print(f"\n 대안 제안:")
            print(f"   현재 시장 상황은 이전에 경험하지 못한 새로운 패턴입니다")
            print(f"   전략 비교 시뮬레이션(모드 1)을 통해 새로운 최적 전략을 발굴해보세요")
    
    elif 모드 == "6":
        # 포트폴리오 전략 시뮬레이션
        print("\n 포트폴리오 전략 시뮬레이션")
        print("="*50)
        분석기._포트폴리오_시뮬레이션()
    
    elif 모드 == "7":
        # 포트폴리오 히스토리 조회
        print("\n 포트폴리오 히스토리 조회")
        print("="*50)
        분석기._포트폴리오_히스토리_조회()
    
    elif 모드 == "8":
        # 5사이클 누적 시뮬레이션 (개선된 옐로우카드)
        print(f"5사이클 누적 시뮬레이션 시작!")
        print("개선된 옐로우카드: 매주 1개씩, 총 12개 누적시 탈락")
        print("="*60)
        
        # 5사이클 실행
        결과 = 분석기._5사이클_누적_시뮬레이션()
        
        if 결과:
            print(f"\n5사이클 시뮬레이션 완료!")
            print(f"결과가 '종합전략랭킹.json'에 저장되었습니다.")
        else:
            print("5사이클 시뮬레이션 실행 중 오류가 발생했습니다.")
    
    else:
        print("올바른 모드를 선택해주세요 (1-8)")
        return

    def 시장상황_분석(self):
        """현재 시장 상황을 다각도로 분석"""
        상황분석 = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'volatility_pattern': self._변동성_패턴_분석(),
            'trend_pattern': self._추세_패턴_분석(),
            'price_momentum': self._가격_모멘텀_분석(),
            'market_regime': self._시장체제_분석()
        }
        return 상황분석
    
    def _변동성_패턴_분석(self):
        """변동성 패턴 분석 (안정/보통/변동/급변동/극단)"""
        if not self.일간데이터:
            return "데이터부족"
            
        # 일간 변동률들의 표준편차 계산
        if NUMPY_AVAILABLE:
            변동성 = np.std(self.일간데이터)
        else:
            # 수동으로 표준편차 계산
            평균 = sum(self.일간데이터) / len(self.일간데이터)
            분산 = sum((x - 평균) ** 2 for x in self.일간데이터) / len(self.일간데이터)
            변동성 = math.sqrt(분산)
        
        if 변동성 <= 3:
            return "저변동성"  # 안정장
        elif 변동성 <= 8:
            return "중변동성"  # 보통장 
        elif 변동성 <= 15:
            return "고변동성"  # 변동장
        elif 변동성 <= 25:
            return "초고변동성"  # 급변동장
        else:
            return "극한변동성"  # 극단적 상황
    
    def _추세_패턴_분석(self):
        """추세 패턴 분석 (상승/하락/횡보)"""
        if len(self.일간데이터) < 5:
            return "데이터부족"
            
        # 최근 5일간 추세 계산
        최근5일 = self.일간데이터[-5:]
        누적변동 = sum(최근5일)
        
        # 추세 강도도 함께 분석
        추세강도 = abs(누적변동) / 5  # 평균 절댓값
        
        if 누적변동 > 5 and 추세강도 > 2:
            return "강한상승추세"
        elif 누적변동 > 0 and 추세강도 > 1:
            return "약한상승추세"  
        elif 누적변동 < -5 and 추세강도 > 2:
            return "강한하락추세"
        elif 누적변동 < 0 and 추세강도 > 1:
            return "약한하락추세"
        else:
            return "횡보장"
    
    def _가격_모멘텀_분석(self):
        """가격 모멘텀 분석"""
        if len(self.시간데이터) < 10:
            return "데이터부족"
            
        # 최근 시간별 변동의 가속도 분석
        최근10시간 = self.시간데이터[-10:]
        상승횟수 = sum(1 for x in 최근10시간 if x > 0)
        하락횟수 = sum(1 for x in 최근10시간 if x < 0)
        
        if 상승횟수 >= 7:
            return "강한상승모멘텀"
        elif 상승횟수 >= 6:
            return "상승모멘텀"
        elif 하락횟수 >= 7:
            return "강한하락모멘텀"
        elif 하락횟수 >= 6:
            return "하락모멘텀"
        else:
            return "중립모멘텀"
    
    def _시장체제_분석(self):
        """종합적인 시장 체제 분석"""
        변동성 = self._변동성_패턴_분석()
        추세 = self._추세_패턴_분석()
        모멘텀 = self._가격_모멘텀_분석()
        
        # 복합적인 시장 상황 판단
        if "극한" in 변동성:
            if "강한하락" in 추세:
                return "공황장"
            elif "강한상승" in 추세:
                return "버블장"
            else:
                return "혼란장"
        elif "초고" in 변동성:
            if "하락" in 추세:
                return "약세장"  
            elif "상승" in 추세:
                return "강세장"
            else:
                return "변동장"
        elif "고" in 변동성:
            if "모멘텀" in 모멘텀:
                return "활발장"
            else:
                return "불안장"
        else:
            if "횡보" in 추세:
                return "안정장"
            else:
                return "조정장"
    
    def 전략성과_저장(self, 시장상황, 전략결과들, 파일명="시장상황별_전략성과.json"):
        """시장 상황별 전략 성과를 저장"""
        try:
            # 기존 데이터 로드
            if os.path.exists(파일명):
                with open(파일명, 'r', encoding='utf-8') as f:
                    기존데이터 = json.load(f)
            else:
                기존데이터 = {}
            
            # 시장 상황을 키로 사용
            상황키 = f"{시장상황['volatility_pattern']}_{시장상황['trend_pattern']}_{시장상황['market_regime']}"
            
            if 상황키 not in 기존데이터:
                기존데이터[상황키] = {
                    'market_condition': 시장상황,
                    'strategy_performances': [],
                    'best_strategies': [],
                    'analysis_count': 0
                }
            
            # 전략 성과 추가
            기존데이터[상황키]['strategy_performances'].append({
                'timestamp': 시장상황['timestamp'],
                'results': 전략결과들[:10]  # 상위 10개만 저장
            })
            
            # 최고 전략들 업데이트 (상위 3개)
            상위3개 = sorted(전략결과들, key=lambda x: x['수익률'], reverse=True)[:3]
            기존데이터[상황키]['best_strategies'] = 상위3개
            기존데이터[상황키]['analysis_count'] += 1
            
            # 저장
            with open(파일명, 'w', encoding='utf-8') as f:
                json.dump(기존데이터, f, ensure_ascii=False, indent=2)
                
            print(f"시장 상황 '{상황키}' 전략 성과 저장 완료")
            return True
            
        except Exception as e:
            print(f"전략 성과 저장 실패: {e}")
            return False
    
    def 유사상황_전략추천(self, 현재상황, 파일명="시장상황별_전략성과.json"):
        """현재 상황과 유사한 과거 상황의 최적 전략 추천"""
        try:
            if not os.path.exists(파일명):
                print("과거 전략 성과 데이터가 없습니다.")
                return None
                
            with open(파일명, 'r', encoding='utf-8') as f:
                과거데이터 = json.load(f)
            
            현재키 = f"{현재상황['volatility_pattern']}_{현재상황['trend_pattern']}_{현재상황['market_regime']}"
            
            # 정확히 일치하는 상황 찾기
            if 현재키 in 과거데이터:
                정확일치 = 과거데이터[현재키]
                print(f"정확히 일치하는 과거 상황 발견!")
                print(f"   분석 횟수: {정확일치['analysis_count']}회")
                print(f"   추천 전략 (상위 3개):")
                
                for i, 전략 in enumerate(정확일치['best_strategies'], 1):
                    print(f"   {i}. {전략['전략설명']} (수익률: {전략['수익률']:+.2f}%)")
                
                return 정확일치['best_strategies']
            
            # 부분 일치하는 상황들 찾기  
            부분일치들 = []
            for 키, 데이터 in 과거데이터.items():
                일치점수 = 0
                키_요소들 = 키.split('_')
                현재_요소들 = 현재키.split('_')
                
                # 각 요소별 일치도 계산
                if 키_요소들[0] == 현재_요소들[0]:  # 변동성 패턴
                    일치점수 += 3
                if 키_요소들[1] == 현재_요소들[1]:  # 추세 패턴  
                    일치점수 += 2
                if 키_요소들[2] == 현재_요소들[2]:  # 시장 체제
                    일치점수 += 4
                
                if 일치점수 > 0:
                    부분일치들.append({
                        'key': 키,
                        'score': 일치점수,
                        'data': 데이터
                    })
            
            if 부분일치들:
                # 일치 점수 순으로 정렬
                부분일치들.sort(key=lambda x: x['score'], reverse=True)
                최고일치 = 부분일치들[0]
                
                print(f"유사한 과거 상황 발견 (일치도: {최고일치['score']}/9)")
                print(f"   과거 상황: {최고일치['key']}")
                print(f"   분석 횟수: {최고일치['data']['analysis_count']}회")
                print(f"   추천 전략 (상위 3개):")
                
                for i, 전략 in enumerate(최고일치['data']['best_strategies'], 1):
                    print(f"   {i}. {전략['전략설명']} (수익률: {전략['수익률']:+.2f}%)")
                
                return 최고일치['data']['best_strategies']
            
            print("유사한 과거 상황을 찾을 수 없습니다.")
            return None
            
        except Exception as e:
            print(f"전략 추천 실패: {e}")
            return None
    
    def 상황별_성과시각화(self, 파일명="시장상황별_전략성과.json"):
        """저장된 시장 상황별 전략 성과를 시각화"""
        try:
            if not os.path.exists(파일명):
                print("시각화할 데이터가 없습니다.")
                return
                
            with open(파일명, 'r', encoding='utf-8') as f:
                데이터 = json.load(f)
            
            print("\n" + "="*80)
            print("시장 상황별 전략 성과 요약")
            print("="*80)
            
            for 상황키, 상황데이터 in 데이터.items():
                print(f"\n 상황: {상황키}")
                print(f"   분석 횟수: {상황데이터['analysis_count']}회")
                
                if 상황데이터['best_strategies']:
                    최고전략 = 상황데이터['best_strategies'][0]
                    평균수익 = sum(s['수익률'] for s in 상황데이터['best_strategies']) / len(상황데이터['best_strategies'])
                    
                    print(f"   최고 수익률: {최고전략['수익률']:+.2f}% ({최고전략['전략설명']})")
                    print(f"   상위3개 평균: {평균수익:+.2f}%")
                
                # 시장 상황 상세 정보
                시장정보 = 상황데이터['market_condition']
                print(f"   시장 체제: {시장정보['market_regime']}")
                print(f"   변동성: {시장정보['volatility_pattern']}")  
                print(f"   추세: {시장정보['trend_pattern']}")
                print(f"   모멘텀: {시장정보['price_momentum']}")
            
            # 전체 통계
            총분석횟수 = sum(d['analysis_count'] for d in 데이터.values())
            상위전략들 = []
            for 상황데이터 in 데이터.values():
                상위전략들.extend(상황데이터['best_strategies'])
            
            if 상위전략들:
                전체평균 = sum(s['수익률'] for s in 상위전략들) / len(상위전략들)
                최고수익 = max(상위전략들, key=lambda x: x['수익률'])
                
                print(f"\n 전체 통계:")
                print(f"   총 분석 상황: {len(데이터)}개")
                print(f"   총 분석 횟수: {총분석횟수}회") 
                print(f"   전체 평균 수익률: {전체평균:+.2f}%")
                print(f"   역대 최고 수익률: {최고수익['수익률']:+.2f}% ({최고수익['전략설명']})")
            
        except Exception as e:
            print(f" 시각화 실패: {e}")
    
    def _포트폴리오_시뮬레이션(self):
        """여러 전략을 비율로 조합한 포트폴리오 시뮬레이션"""
        print("\n 포트폴리오 전략 구성")
        print("="*60)
        
        # 현재 상황 분석
        현재상황 = self.시장상황_분석()
        print(f"현재 시장 상황:")
        print(f"   시장 체제: {현재상황['market_regime']}")
        print(f"   변동성: {현재상황['volatility_pattern']}")
        print(f"   추세: {현재상황['trend_pattern']}")
        
        # 추천 전략 가져오기
        추천전략들 = self.유사상황_전략추천(현재상황)
        
        if not 추천전략들:
            print("\n포트폴리오 구성을 위한 추천 전략이 없습니다.")
            print("먼저 모드 1로 전략 시뮬레이션을 실행하여 기본 전략들을 축적하세요.")
            return
        
        # 포트폴리오 구성 옵션 제시
        print(f"\n포트폴리오 구성 옵션:")
        print(f"1. 자동 균등 분배 ({len(추천전략들)}개 전략 균등)")
        print(f"2. 성과 기반 가중 분배 (수익률에 따른 비중)")
        print(f"3. 수동 비율 설정")
        print(f"4. 리스크 분산 분배 (서로 다른 매수/매도 조건)")
        
        # 리밸런싱 옵션도 함께 선택
        print(f"\n리밸런싱 옵션:")
        print(f"a. 리밸런싱 없음 (초기 배분 유지)")
        print(f"b. 주간 리밸런싱 (매주 금요일)")
        print(f"c. 일일 리밸런싱 (매일 종료 후)")
        
        구성방식 = input("포트폴리오 구성 방식 선택 (1-4): ")
        리밸런싱방식 = input("리밸런싱 방식 선택 (a/b/c): ")
        
        if 구성방식 == "1":
            # 균등 분배
            비율목록 = [100 / len(추천전략들) for _ in 추천전략들]
            포트폴리오 = self._균등분배_포트폴리오생성(추천전략들, 비율목록)
        elif 구성방식 == "2":
            # 성과 기반 가중 분배
            포트폴리오 = self._성과기반_포트폴리오생성(추천전략들)
        elif 구성방식 == "3":
            # 수동 비율 설정
            포트폴리오 = self._수동비율_포트폴리오생성(추천전략들)
        elif 구성방식 == "4":
            # 리스크 분산 분배
            포트폴리오 = self._리스크분산_포트폴리오생성(추천전략들)
        else:
            print("잘못된 선택입니다.")
            return
        
        if not 포트폴리오:
            return
        
        # 리밸런싱 설정 추가
        포트폴리오['리밸런싱방식'] = 리밸런싱방식
        
        # 포트폴리오 시뮬레이션 실행
        print(f"\n포트폴리오 시뮬레이션 시작")
        print("="*60)
        
        결과 = self._포트폴리오_실행(포트폴리오)
        
        # 결과 분석 및 개별 전략과 비교
        self._포트폴리오_결과분석(결과, 포트폴리오)
    
    def _균등분배_포트폴리오생성(self, 추천전략들, 비율목록):
        """균등 분배 포트폴리오 생성"""
        포트폴리오 = {
            '전략들': [],
            '총자본': 100000,
            '구성방식': '균등분배'
        }
        
        for i, (전략, 비율) in enumerate(zip(추천전략들, 비율목록)):
            전략정보 = self._추천전략을_실행전략으로_변환(전략)
            전략정보['할당자본'] = 포트폴리오['총자본'] * (비율 / 100)
            전략정보['할당비율'] = 비율
            전략정보['포트폴리오_ID'] = f"전략{i+1}"
            포트폴리오['전략들'].append(전략정보)
        
        print(f"\n균등분배 포트폴리오 생성 완료")
        for i, 전략 in enumerate(포트폴리오['전략들']):
            print(f"  전략{i+1}: {전략['전략설명'][:50]} ({전략['할당비율']:.1f}%)")
        
        return 포트폴리오
    
    def _성과기반_포트폴리오생성(self, 추천전략들):
        """성과 기반 가중 분배 포트폴리오"""
        # 수익률의 제곱으로 가중치 계산 (높은 수익률에 더 큰 비중)
        수익률들 = [max(전략['수익률'], 0.1) for 전략 in 추천전략들]  # 음수 방지
        제곱수익률들 = [r ** 1.5 for r in 수익률들]  # 1.5제곱으로 차등 강화
        총합 = sum(제곱수익률들)
        비율목록 = [(r / 총합) * 100 for r in 제곱수익률들]
        
        포트폴리오 = {
            '전략들': [],
            '총자본': 100000,
            '구성방식': '성과기반가중'
        }
        
        for i, (전략, 비율) in enumerate(zip(추천전략들, 비율목록)):
            전략정보 = self._추천전략을_실행전략으로_변환(전략)
            전략정보['할당자본'] = 포트폴리오['총자본'] * (비율 / 100)
            전략정보['할당비율'] = 비율
            전략정보['포트폴리오_ID'] = f"전략{i+1}"
            전략정보['기대수익률'] = 전략['수익률']
            포트폴리오['전략들'].append(전략정보)
        
        print(f"\n성과기반 가중분배 포트폴리오 생성 완료")
        for i, 전략 in enumerate(포트폴리오['전략들']):
            print(f"  전략{i+1}: {전략['전략설명'][:40]} ({전략['할당비율']:.1f}%, 기대수익 {전략['기대수익률']:+.1f}%)")
        
        return 포트폴리오
    
    def _수동비율_포트폴리오생성(self, 추천전략들):
        """수동 비율 설정 포트폴리오"""
        print(f"\n전략별 수동 비율 설정:")
        비율목록 = []
        
        for i, 전략 in enumerate(추천전략들):
            print(f"\n전략 {i+1}: {전략['전략설명']}")
            print(f"  과거 수익률: {전략['수익률']:+.2f}%")
            print(f"  거래 횟수: {전략['거래횟수']}회")
            
            while True:
                try:
                    비율 = float(input(f"  할당 비율 (%) 입력: "))
                    if 0 <= 비율 <= 100:
                        비율목록.append(비율)
                        break
                    else:
                        print("0~100 사이의 값을 입력하세요.")
                except ValueError:
                    print("올바른 숫자를 입력하세요.")
        
        총비율 = sum(비율목록)
        if abs(총비율 - 100) > 0.1:
            print(f"총 비율이 {총비율:.1f}%입니다. 100%로 정규화합니다.")
            비율목록 = [(r / 총비율) * 100 for r in 비율목록]
        
        return self._균등분배_포트폴리오생성(추천전략들, 비율목록)
    
    def _리스크분산_포트폴리오생성(self, 추천전략들):
        """리스크 분산형 포트폴리오"""
        # 서로 다른 매수/매도 조건을 가진 전략들을 우선 선별
        다양성점수 = {}
        for i, 전략1 in enumerate(추천전략들):
            점수 = 0
            for j, 전략2 in enumerate(추천전략들):
                if i != j:
                    # 매수 조건 차이
                    if 전략1['전략상세']['매수기준'] != 전략2['전략상세']['매수기준']:
                        점수 += 2
                    if abs(전략1['전략상세']['매수하락률'] - 전략2['전략상세']['매수하락률']) > 2:
                        점수 += 1
                    # 매도 조건 차이
                    if 전략1['전략상세']['매도전략'] != 전략2['전략상세']['매도전략']:
                        점수 += 2
            다양성점수[i] = 점수
        
        # 다양성 점수 기반 비중 계산
        총다양성 = sum(다양성점수.values()) or 1
        비율목록 = [(다양성점수[i] / 총다양성) * 100 for i in range(len(추천전략들))]
        
        포트폴리오 = self._균등분배_포트폴리오생성(추천전략들, 비율목록)
        포트폴리오['구성방식'] = '리스크분산'
        
        print(f"\n리스크 분산 포트폴리오 생성 완료 (다양성 중심)")
        return 포트폴리오
    
    def _추천전략을_실행전략으로_변환(self, 추천전략):
        """추천받은 전략을 실행 가능한 전략 객체로 변환"""
        상세 = 추천전략['전략상세']
        
        # 기본 전략 구조 생성
        전략 = {
            '전략설명': 추천전략['전략설명'],
            '자본': 0,  # 할당자본에서 설정됨
            '주식수': 0,
            '매수가격': 0,
            '최고가격': 0,
            '이동평균': [],
            '거래내역': [],
            
            # 매수 설정
            '매수기준명': 상세['매수기준'],
            '매수하락률': 상세['매수하락률'],
            '구매방식명': 상세['구매방식'],
            
            # 매도 설정  
            '매도전략명': 상세['매도전략'],
            '손절라인': 상세['손절라인'],
            
            # 매수 기준 코드 (간단 매핑)
            '매수기준': '1' if '시가' in 상세['매수기준'] else '2',
            '매도전략': '1' if '수익' in 상세['매도전략'] else '2',
            '구매방식': '1',
            '매수수량': 0.1  # 10% 비중으로 기본 설정
        }
        
        return 전략
    
    def _포트폴리오_실행(self, 포트폴리오):
        """포트폴리오 시뮬레이션 실행"""
        for 전략 in 포트폴리오['전략들']:
            전략['자본'] = 전략['할당자본']
            # 과거 데이터 복사
            전략['이동평균'] = self.과거데이터.copy()
        
        결과 = {
            '일별결과': [],
            '전략별누적': {},
            '포트폴리오총자산': [],
            '개별전략성과': []
        }
        
        # 135일 (27주) 시뮬레이션
        for 일차 in range(135):
            주차 = (일차 // 5) + 1
            요일 = 일차 % 5 + 1  # 1=월요일, 5=금요일
            print(f"\n{주차}주차 {일차+1}일 포트폴리오 운영")
            
            일일포트폴리오결과 = {}
            일일총자산 = 0
            
            # 각 전략별 독립 실행
            for 전략 in 포트폴리오['전략들']:
                전략ID = 전략['포트폴리오_ID']
                일일결과 = self._일일_시뮬레이션(전략, 일차)
                
                일일포트폴리오결과[전략ID] = {
                    '수익률': 일일결과['수익률'],
                    '거래횟수': 일일결과['거래횟수'],
                    '현재자산': 일일결과['현재자산']
                }
                일일총자산 += 일일결과['현재자산']
                
                print(f"  {전략ID}: {일일결과['수익률']:+5.1f}% (거래 {일일결과['거래횟수']}회)")
            
            # 전체 포트폴리오 성과
            전체수익률 = ((일일총자산 - 포트폴리오['총자본']) / 포트폴리오['총자본']) * 100
            결과['일별결과'].append(일일포트폴리오결과)
            결과['포트폴리오총자산'].append(일일총자산)
            
            print(f"  포트폴리오 총 수익률: {전체수익률:+.2f}% (총자산: {일일총자산:,.0f}원)")
            
            # 리밸런싱 체크
            리밸런싱실행 = False
            if 포트폴리오.get('리밸런싱방식') == 'b' and 요일 == 5:  # 주간 리밸런싱 (금요일)
                리밸런싱실행 = True
                print(f"  주간 리밸런싱 실행!")
            elif 포트폴리오.get('리밸런싱방식') == 'c':  # 일일 리밸런싱
                리밸런싱실행 = True
                print(f"  일일 리밸런싱 실행!")
            
            if 리밸런싱실행:
                리밸런싱결과 = self._포트폴리오_리밸런싱(포트폴리오, 일일총자산)
                if 리밸런싱결과['수행됨']:
                    print(f"    자산 재배분 완료")
                    for 변경사항 in 리밸런싱결과['변경사항']:
                        print(f"      {변경사항}")
            
            # 포트폴리오 탈락 체크 후 엔터키 대기
            if 일차 < 134 and (일차 % 5 == 4):  # 주내일차 5일째 (금요일)
                if 일일총자산 <= 60000:  # 탈락 기준
                    주차 = (일차 // 5) + 1
                    print(f"\n{주차}주차 포트폴리오 탈락! 총 자산: {일일총자산:,.0f}원")
                    break  # 탈락시 시뮬레이션 종료
        
        return 결과
    
    def _포트폴리오_리밸런싱(self, 포트폴리오, 현재총자산):
        """포트폴리오 리밸런싱 실행"""
        리밸런싱결과 = {
            '수행됨': False,
            '변경사항': []
        }
        
        # 현재 각 전략의 실제 자산 비중 계산
        현재비중들 = []
        목표비중들 = []
        
        for 전략 in 포트폴리오['전략들']:
            전략자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
            현재비중 = (전략자산 / 현재총자산) * 100 if 현재총자산 > 0 else 0
            목표비중 = 전략['할당비율']
            
            현재비중들.append(현재비중)
            목표비중들.append(목표비중)
        
        # 리밸런싱이 필요한지 판단 (5% 이상 차이나는 전략이 있으면 실행)
        리밸런싱필요 = any(abs(현재비중 - 목표비중) > 5 for 현재비중, 목표비중 in zip(현재비중들, 목표비중들))
        
        if not 리밸런싱필요:
            return 리밸런싱결과
        
        # 리밸런싱 실행: 모든 주식 매도 후 목표 비중으로 재배분
        for i, 전략 in enumerate(포트폴리오['전략들']):
            현재가격 = 전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격
            
            # 기존 주식 모두 매도
            if 전략['주식수'] > 0:
                매도금액 = 전략['주식수'] * 현재가격
                전략['자본'] += 매도금액
                전략['주식수'] = 0
                전략['매수가격'] = 0
                전략['거래내역'].append(('리밸런싱매도', '리밸런싱', 0, 현재가격, 전략['주식수']))
            
            # 목표 비중에 맞춰 자본 재배분
            목표자본 = 현재총자산 * (목표비중들[i] / 100)
            자본차이 = 목표자본 - 전략['자본']
            
            if abs(자본차이) > 100:  # 100원 이상 차이날 때만 재배분
                if 자본차이 > 0:
                    # 자본 추가 필요 - 다른 전략에서 가져오기
                    전략['자본'] += 자본차이
                    변경사항 = f"{전략['포트폴리오_ID']}: +{자본차이:,.0f}원 ({현재비중들[i]:.1f}%→{목표비중들[i]:.1f}%)"
                else:
                    # 자본 감소 필요 - 다른 전략에게 주기
                    전략['자본'] += 자본차이  # 음수이므로 실제로는 감소
                    변경사항 = f"{전략['포트폴리오_ID']}: {자본차이:,.0f}원 ({현재비중들[i]:.1f}%→{목표비중들[i]:.1f}%)"
                
                리밸런싱결과['변경사항'].append(변경사항)
        
        if 리밸런싱결과['변경사항']:
            리밸런싱결과['수행됨'] = True
        
        return 리밸런싱결과
    
    def _포트폴리오_결과분석(self, 결과, 포트폴리오):
        """포트폴리오 결과 분석 및 개별 전략과 비교"""
        print(f"\n{'='*80}")
        print(f"포트폴리오 최종 결과 분석")
        print(f"{'='*80}")
        
        if not 결과['포트폴리오총자산']:
            print("분석할 결과가 없습니다.")
            return
        
        최종총자산 = 결과['포트폴리오총자산'][-1]
        최종수익률 = ((최종총자산 - 포트폴리오['총자본']) / 포트폴리오['총자본']) * 100
        
        리밸런싱방식명 = {'a': '없음', 'b': '주간', 'c': '일일'}.get(포트폴리오.get('리밸런싱방식', 'a'), '없음')
        
        print(f"💼 포트폴리오 성과 ({포트폴리오['구성방식']} + {리밸런싱방식명} 리밸런싱):")
        print(f"  초기 자본: {포트폴리오['총자본']:,.0f}원")
        print(f"  최종 자산: {최종총자산:,.0f}원")
        print(f"  총 수익률: {최종수익률:+.2f}%")
        
        # 개별 전략 성과
        print(f"\n전략별 기여도:")
        총기여수익 = 0
        for 전략 in 포트폴리오['전략들']:
            전략자산 = 전략['자본'] + 전략['주식수'] * (전략['이동평균'][-1] if 전략['이동평균'] else self.초기가격)
            전략수익률 = ((전략자산 - 전략['할당자본']) / 전략['할당자본']) * 100
            기여수익 = (전략자산 - 전략['할당자본'])
            총기여수익 += 기여수익
            
            print(f"  {전략['포트폴리오_ID']}: {전략수익률:+6.2f}% "
                  f"(비중 {전략['할당비율']:4.1f}%, 기여수익 {기여수익:+8.0f}원)")
        
        # 리스크 분석
        포트폴리오수익률들 = []
        for i in range(len(결과['포트폴리오총자산'])):
            수익률 = ((결과['포트폴리오총자산'][i] - 포트폴리오['총자본']) / 포트폴리오['총자본']) * 100
            포트폴리오수익률들.append(수익률)
        
        if len(포트폴리오수익률들) > 1:
            수익률변동성 = self._변동성계산(포트폴리오수익률들)
            최대낙폭 = self._최대낙폭계산(포트폴리오수익률들)
            
            print(f"\n리스크 분석:")
            print(f"  수익률 변동성: {수익률변동성:.2f}%")
            print(f"  최대 낙폭 (MDD): {최대낙폭:.2f}%")
            print(f"  샤프 비율 추정: {최종수익률 / max(수익률변동성, 0.1):.2f}")
        
        # 포트폴리오 효과 분석
        print(f"\n포트폴리오 효과:")
        단순평균수익률 = sum(전략['기대수익률'] for 전략 in 포트폴리오['전략들'] if '기대수익률' in 전략) / len(포트폴리오['전략들'])
        
        if abs(단순평균수익률) > 0.1:
            포트폴리오효과 = 최종수익률 - 단순평균수익률
            print(f"  개별 전략 단순평균: {단순평균수익률:+.2f}%")
            print(f"  포트폴리오 실제 성과: {최종수익률:+.2f}%")
            print(f"  포트폴리오 효과: {포트폴리오효과:+.2f}% ({'시너지' if 포트폴리오효과 > 0 else '상쇄'})")
        
        # 포트폴리오 저장 제안
        저장여부 = input(f"\n이 포트폴리오 구성을 저장하시겠습니까? (y/n): ")
        if 저장여부.lower() == 'y':
            self._포트폴리오_저장(포트폴리오, 최종수익률)
    
    def _변동성계산(self, 수익률목록):
        """수익률 변동성 계산"""
        if NUMPY_AVAILABLE:
            return float(np.std(수익률목록))
        else:
            평균 = sum(수익률목록) / len(수익률목록)
            분산 = sum((x - 평균) ** 2 for x in 수익률목록) / len(수익률목록)
            return math.sqrt(분산)
    
    def _최대낙폭계산(self, 수익률목록):
        """최대 낙폭 (Maximum Drawdown) 계산"""
        최고점 = 수익률목록[0]
        최대낙폭 = 0
        
        for 수익률 in 수익률목록:
            if 수익률 > 최고점:
                최고점 = 수익률
            else:
                낙폭 = 최고점 - 수익률
                if 낙폭 > 최대낙폭:
                    최대낙폭 = 낙폭
        
        return 최대낙폭
    
    def _포트폴리오_저장(self, 포트폴리오, 최종수익률):
        """포트폴리오 구성을 파일에 저장"""
        try:
            파일명 = "포트폴리오_구성.json"
            
            # 기존 데이터 로드
            if os.path.exists(파일명):
                with open(파일명, 'r', encoding='utf-8') as f:
                    기존데이터 = json.load(f)
            else:
                기존데이터 = []
            
            # 새 포트폴리오 추가
            새포트폴리오 = {
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                '구성방식': 포트폴리오['구성방식'],
                '총자본': 포트폴리오['총자본'],
                '최종수익률': 최종수익률,
                '전략구성': []
            }
            
            for 전략 in 포트폴리오['전략들']:
                새포트폴리오['전략구성'].append({
                    'ID': 전략['포트폴리오_ID'],
                    '전략설명': 전략['전략설명'],
                    '할당비율': 전략['할당비율'],
                    '할당자본': 전략['할당자본']
                })
            
            기존데이터.append(새포트폴리오)
            
            # 저장
            with open(파일명, 'w', encoding='utf-8') as f:
                json.dump(기존데이터, f, ensure_ascii=False, indent=2)
            
            print(f"포트폴리오 구성이 '{파일명}'에 저장되었습니다.")
            print(f"   총 {len(기존데이터)}개의 포트폴리오가 기록되어 있습니다.")
            
        except Exception as e:
            print(f"포트폴리오 저장 실패: {e}")
    
    def _포트폴리오_히스토리_조회(self):
        """저장된 포트폴리오 히스토리 조회 및 비교"""
        파일명 = "포트폴리오_구성.json"
        
        if not os.path.exists(파일명):
            print("저장된 포트폴리오가 없습니다.")
            print("먼저 모드 6으로 포트폴리오 시뮬레이션을 실행하세요.")
            return
        
        try:
            with open(파일명, 'r', encoding='utf-8') as f:
                포트폴리오목록 = json.load(f)
            
            if not 포트폴리오목록:
                print("저장된 포트폴리오가 없습니다.")
                return
        
            print(f"\n저장된 포트폴리오 목록 (총 {len(포트폴리오목록)}개)")
            print("="*90)
            print(f"{'번호':^4} {'생성일시':^16} {'구성방식':^12} {'리밸런싱':^8} {'수익률':^8} {'전략수':^6} {'비고':^20}")
            print("-"*90)
            
            # 수익률 순으로 정렬
            정렬된목록 = sorted(포트폴리오목록, key=lambda x: x['최종수익률'], reverse=True)
            
            for i, 포트폴리오 in enumerate(정렬된목록):
                생성일시 = 포트폴리오['timestamp'][:16]
                구성방식 = 포트폴리오['구성방식']
                리밸런싱방식 = 포트폴리오.get('리밸런싱방식', 'a')
                리밸런싱명 = {'a': '없음', 'b': '주간', 'c': '일일'}.get(리밸런싱방식, '없음')
                수익률 = 포트폴리오['최종수익률']
                전략수 = len(포트폴리오['전략구성'])
                
                # 성과에 따른 이모지
                if 수익률 > 20:
                    성과이모지 = "대박"
                elif 수익률 > 10:
                    성과이모지 = "우수"
                elif 수익률 > 0:
                    성과이모지 = "수익"
                else:
                    성과이모지 = "손실"
                
                print(f"{i+1:^4} {생성일시:^16} {구성방식:^12} {리밸런싱명:^8} {수익률:^+8.2f}% {전략수:^6} {성과이모지:^20}")
            
            print("="*90)
            
            # 상세 조회 옵션
            print(f"\n상세 분석 옵션:")
            print(f"1. 특정 포트폴리오 상세 조회")
            print(f"2. 구성 방식별 성과 비교")
            print(f"3. 리밸런싱 효과 분석")
            print(f"4. 최고 성과 포트폴리오 재현")
            
            선택 = input("선택 (1-4, Enter=종료): ")
            
            if 선택 == "1":
                self._포트폴리오_상세조회(정렬된목록)
            elif 선택 == "2":
                self._구성방식별_성과비교(포트폴리오목록)
            elif 선택 == "3":
                self._리밸런싱_효과분석(포트폴리오목록)
            elif 선택 == "4":
                self._최고성과_포트폴리오_재현(정렬된목록)
            
        except Exception as e:
            print(f"포트폴리오 히스토리 조회 실패: {e}")
    
    def _포트폴리오_상세조회(self, 포트폴리오목록):
        """특정 포트폴리오 상세 조회"""
        번호 = input(f"조회할 포트폴리오 번호 (1-{len(포트폴리오목록)}): ")
        
        try:
            인덱스 = int(번호) - 1
            if 0 <= 인덱스 < len(포트폴리오목록):
                포트폴리오 = 포트폴리오목록[인덱스]
                
                print(f"\n포트폴리오 상세 정보")
                print("="*60)
                print(f"생성 일시: {포트폴리오['timestamp']}")
                print(f"구성 방식: {포트폴리오['구성방식']}")
                print(f"총 자본: {포트폴리오['총자본']:,.0f}원")
                print(f"최종 수익률: {포트폴리오['최종수익률']:+.2f}%")
                
                print(f"\n전략 구성:")
                for 전략 in 포트폴리오['전략구성']:
                    print(f"  {전략['ID']}: {전략['전략설명'][:50]}")
                    print(f"    할당 비율: {전략['할당비율']:5.1f}% ({전략['할당자본']:,.0f}원)")
                
            else:
                print("잘못된 번호입니다.")
        except ValueError:
            print("올바른 번호를 입력하세요.")
    
    def _구성방식별_성과비교(self, 포트폴리오목록):
        """구성 방식별 성과 비교"""
        방식별통계 = {}
        
        for 포트폴리오 in 포트폴리오목록:
            방식 = 포트폴리오['구성방식']
            if 방식 not in 방식별통계:
                방식별통계[방식] = []
            방식별통계[방식].append(포트폴리오['최종수익률'])
        
        print(f"\n구성 방식별 성과 비교")
        print("="*60)
        print(f"{'구성방식':^15} {'개수':^6} {'평균수익률':^10} {'최고수익률':^10} {'최저수익률':^10}")
        print("-"*60)
        
        for 방식, 수익률목록 in 방식별통계.items():
            개수 = len(수익률목록)
            평균 = sum(수익률목록) / 개수
            최고 = max(수익률목록)
            최저 = min(수익률목록)
            
            print(f"{방식:^15} {개수:^6} {평균:^+10.2f}% {최고:^+10.2f}% {최저:^+10.2f}%")
    
    def _리밸런싱_효과분석(self, 포트폴리오목록):
        """리밸런싱 효과 분석"""
        리밸런싱별통계 = {}
        
        for 포트폴리오 in 포트폴리오목록:
            리밸런싱 = 포트폴리오.get('리밸런싱방식', 'a')
            리밸런싱명 = {'a': '없음', 'b': '주간', 'c': '일일'}.get(리밸런싱, '없음')
            
            if 리밸런싱명 not in 리밸런싱별통계:
                리밸런싱별통계[리밸런싱명] = []
            리밸런싱별통계[리밸런싱명].append(포트폴리오['최종수익률'])
        
        print(f"\n리밸런싱 효과 분석")
        print("="*60)
        print(f"{'리밸런싱':^10} {'개수':^6} {'평균수익률':^10} {'최고수익률':^10} {'최저수익률':^10}")
        print("-"*60)
        
        for 리밸런싱, 수익률목록 in 리밸런싱별통계.items():
            개수 = len(수익률목록)
            평균 = sum(수익률목록) / 개수
            최고 = max(수익률목록)
            최저 = min(수익률목록)
            
            print(f"{리밸런싱:^10} {개수:^6} {평균:^+10.2f}% {최고:^+10.2f}% {최저:^+10.2f}%")
        
        # 리밸런싱 효과 요약
        if '없음' in 리밸런싱별통계 and len(리밸런싱별통계) > 1:
            없음평균 = sum(리밸런싱별통계['없음']) / len(리밸런싱별통계['없음'])
            
            print(f"\n리밸런싱 효과 요약:")
            for 리밸런싱, 수익률목록 in 리밸런싱별통계.items():
                if 리밸런싱 != '없음':
                    평균 = sum(수익률목록) / len(수익률목록)
                    효과 = 평균 - 없음평균
                    print(f"  {리밸런싱} vs 없음: {효과:+.2f}%p ({'유리' if 효과 > 0 else '불리'})")
    
    def _최고성과_포트폴리오_재현(self, 정렬된목록):
        """최고 성과 포트폴리오 재현"""
        if not 정렬된목록:
            print("재현할 포트폴리오가 없습니다.")
            return
        
        최고성과 = 정렬된목록[0]
        
        print(f"\n최고 성과 포트폴리오 재현")
        print("="*60)
        print(f"원본 수익률: {최고성과['최종수익률']:+.2f}%")
        print(f"구성 방식: {최고성과['구성방식']}")
        print(f"생성 일시: {최고성과['timestamp']}")
        
        재현여부 = input(f"\n이 포트폴리오 구성으로 새로운 시뮬레이션을 실행하시겠습니까? (y/n): ")
        if 재현여부.lower() == 'y':
            print(f"안내: 현재 시장 상황에서 동일한 전략 구성을 재현하려면")
            print(f"   모드 5에서 추천받은 전략들로 모드 6을 실행하거나")
            print(f"   수동으로 동일한 전략 비율을 설정하세요.")
            
            print(f"\n재현 참고용 전략 구성:")
            for 전략 in 최고성과['전략구성']:
                print(f"  {전략['ID']}: {전략['할당비율']:.1f}% - {전략['전략설명']}")

if __name__ == "__main__":
    main()