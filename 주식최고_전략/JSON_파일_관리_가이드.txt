주식 최고 전략 시스템 JSON 파일 관리 가이드

============================================
1. JSON 파일 위치 및 역할
============================================

주요 JSON 파일:
- 탈락전략.json: 일반 탈락 전략 저장 (전체 데이터)
- 탈락전략_압축.json: 압축된 탈락 전략 저장 (신버전)
- 영구제외_전략_히스토리.json: 극심손실 전략 영구제외 기록
- 최고전략_히스토리.json: 우수 성과 전략 기록

백업 위치:
- 백업/탈락전략*.json: 탈락 전략 백업들
- 백업/영구제외*.json: 영구제외 전략 백업들

============================================
2. 파일 구조 및 데이터 형식
============================================

탈락전략.json 구조:
[
  {
    "매수기준": "값",
    "매수하락률": 숫자,
    "구매방식": "값", 
    "매수수량": 숫자,
    "손절라인": 숫자,
    "매도전략": "값",
    "수익라인": 숫자
  }
]

탈락전략_압축.json 구조:
{
  "version": "3.0",
  "description": "매수전략타입 포함 신버전 탈락전략 데이터",
  "structure": ["매수전략타입","매수하락률","구매방식","매수수량","손절라인","매도타입","매도파라미터","탈락횟수"],
  "매도타입_맵": {"1":"일괄","2":"적극고무줄","3":"대기고무줄","4":"급진고무줄","5":"일존버"},
  "strategies": [
    [매수전략타입, 매수하락률, 구매방식, 매수수량, 손절라인, 매도타입, 매도파라미터, 탈락횟수]
  ]
}

영구제외_전략_히스토리.json 구조:
{
  "전략키": {
    "탈락시장": ["하락장", "상승장", "횡보장"],
    "완전제외": true/false
  }
}

============================================
3. 검색 및 찾기 명령어
============================================

파일 존재 확인:
dir "C:\Users\ksj\OneDrive\바탕 화면\gemini\제작파일\주식최고_전략\*.json"

특정 텍스트 검색 (파일명):
findstr /M "탈락전략" "C:\Users\ksj\OneDrive\바탕 화면\gemini\제작파일\주식최고_전략\*.py"

코드에서 JSON 파일 참조 찾기:
findstr /N "탈락전략.json" "C:\Users\ksj\OneDrive\바탕 화면\gemini\제작파일\주식최고_전략\최적화_투자_분석.py"

파일 크기 확인:
powershell "Get-ChildItem 'C:\Users\ksj\OneDrive\바탕 화면\gemini\제작파일\주식최고_전략\*.json' | Select-Object Name, @{Name='Size(MB)';Expression={[math]::Round($_.Length/1MB,2)}}"

JSON 구조 간단 확인:
type "C:\Users\ksj\OneDrive\바탕 화면\gemini\제작파일\주식최고_전략\탈락전략_압축.json" | findstr version

============================================
4. 코드에서 JSON 파일 처리 위치
============================================

최적화_투자_분석.py 주요 라인:
- 라인 28: self.탈락전략_파일 경로 설정
- 라인 1264: 탈락전략.json 파일 생성 (빈 파일 생성 문제 지점)
- 라인 1231: 최적화된 구조로 탈락전략.json 저장 주석
- 라인 1491: 영구제외 전략 키 세트 생성

함수별 JSON 처리:
- _탈락전략_저장: 탈락전략.json 저장
- _신버전_압축파일_업데이트: 탈락전략_압축.json 업데이트  
- _극심손실_영구제외_처리: 영구제외_전략_히스토리.json 처리

============================================
5. 자주 발생하는 문제 패턴
============================================

문제 1: 빈 JSON 파일 생성
위치: 라인 1264-1277
원인: 간소화데이터 배열이 비어있음
해결: 데이터 추가 전 길이 확인

문제 2: 파일 인코딩 문제
증상: 한글 깨짐
해결: ensure_ascii=False, encoding='utf-8' 사용

문제 3: JSON 파싱 에러
원인: 잘못된 JSON 형식, 중간 중단
해결: try-catch 블록, 임시파일 사용

문제 4: 대량 데이터 처리 느림
원인: 전체 파일 재작성
해결: 압축 구조 사용, 배치 처리

============================================
6. 빠른 수정 패턴
============================================

파일 백업 후 수정:
copy "원본.json" "백업/원본_backup_YYYYMMDD_이유.json"

JSON 유효성 검사:
powershell "(Get-Content 'file.json' | ConvertFrom-Json) | ConvertTo-Json -Depth 10" > nul

빈 배열 초기화:
echo [] > "빈파일.json"

압축 파일 구조 초기화:
echo {"version":"3.0","strategies":[]} > "압축파일.json"

============================================
7. 성능 최적화 팁
============================================

1. 읽기 전용 작업시 압축파일 우선 사용
2. 대량 데이터 처리시 배치 단위로 분할
3. 임시파일 사용으로 원자적 저장
4. 메모리 사용량 모니터링
5. 정기적인 파일 크기 체크

============================================
8. 응급 복구 절차
============================================

1단계: 백업 파일 확인
dir "백업\*.json" /O:D

2단계: 최신 백업 복사
copy "백업\최신백업.json" "원본.json"

3단계: 데이터 무결성 검증
python -c "import json; json.load(open('원본.json', 'r', encoding='utf-8'))"

4단계: 시스템 재시작 테스트

============================================
마지막 업데이트: 2025-08-27
확신도: 98%