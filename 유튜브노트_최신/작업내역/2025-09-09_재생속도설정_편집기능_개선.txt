작업 날짜: 2025-01-09
작업명: 재생 속도 설정 편집 기능 개선

구현 내용:
재생 기본값 탭의 속도 설정을 편집 가능하도록 개선하고, 마우스 휠 지원 및 자동 정렬 기능 추가

수정 파일 및 변경 내용:

1. client/src/components/SettingsPanel.tsx

   추가됨:
   import { X, RotateCcw, Edit3 } from "lucide-react";
   
   // 커스텀 속도값 관리
   const [customSpeeds, setCustomSpeeds] = useState<number[]>([0.5, 0.75, 1.25, 1.5, 1.75]);
   const [isEditingSpeeds, setIsEditingSpeeds] = useState<boolean>(false);
   const [tempSpeedValues, setTempSpeedValues] = useState<string[]>(["0.5", "0.75", "1.25", "1.5", "1.75"]);
   
   // 커스텀 속도값 로드
   const savedCustomSpeeds = localStorage.getItem('customPlaybackSpeeds');
   if (savedCustomSpeeds) {
     try {
       const speeds = JSON.parse(savedCustomSpeeds);
       setCustomSpeeds(speeds);
       setTempSpeedValues(speeds.map(s => s.toString()));
     } catch (error) {
       console.error('커스텀 속도값 로드 실패:', error);
     }
   }
   
   // 커스텀 속도값 저장
   const saveCustomSpeeds = (speeds: number[]) => {
     setCustomSpeeds(speeds);
     localStorage.setItem('customPlaybackSpeeds', JSON.stringify(speeds));
   };

   // 속도 편집 시작
   const startEditingSpeeds = () => {
     setIsEditingSpeeds(true);
     setTempSpeedValues(customSpeeds.map(s => s.toString()));
   };

   // 속도 편집 완료
   const finishEditingSpeeds = () => {
     const newSpeeds = tempSpeedValues.map(value => {
       const speed = parseFloat(value);
       if (!isNaN(speed) && speed > 0 && speed <= 5) {
         return Math.round(speed * 20) / 20; // 0.05 단위로 반올림
       }
       return 1; // 기본값
     }).sort((a, b) => a - b); // 오름차순 정렬 (낮은 숫자 → 높은 숫자)
     
     saveCustomSpeeds(newSpeeds);
     setIsEditingSpeeds(false);
   };

   // 속도 편집 취소
   const cancelEditingSpeeds = () => {
     setIsEditingSpeeds(false);
     setTempSpeedValues(customSpeeds.map(s => s.toString()));
   };

   // 임시 속도값 업데이트
   const updateTempSpeedValue = (index: number, value: string) => {
     const newValues = [...tempSpeedValues];
     newValues[index] = value;
     setTempSpeedValues(newValues);
   };

   // 마우스 휠로 속도값 조정
   const handleSpeedWheel = (index: number, event: React.WheelEvent) => {
     event.preventDefault();
     const currentValue = parseFloat(tempSpeedValues[index]) || 0;
     const delta = event.deltaY > 0 ? -0.05 : 0.05; // 휠 아래: 감소, 휠 위: 증가
     const newValue = Math.max(0.05, Math.min(5, currentValue + delta));
     const roundedValue = Math.round(newValue * 20) / 20; // 0.05 단위로 반올림
     updateTempSpeedValue(index, roundedValue.toString());
   };

   수정됨:
   변경 전 (Select 컴포넌트 사용):
   <Select 
     value={settings.재생기본값?.defaultPlaybackRate?.toString() || "1"} 
     onValueChange={(value) => 
       handleSettingChange('재생기본값', {
         ...settings.재생기본값,
         defaultPlaybackRate: parseFloat(value)
       })
     }
   >
     <SelectTrigger className="w-full mt-1">
       <SelectValue />
     </SelectTrigger>
     <SelectContent>
       <SelectItem value="0.25">0.25x</SelectItem>
       <SelectItem value="0.5">0.5x</SelectItem>
       <SelectItem value="0.75">0.75x</SelectItem>
       <SelectItem value="1">1x (기본)</SelectItem>
       <SelectItem value="1.25">1.25x</SelectItem>
       <SelectItem value="1.5">1.5x</SelectItem>
       <SelectItem value="1.75">1.75x</SelectItem>
       <SelectItem value="2">2x</SelectItem>
     </SelectContent>
   </Select>
   
   변경 후 (편집 가능한 버튼 UI):
   <div className="mt-1 space-y-2">
     {/* 고정 속도 옵션 */}
     <div className="flex gap-1">
       <Button variant={settings.재생기본값?.defaultPlaybackRate === 0.25 ? "default" : "outline"} size="sm" className="flex-1 text-xs">0.25x</Button>
       <Button variant={settings.재생기본값?.defaultPlaybackRate === 1 ? "default" : "outline"} size="sm" className="flex-1 text-xs">1x</Button>
       <Button variant={settings.재생기본값?.defaultPlaybackRate === 2 ? "default" : "outline"} size="sm" className="flex-1 text-xs">2x</Button>
     </div>
     
     {/* 편집 가능한 속도 옵션 */}
     {!isEditingSpeeds ? (
       <div className="flex gap-1">
         {/* 5개 속도 버튼 */}
         {customSpeeds.map((speed, index) => (
           <Button key={index} variant={settings.재생기본값?.defaultPlaybackRate === speed ? "default" : "outline"} size="sm" className="flex-1 text-xs">{speed}x</Button>
         ))}
         {/* 편집 버튼 */}
         <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={startEditingSpeeds}>
           <Edit3 className="h-3 w-3" />
         </Button>
       </div>
     ) : (
       <div className="space-y-2">
         {/* 편집 모드 - 5개 입력창 */}
         <div className="flex gap-1">
           {tempSpeedValues.map((value, index) => (
             <Input
               key={index}
               value={value}
               onChange={(e) => updateTempSpeedValue(index, e.target.value)}
               onWheel={(e) => handleSpeedWheel(index, e)}
               className="flex-1 h-8 text-xs text-center [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
               placeholder="0.05-5.00"
               type="number"
               step="0.05"
               min="0.05"
               max="5"
             />
           ))}
         </div>
         {/* 편집 완료/취소 버튼 */}
         <div className="flex gap-2">
           <Button size="sm" className="flex-1" onClick={finishEditingSpeeds}>적용</Button>
           <Button size="sm" variant="outline" className="flex-1" onClick={cancelEditingSpeeds}>취소</Button>
         </div>
       </div>
     )}
   </div>

데이터 구조:
localStorage 키: customPlaybackSpeeds
값: number[] 형태의 5개 커스텀 속도 배열
예시: [0.5, 0.75, 1.25, 1.5, 1.75]

추가된 기능:
- 고정 속도 (0.25x, 1x, 2x): 편집 불가능한 기본 옵션
- 편집 가능한 속도: 5개 버튼에 연필 아이콘으로 편집 모드 진입
- 0.05 단위 세밀 조정: 0.05에서 5.00까지 정밀한 속도 설정
- 마우스 휠 지원: 입력창에서 휠로 값 증감 (휠 위: +0.05, 휠 아래: -0.05)
- 자동 정렬: 편집 완료 시 속도값들을 오름차순으로 자동 정렬
- 스피너 화살표 제거: CSS로 number input의 스피너 버튼 숨김
- 로컬스토리지 저장: 커스텀 속도값 영구 보존

UI 개선사항:
- 깔끔한 2줄 레이아웃: 고정 속도(첫째줄) + 편집 가능한 속도(둘째줄)
- 직관적인 편집 모드: 5개 입력창 + 적용/취소 버튼
- 실시간 휠 조정으로 빠른 값 변경 가능
- 숫자 완전 표시를 위한 스피너 화살표 제거